/* tslint:disable */
/* eslint-disable */
/**
 * Transactioncontrol API
 * Transactioncontrol API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: henning@savinggrains.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import globalAxios, {
  type AxiosPromise,
  type AxiosInstance,
  type AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface AdminUserDTO
 */
export interface AdminUserDTO {
  /**
   *
   * @type {number}
   * @memberof AdminUserDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  login: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  imageUrl?: string;
  /**
   *
   * @type {boolean}
   * @memberof AdminUserDTO
   */
  activated?: boolean;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  langKey?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  createdBy?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  createdDate?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  lastModifiedBy?: string;
  /**
   *
   * @type {string}
   * @memberof AdminUserDTO
   */
  lastModifiedDate?: string;
  /**
   *
   * @type {Set<string>}
   * @memberof AdminUserDTO
   */
  authorities?: Set<string>;
}
/**
 *
 * @export
 * @interface Bag
 */
export interface Bag {
  /**
   *
   * @type {number}
   * @memberof Bag
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof Bag
   */
  batchBagCount?: number;
  /**
   *
   * @type {string}
   * @memberof Bag
   */
  idCode: string;
  /**
   *
   * @type {number}
   * @memberof Bag
   */
  firstPrice?: number;
  /**
   *
   * @type {number}
   * @memberof Bag
   */
  salePrice?: number;
  /**
   *
   * @type {number}
   * @memberof Bag
   */
  weight?: number;
  /**
   *
   * @type {number}
   * @memberof Bag
   */
  moisture?: number;
  /**
   *
   * @type {Grain}
   * @memberof Bag
   */
  contentType?: Grain;
  /**
   *
   * @type {Transaction}
   * @memberof Bag
   */
  transaction?: Transaction;
  /**
   *
   * @type {Sale}
   * @memberof Bag
   */
  sale?: Sale;
}
/**
 *
 * @export
 * @interface Grain
 */
export interface Grain {
  /**
   *
   * @type {number}
   * @memberof Grain
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Grain
   */
  name: string;
}
/**
 *
 * @export
 * @interface Inventory
 */
export interface Inventory {
  /**
   *
   * @type {number}
   * @memberof Inventory
   */
  customerID?: number;
  /**
   *
   * @type {string}
   * @memberof Inventory
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof Inventory
   */
  ownMoney?: number;
  /**
   *
   * @type {number}
   * @memberof Inventory
   */
  loanAmount?: number;
  /**
   *
   * @type {number}
   * @memberof Inventory
   */
  sumNoFees?: number;
  /**
   *
   * @type {number}
   * @memberof Inventory
   */
  boughtKg?: number;
  /**
   *
   * @type {number}
   * @memberof Inventory
   */
  soldKg?: number;
  /**
   *
   * @type {string}
   * @memberof Inventory
   */
  grain?: string;
  /**
   *
   * @type {number}
   * @memberof Inventory
   */
  boughtBagSum?: number;
  /**
   *
   * @type {number}
   * @memberof Inventory
   */
  soldBagSum?: number;
  /**
   *
   * @type {string}
   * @memberof Inventory
   */
  team?: string;
}
/**
 *
 * @export
 * @interface JWTToken
 */
export interface JWTToken {
  /**
   *
   * @type {string}
   * @memberof JWTToken
   */
  id_token?: string;
}
/**
 *
 * @export
 * @interface KeyAndPasswordVM
 */
export interface KeyAndPasswordVM {
  /**
   *
   * @type {string}
   * @memberof KeyAndPasswordVM
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof KeyAndPasswordVM
   */
  newPassword?: string;
}
/**
 *
 * @export
 * @interface LoanContract
 */
export interface LoanContract {
  /**
   *
   * @type {number}
   * @memberof LoanContract
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof LoanContract
   */
  loanAmount: number;
  /**
   *
   * @type {number}
   * @memberof LoanContract
   */
  ownMoney: number;
  /**
   *
   * @type {boolean}
   * @memberof LoanContract
   */
  approved: boolean;
  /**
   *
   * @type {number}
   * @memberof LoanContract
   */
  contractDuration: number;
  /**
   *
   * @type {string}
   * @memberof LoanContract
   */
  contractStartDate: string;
  /**
   *
   * @type {string}
   * @memberof LoanContract
   */
  createdDate: string;
  /**
   *
   * @type {string}
   * @memberof LoanContract
   */
  lastUpdateDate?: string;
  /**
   *
   * @type {number}
   * @memberof LoanContract
   */
  interestRate: number;
  /**
   *
   * @type {number}
   * @memberof LoanContract
   */
  paybackRate: number;
  /**
   *
   * @type {number}
   * @memberof LoanContract
   */
  ctmFee: number;
  /**
   *
   * @type {number}
   * @memberof LoanContract
   */
  mtcFee: number;
  /**
   *
   * @type {number}
   * @memberof LoanContract
   */
  ctmCap?: number;
  /**
   *
   * @type {number}
   * @memberof LoanContract
   */
  mtcCap?: number;
  /**
   *
   * @type {boolean}
   * @memberof LoanContract
   */
  allowCtm: boolean;
  /**
   *
   * @type {Person}
   * @memberof LoanContract
   */
  person?: Person;
}
/**
 *
 * @export
 * @interface Location
 */
export interface Location {
  /**
   *
   * @type {number}
   * @memberof Location
   */
  id?: number;
}
/**
 *
 * @export
 * @interface LoginVM
 */
export interface LoginVM {
  /**
   *
   * @type {string}
   * @memberof LoginVM
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof LoginVM
   */
  password: string;
  /**
   *
   * @type {boolean}
   * @memberof LoginVM
   */
  rememberMe?: boolean;
}
/**
 *
 * @export
 * @interface ManagedUserVM
 */
export interface ManagedUserVM {
  /**
   *
   * @type {number}
   * @memberof ManagedUserVM
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  login: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  imageUrl?: string;
  /**
   *
   * @type {boolean}
   * @memberof ManagedUserVM
   */
  activated?: boolean;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  langKey?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  createdBy?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  createdDate?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  lastModifiedBy?: string;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  lastModifiedDate?: string;
  /**
   *
   * @type {Set<string>}
   * @memberof ManagedUserVM
   */
  authorities?: Set<string>;
  /**
   *
   * @type {string}
   * @memberof ManagedUserVM
   */
  password?: string;
}
/**
 *
 * @export
 * @interface PasswordChangeDTO
 */
export interface PasswordChangeDTO {
  /**
   *
   * @type {string}
   * @memberof PasswordChangeDTO
   */
  currentPassword?: string;
  /**
   *
   * @type {string}
   * @memberof PasswordChangeDTO
   */
  newPassword?: string;
}
/**
 *
 * @export
 * @interface Payment
 */
export interface Payment {
  /**
   *
   * @type {number}
   * @memberof Payment
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  paymentRequestedDate?: string;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  paymentDate?: string;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  nonLoanMoneyReceived?: string;
  /**
   *
   * @type {number}
   * @memberof Payment
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  paymentFromName?: string;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  paymentToName?: string;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  paymentFromMobile?: string;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  paymentToMobile?: string;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  coordinates?: string;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  remark?: string;
  /**
   *
   * @type {boolean}
   * @memberof Payment
   */
  deleted?: boolean;
  /**
   *
   * @type {number}
   * @memberof Payment
   */
  collateral?: number;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  network?: PaymentNetworkEnum;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  paymentExtid?: string;
  /**
   *
   * @type {boolean}
   * @memberof Payment
   */
  paymentErroneous?: boolean;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  paymentStatusMessage?: string;
  /**
   *
   * @type {string}
   * @memberof Payment
   */
  paymentResponse?: string;
}

export const PaymentNetworkEnum = {
  Air: "AIR",
  Vod: "VOD",
  Mtn: "MTN",
  Tig: "TIG",
  Mpesa: "MPESA",
} as const;

export type PaymentNetworkEnum =
  typeof PaymentNetworkEnum[keyof typeof PaymentNetworkEnum];

/**
 *
 * @export
 * @interface PaymentDTO
 */
export interface PaymentDTO {
  /**
   *
   * @type {number}
   * @memberof PaymentDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  paymentRequestedDate?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  paymentDate?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  nonLoanMoneyReceived?: string;
  /**
   *
   * @type {number}
   * @memberof PaymentDTO
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  paymentFromName?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  paymentToName?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  paymentFromMobile?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  paymentToMobile?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  coordinates?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  remark?: string;
  /**
   *
   * @type {boolean}
   * @memberof PaymentDTO
   */
  deleted?: boolean;
  /**
   *
   * @type {number}
   * @memberof PaymentDTO
   */
  collateral?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  network?: PaymentDTONetworkEnum;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  paymentExtid?: string;
  /**
   *
   * @type {boolean}
   * @memberof PaymentDTO
   */
  paymentErroneous?: boolean;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  paymentStatusMessage?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  paymentResponse?: string;
  /**
   *
   * @type {Transaction}
   * @memberof PaymentDTO
   */
  transaction?: Transaction;
  /**
   *
   * @type {Sale}
   * @memberof PaymentDTO
   */
  sale?: Sale;
  /**
   *
   * @type {string}
   * @memberof PaymentDTO
   */
  produce?: string;
  /**
   *
   * @type {number}
   * @memberof PaymentDTO
   */
  kg?: number;
}

export const PaymentDTONetworkEnum = {
  Air: "AIR",
  Vod: "VOD",
  Mtn: "MTN",
  Tig: "TIG",
  Mpesa: "MPESA",
} as const;

export type PaymentDTONetworkEnum =
  typeof PaymentDTONetworkEnum[keyof typeof PaymentDTONetworkEnum];

/**
 *
 * @export
 * @interface PaymentTransactionDTO
 */
export interface PaymentTransactionDTO {
  /**
   *
   * @type {number}
   * @memberof PaymentTransactionDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  paymentPurpose?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  paymentDate?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  paymentTriggeredDate?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  networkType?: PaymentTransactionDTONetworkTypeEnum;
  /**
   *
   * @type {boolean}
   * @memberof PaymentTransactionDTO
   */
  paymentErroneous?: boolean;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  paymentStatusMessage?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  paymentResponse?: string;
  /**
   *
   * @type {number}
   * @memberof PaymentTransactionDTO
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  paymentFromName?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  paymentToName?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  paymentFromMobile?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  paymentToMobile?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  momoTransType?: PaymentTransactionDTOMomoTransTypeEnum;
  /**
   *
   * @type {string}
   * @memberof PaymentTransactionDTO
   */
  paymentExtId?: string;
  /**
   *
   * @type {boolean}
   * @memberof PaymentTransactionDTO
   */
  humanSaysOk?: boolean;
  /**
   *
   * @type {number}
   * @memberof PaymentTransactionDTO
   */
  fee?: number;
  /**
   *
   * @type {PaymentDTO}
   * @memberof PaymentTransactionDTO
   */
  payment?: PaymentDTO;
  /**
   *
   * @type {PaymentTransactionDTO}
   * @memberof PaymentTransactionDTO
   */
  dependsOnPaymentTransaction?: PaymentTransactionDTO;
}

export const PaymentTransactionDTONetworkTypeEnum = {
  Air: "AIR",
  Vod: "VOD",
  Mtn: "MTN",
  Tig: "TIG",
  Mpesa: "MPESA",
} as const;

export type PaymentTransactionDTONetworkTypeEnum =
  typeof PaymentTransactionDTONetworkTypeEnum[keyof typeof PaymentTransactionDTONetworkTypeEnum];
export const PaymentTransactionDTOMomoTransTypeEnum = {
  Ctm: "CTM",
  Mtc: "MTC",
  Sms: "SMS",
} as const;

export type PaymentTransactionDTOMomoTransTypeEnum =
  typeof PaymentTransactionDTOMomoTransTypeEnum[keyof typeof PaymentTransactionDTOMomoTransTypeEnum];

/**
 * The Person entity.  Can be anything like a person selling grains, buying grain, whatever.
 * @export
 * @interface Person
 */
export interface Person {
  /**
   *
   * @type {number}
   * @memberof Person
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  mobileNumber: string;
}
/**
 *
 * @export
 * @interface PersonTeam
 */
export interface PersonTeam {
  /**
   *
   * @type {number}
   * @memberof PersonTeam
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof PersonTeam
   */
  name: string;
  /**
   *
   * @type {Person}
   * @memberof PersonTeam
   */
  person?: Person;
}
/**
 *
 * @export
 * @interface Sale
 */
export interface Sale {
  /**
   *
   * @type {number}
   * @memberof Sale
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Sale
   */
  createdDate?: string;
  /**
   *
   * @type {string}
   * @memberof Sale
   */
  lastUpdateDate?: string;
}
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
  /**
   *
   * @type {number}
   * @memberof Transaction
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Transaction
   */
  createdDate?: string;
  /**
   *
   * @type {string}
   * @memberof Transaction
   */
  lastUpdateDate?: string;
  /**
   *
   * @type {string}
   * @memberof Transaction
   */
  repackDate?: string;
  /**
   *
   * @type {Set<Bag>}
   * @memberof Transaction
   */
  bags?: Set<Bag>;
  /**
   *
   * @type {Warehouse}
   * @memberof Transaction
   */
  warehouse?: Warehouse;
  /**
   *
   * @type {Location}
   * @memberof Transaction
   */
  location?: Location;
  /**
   *
   * @type {Person}
   * @memberof Transaction
   */
  buyer?: Person;
  /**
   *
   * @type {Person}
   * @memberof Transaction
   */
  seller?: Person;
  /**
   *
   * @type {Payment}
   * @memberof Transaction
   */
  payment?: Payment;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof User
   */
  login: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastName?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  activated: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  langKey?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  imageUrl?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  resetKey?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  resetDate?: string;
}
/**
 *
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
  /**
   *
   * @type {number}
   * @memberof UserDTO
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UserDTO
   */
  login?: string;
}
/**
 *
 * @export
 * @interface Uv
 */
export interface Uv {
  /**
   *
   * @type {number}
   * @memberof Uv
   */
  pid?: number;
  /**
   *
   * @type {number}
   * @memberof Uv
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Uv
   */
  login?: string;
  /**
   *
   * @type {string}
   * @memberof Uv
   */
  mobileNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Uv
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof Uv
   */
  lastName?: string;
}
/**
 *
 * @export
 * @interface Warehouse
 */
export interface Warehouse {
  /**
   *
   * @type {number}
   * @memberof Warehouse
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof Warehouse
   */
  bagCapacity?: number;
  /**
   *
   * @type {string}
   * @memberof Warehouse
   */
  name?: string;
  /**
   *
   * @type {Location}
   * @memberof Warehouse
   */
  location?: Location;
  /**
   *
   * @type {Person}
   * @memberof Warehouse
   */
  person?: Person;
}

/**
 * AccountResourceApi - axios parameter creator
 * @export
 */
export const AccountResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateAccount: async (
      key: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'key' is not null or undefined
      assertParamExists("activateAccount", "key", key);
      const localVarPath = `/api/activate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (key !== undefined) {
        localVarQueryParameter["key"] = key;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PasswordChangeDTO} passwordChangeDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword: async (
      passwordChangeDTO: PasswordChangeDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'passwordChangeDTO' is not null or undefined
      assertParamExists(
        "changePassword",
        "passwordChangeDTO",
        passwordChangeDTO
      );
      const localVarPath = `/api/account/change-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        passwordChangeDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {KeyAndPasswordVM} keyAndPasswordVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finishPasswordReset: async (
      keyAndPasswordVM: KeyAndPasswordVM,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'keyAndPasswordVM' is not null or undefined
      assertParamExists(
        "finishPasswordReset",
        "keyAndPasswordVM",
        keyAndPasswordVM
      );
      const localVarPath = `/api/account/reset-password/finish`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        keyAndPasswordVM,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/account`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAuthenticated: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/authenticate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ManagedUserVM} managedUserVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerAccount: async (
      managedUserVM: ManagedUserVM,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'managedUserVM' is not null or undefined
      assertParamExists("registerAccount", "managedUserVM", managedUserVM);
      const localVarPath = `/api/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        managedUserVM,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestPasswordReset: async (
      body: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists("requestPasswordReset", "body", body);
      const localVarPath = `/api/account/reset-password/init`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AdminUserDTO} adminUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveAccount: async (
      adminUserDTO: AdminUserDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'adminUserDTO' is not null or undefined
      assertParamExists("saveAccount", "adminUserDTO", adminUserDTO);
      const localVarPath = `/api/account`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        adminUserDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AccountResourceApi - functional programming interface
 * @export
 */
export const AccountResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AccountResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activateAccount(
      key: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.activateAccount(
        key,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {PasswordChangeDTO} passwordChangeDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changePassword(
      passwordChangeDTO: PasswordChangeDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(
        passwordChangeDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {KeyAndPasswordVM} keyAndPasswordVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async finishPasswordReset(
      keyAndPasswordVM: KeyAndPasswordVM,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.finishPasswordReset(
          keyAndPasswordVM,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAccount(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async isAuthenticated(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.isAuthenticated(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {ManagedUserVM} managedUserVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async registerAccount(
      managedUserVM: ManagedUserVM,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.registerAccount(
        managedUserVM,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestPasswordReset(
      body: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.requestPasswordReset(body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {AdminUserDTO} adminUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async saveAccount(
      adminUserDTO: AdminUserDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.saveAccount(
        adminUserDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AccountResourceApi - factory interface
 * @export
 */
export const AccountResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AccountResourceApiFp(configuration);
  return {
    /**
     *
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateAccount(key: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .activateAccount(key, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PasswordChangeDTO} passwordChangeDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword(
      passwordChangeDTO: PasswordChangeDTO,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .changePassword(passwordChangeDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {KeyAndPasswordVM} keyAndPasswordVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finishPasswordReset(
      keyAndPasswordVM: KeyAndPasswordVM,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .finishPasswordReset(keyAndPasswordVM, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(options?: any): AxiosPromise<AdminUserDTO> {
      return localVarFp
        .getAccount(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAuthenticated(options?: any): AxiosPromise<string> {
      return localVarFp
        .isAuthenticated(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ManagedUserVM} managedUserVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerAccount(
      managedUserVM: ManagedUserVM,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .registerAccount(managedUserVM, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestPasswordReset(body: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .requestPasswordReset(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AdminUserDTO} adminUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveAccount(adminUserDTO: AdminUserDTO, options?: any): AxiosPromise<void> {
      return localVarFp
        .saveAccount(adminUserDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AccountResourceApi - object-oriented interface
 * @export
 * @class AccountResourceApi
 * @extends {BaseAPI}
 */
export class AccountResourceApi extends BaseAPI {
  /**
   *
   * @param {string} key
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public activateAccount(key: string, options?: AxiosRequestConfig) {
    return AccountResourceApiFp(this.configuration)
      .activateAccount(key, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PasswordChangeDTO} passwordChangeDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public changePassword(
    passwordChangeDTO: PasswordChangeDTO,
    options?: AxiosRequestConfig
  ) {
    return AccountResourceApiFp(this.configuration)
      .changePassword(passwordChangeDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {KeyAndPasswordVM} keyAndPasswordVM
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public finishPasswordReset(
    keyAndPasswordVM: KeyAndPasswordVM,
    options?: AxiosRequestConfig
  ) {
    return AccountResourceApiFp(this.configuration)
      .finishPasswordReset(keyAndPasswordVM, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public getAccount(options?: AxiosRequestConfig) {
    return AccountResourceApiFp(this.configuration)
      .getAccount(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public isAuthenticated(options?: AxiosRequestConfig) {
    return AccountResourceApiFp(this.configuration)
      .isAuthenticated(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ManagedUserVM} managedUserVM
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public registerAccount(
    managedUserVM: ManagedUserVM,
    options?: AxiosRequestConfig
  ) {
    return AccountResourceApiFp(this.configuration)
      .registerAccount(managedUserVM, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public requestPasswordReset(body: string, options?: AxiosRequestConfig) {
    return AccountResourceApiFp(this.configuration)
      .requestPasswordReset(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AdminUserDTO} adminUserDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public saveAccount(adminUserDTO: AdminUserDTO, options?: AxiosRequestConfig) {
    return AccountResourceApiFp(this.configuration)
      .saveAccount(adminUserDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * BagResourceApi - axios parameter creator
 * @export
 */
export const BagResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {Bag} bag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBag: async (
      bag: Bag,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'bag' is not null or undefined
      assertParamExists("createBag", "bag", bag);
      const localVarPath = `/api/bags`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bag,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBag: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteBag", "id", id);
      const localVarPath = `/api/bags/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBags: async (
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/bags`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBag: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getBag", "id", id);
      const localVarPath = `/api/bags/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Bag} bag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateBag: async (
      id: number,
      bag: Bag,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateBag", "id", id);
      // verify required parameter 'bag' is not null or undefined
      assertParamExists("partialUpdateBag", "bag", bag);
      const localVarPath = `/api/bags/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bag,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Bag} bag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBag: async (
      id: number,
      bag: Bag,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateBag", "id", id);
      // verify required parameter 'bag' is not null or undefined
      assertParamExists("updateBag", "bag", bag);
      const localVarPath = `/api/bags/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bag,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BagResourceApi - functional programming interface
 * @export
 */
export const BagResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    BagResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {Bag} bag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBag(
      bag: Bag,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bag>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBag(
        bag,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBag(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBag(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllBags(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bag>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBags(
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBag(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bag>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBag(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Bag} bag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateBag(
      id: number,
      bag: Bag,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bag>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdateBag(id, bag, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Bag} bag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBag(
      id: number,
      bag: Bag,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bag>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBag(
        id,
        bag,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * BagResourceApi - factory interface
 * @export
 */
export const BagResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = BagResourceApiFp(configuration);
  return {
    /**
     *
     * @param {Bag} bag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBag(bag: Bag, options?: any): AxiosPromise<Bag> {
      return localVarFp
        .createBag(bag, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBag(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteBag(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllBags(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<Array<Bag>> {
      return localVarFp
        .getAllBags(page, size, sort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBag(id: number, options?: any): AxiosPromise<Bag> {
      return localVarFp
        .getBag(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Bag} bag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateBag(id: number, bag: Bag, options?: any): AxiosPromise<Bag> {
      return localVarFp
        .partialUpdateBag(id, bag, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Bag} bag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBag(id: number, bag: Bag, options?: any): AxiosPromise<Bag> {
      return localVarFp
        .updateBag(id, bag, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BagResourceApi - object-oriented interface
 * @export
 * @class BagResourceApi
 * @extends {BaseAPI}
 */
export class BagResourceApi extends BaseAPI {
  /**
   *
   * @param {Bag} bag
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BagResourceApi
   */
  public createBag(bag: Bag, options?: AxiosRequestConfig) {
    return BagResourceApiFp(this.configuration)
      .createBag(bag, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BagResourceApi
   */
  public deleteBag(id: number, options?: AxiosRequestConfig) {
    return BagResourceApiFp(this.configuration)
      .deleteBag(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BagResourceApi
   */
  public getAllBags(
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return BagResourceApiFp(this.configuration)
      .getAllBags(page, size, sort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BagResourceApi
   */
  public getBag(id: number, options?: AxiosRequestConfig) {
    return BagResourceApiFp(this.configuration)
      .getBag(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Bag} bag
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BagResourceApi
   */
  public partialUpdateBag(id: number, bag: Bag, options?: AxiosRequestConfig) {
    return BagResourceApiFp(this.configuration)
      .partialUpdateBag(id, bag, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Bag} bag
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BagResourceApi
   */
  public updateBag(id: number, bag: Bag, options?: AxiosRequestConfig) {
    return BagResourceApiFp(this.configuration)
      .updateBag(id, bag, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GrainResourceApi - axios parameter creator
 * @export
 */
export const GrainResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {Grain} grain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGrain: async (
      grain: Grain,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'grain' is not null or undefined
      assertParamExists("createGrain", "grain", grain);
      const localVarPath = `/api/grains`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        grain,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGrain: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteGrain", "id", id);
      const localVarPath = `/api/grains/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGrains: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/grains`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGrain: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getGrain", "id", id);
      const localVarPath = `/api/grains/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Grain} grain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateGrain: async (
      id: number,
      grain: Grain,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateGrain", "id", id);
      // verify required parameter 'grain' is not null or undefined
      assertParamExists("partialUpdateGrain", "grain", grain);
      const localVarPath = `/api/grains/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        grain,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Grain} grain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGrain: async (
      id: number,
      grain: Grain,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateGrain", "id", id);
      // verify required parameter 'grain' is not null or undefined
      assertParamExists("updateGrain", "grain", grain);
      const localVarPath = `/api/grains/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        grain,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GrainResourceApi - functional programming interface
 * @export
 */
export const GrainResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    GrainResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {Grain} grain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createGrain(
      grain: Grain,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Grain>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createGrain(
        grain,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGrain(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGrain(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllGrains(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Grain>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllGrains(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGrain(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Grain>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGrain(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Grain} grain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateGrain(
      id: number,
      grain: Grain,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Grain>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdateGrain(id, grain, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Grain} grain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateGrain(
      id: number,
      grain: Grain,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Grain>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateGrain(
        id,
        grain,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * GrainResourceApi - factory interface
 * @export
 */
export const GrainResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GrainResourceApiFp(configuration);
  return {
    /**
     *
     * @param {Grain} grain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGrain(grain: Grain, options?: any): AxiosPromise<Grain> {
      return localVarFp
        .createGrain(grain, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGrain(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteGrain(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllGrains(options?: any): AxiosPromise<Array<Grain>> {
      return localVarFp
        .getAllGrains(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGrain(id: number, options?: any): AxiosPromise<Grain> {
      return localVarFp
        .getGrain(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Grain} grain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateGrain(
      id: number,
      grain: Grain,
      options?: any
    ): AxiosPromise<Grain> {
      return localVarFp
        .partialUpdateGrain(id, grain, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Grain} grain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGrain(id: number, grain: Grain, options?: any): AxiosPromise<Grain> {
      return localVarFp
        .updateGrain(id, grain, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GrainResourceApi - object-oriented interface
 * @export
 * @class GrainResourceApi
 * @extends {BaseAPI}
 */
export class GrainResourceApi extends BaseAPI {
  /**
   *
   * @param {Grain} grain
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GrainResourceApi
   */
  public createGrain(grain: Grain, options?: AxiosRequestConfig) {
    return GrainResourceApiFp(this.configuration)
      .createGrain(grain, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GrainResourceApi
   */
  public deleteGrain(id: number, options?: AxiosRequestConfig) {
    return GrainResourceApiFp(this.configuration)
      .deleteGrain(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GrainResourceApi
   */
  public getAllGrains(options?: AxiosRequestConfig) {
    return GrainResourceApiFp(this.configuration)
      .getAllGrains(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GrainResourceApi
   */
  public getGrain(id: number, options?: AxiosRequestConfig) {
    return GrainResourceApiFp(this.configuration)
      .getGrain(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Grain} grain
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GrainResourceApi
   */
  public partialUpdateGrain(
    id: number,
    grain: Grain,
    options?: AxiosRequestConfig
  ) {
    return GrainResourceApiFp(this.configuration)
      .partialUpdateGrain(id, grain, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Grain} grain
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GrainResourceApi
   */
  public updateGrain(id: number, grain: Grain, options?: AxiosRequestConfig) {
    return GrainResourceApiFp(this.configuration)
      .updateGrain(id, grain, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * InventoryResourceApi - axios parameter creator
 * @export
 */
export const InventoryResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [customerIDGreaterThan]
     * @param {number} [customerIDLessThan]
     * @param {number} [customerIDGreaterThanOrEqual]
     * @param {number} [customerIDLessThanOrEqual]
     * @param {number} [customerIDEquals]
     * @param {number} [customerIDNotEquals]
     * @param {boolean} [customerIDSpecified]
     * @param {Array<number>} [customerIDIn]
     * @param {Array<number>} [customerIDNotIn]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [sumNoFeesGreaterThan]
     * @param {number} [sumNoFeesLessThan]
     * @param {number} [sumNoFeesGreaterThanOrEqual]
     * @param {number} [sumNoFeesLessThanOrEqual]
     * @param {number} [sumNoFeesEquals]
     * @param {number} [sumNoFeesNotEquals]
     * @param {boolean} [sumNoFeesSpecified]
     * @param {Array<number>} [sumNoFeesIn]
     * @param {Array<number>} [sumNoFeesNotIn]
     * @param {number} [boughtKgGreaterThan]
     * @param {number} [boughtKgLessThan]
     * @param {number} [boughtKgGreaterThanOrEqual]
     * @param {number} [boughtKgLessThanOrEqual]
     * @param {number} [boughtKgEquals]
     * @param {number} [boughtKgNotEquals]
     * @param {boolean} [boughtKgSpecified]
     * @param {Array<number>} [boughtKgIn]
     * @param {Array<number>} [boughtKgNotIn]
     * @param {number} [soldKgGreaterThan]
     * @param {number} [soldKgLessThan]
     * @param {number} [soldKgGreaterThanOrEqual]
     * @param {number} [soldKgLessThanOrEqual]
     * @param {number} [soldKgEquals]
     * @param {number} [soldKgNotEquals]
     * @param {boolean} [soldKgSpecified]
     * @param {Array<number>} [soldKgIn]
     * @param {Array<number>} [soldKgNotIn]
     * @param {string} [grainContains]
     * @param {string} [grainDoesNotContain]
     * @param {string} [grainEquals]
     * @param {string} [grainNotEquals]
     * @param {boolean} [grainSpecified]
     * @param {Array<string>} [grainIn]
     * @param {Array<string>} [grainNotIn]
     * @param {number} [boughtBagSumGreaterThan]
     * @param {number} [boughtBagSumLessThan]
     * @param {number} [boughtBagSumGreaterThanOrEqual]
     * @param {number} [boughtBagSumLessThanOrEqual]
     * @param {number} [boughtBagSumEquals]
     * @param {number} [boughtBagSumNotEquals]
     * @param {boolean} [boughtBagSumSpecified]
     * @param {Array<number>} [boughtBagSumIn]
     * @param {Array<number>} [boughtBagSumNotIn]
     * @param {number} [soldBagSumGreaterThan]
     * @param {number} [soldBagSumLessThan]
     * @param {number} [soldBagSumGreaterThanOrEqual]
     * @param {number} [soldBagSumLessThanOrEqual]
     * @param {number} [soldBagSumEquals]
     * @param {number} [soldBagSumNotEquals]
     * @param {boolean} [soldBagSumSpecified]
     * @param {Array<number>} [soldBagSumIn]
     * @param {Array<number>} [soldBagSumNotIn]
     * @param {string} [teamContains]
     * @param {string} [teamDoesNotContain]
     * @param {string} [teamEquals]
     * @param {string} [teamNotEquals]
     * @param {boolean} [teamSpecified]
     * @param {Array<string>} [teamIn]
     * @param {Array<string>} [teamNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countInventories: async (
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      customerIDGreaterThan?: number,
      customerIDLessThan?: number,
      customerIDGreaterThanOrEqual?: number,
      customerIDLessThanOrEqual?: number,
      customerIDEquals?: number,
      customerIDNotEquals?: number,
      customerIDSpecified?: boolean,
      customerIDIn?: Array<number>,
      customerIDNotIn?: Array<number>,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      sumNoFeesGreaterThan?: number,
      sumNoFeesLessThan?: number,
      sumNoFeesGreaterThanOrEqual?: number,
      sumNoFeesLessThanOrEqual?: number,
      sumNoFeesEquals?: number,
      sumNoFeesNotEquals?: number,
      sumNoFeesSpecified?: boolean,
      sumNoFeesIn?: Array<number>,
      sumNoFeesNotIn?: Array<number>,
      boughtKgGreaterThan?: number,
      boughtKgLessThan?: number,
      boughtKgGreaterThanOrEqual?: number,
      boughtKgLessThanOrEqual?: number,
      boughtKgEquals?: number,
      boughtKgNotEquals?: number,
      boughtKgSpecified?: boolean,
      boughtKgIn?: Array<number>,
      boughtKgNotIn?: Array<number>,
      soldKgGreaterThan?: number,
      soldKgLessThan?: number,
      soldKgGreaterThanOrEqual?: number,
      soldKgLessThanOrEqual?: number,
      soldKgEquals?: number,
      soldKgNotEquals?: number,
      soldKgSpecified?: boolean,
      soldKgIn?: Array<number>,
      soldKgNotIn?: Array<number>,
      grainContains?: string,
      grainDoesNotContain?: string,
      grainEquals?: string,
      grainNotEquals?: string,
      grainSpecified?: boolean,
      grainIn?: Array<string>,
      grainNotIn?: Array<string>,
      boughtBagSumGreaterThan?: number,
      boughtBagSumLessThan?: number,
      boughtBagSumGreaterThanOrEqual?: number,
      boughtBagSumLessThanOrEqual?: number,
      boughtBagSumEquals?: number,
      boughtBagSumNotEquals?: number,
      boughtBagSumSpecified?: boolean,
      boughtBagSumIn?: Array<number>,
      boughtBagSumNotIn?: Array<number>,
      soldBagSumGreaterThan?: number,
      soldBagSumLessThan?: number,
      soldBagSumGreaterThanOrEqual?: number,
      soldBagSumLessThanOrEqual?: number,
      soldBagSumEquals?: number,
      soldBagSumNotEquals?: number,
      soldBagSumSpecified?: boolean,
      soldBagSumIn?: Array<number>,
      soldBagSumNotIn?: Array<number>,
      teamContains?: string,
      teamDoesNotContain?: string,
      teamEquals?: string,
      teamNotEquals?: string,
      teamSpecified?: boolean,
      teamIn?: Array<string>,
      teamNotIn?: Array<string>,
      distinct?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/inventories/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (idGreaterThan !== undefined) {
        localVarQueryParameter["id.greaterThan"] = idGreaterThan;
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter["id.lessThan"] = idLessThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["id.greaterThanOrEqual"] = idGreaterThanOrEqual;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter["id.lessThanOrEqual"] = idLessThanOrEqual;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter["id.equals"] = idEquals;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter["id.notEquals"] = idNotEquals;
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter["id.specified"] = idSpecified;
      }

      if (idIn) {
        localVarQueryParameter["id.in"] = idIn;
      }

      if (idNotIn) {
        localVarQueryParameter["id.notIn"] = idNotIn;
      }

      if (customerIDGreaterThan !== undefined) {
        localVarQueryParameter["customerID.greaterThan"] =
          customerIDGreaterThan;
      }

      if (customerIDLessThan !== undefined) {
        localVarQueryParameter["customerID.lessThan"] = customerIDLessThan;
      }

      if (customerIDGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["customerID.greaterThanOrEqual"] =
          customerIDGreaterThanOrEqual;
      }

      if (customerIDLessThanOrEqual !== undefined) {
        localVarQueryParameter["customerID.lessThanOrEqual"] =
          customerIDLessThanOrEqual;
      }

      if (customerIDEquals !== undefined) {
        localVarQueryParameter["customerID.equals"] = customerIDEquals;
      }

      if (customerIDNotEquals !== undefined) {
        localVarQueryParameter["customerID.notEquals"] = customerIDNotEquals;
      }

      if (customerIDSpecified !== undefined) {
        localVarQueryParameter["customerID.specified"] = customerIDSpecified;
      }

      if (customerIDIn) {
        localVarQueryParameter["customerID.in"] = customerIDIn;
      }

      if (customerIDNotIn) {
        localVarQueryParameter["customerID.notIn"] = customerIDNotIn;
      }

      if (nameContains !== undefined) {
        localVarQueryParameter["name.contains"] = nameContains;
      }

      if (nameDoesNotContain !== undefined) {
        localVarQueryParameter["name.doesNotContain"] = nameDoesNotContain;
      }

      if (nameEquals !== undefined) {
        localVarQueryParameter["name.equals"] = nameEquals;
      }

      if (nameNotEquals !== undefined) {
        localVarQueryParameter["name.notEquals"] = nameNotEquals;
      }

      if (nameSpecified !== undefined) {
        localVarQueryParameter["name.specified"] = nameSpecified;
      }

      if (nameIn) {
        localVarQueryParameter["name.in"] = nameIn;
      }

      if (nameNotIn) {
        localVarQueryParameter["name.notIn"] = nameNotIn;
      }

      if (ownMoneyGreaterThan !== undefined) {
        localVarQueryParameter["ownMoney.greaterThan"] = ownMoneyGreaterThan;
      }

      if (ownMoneyLessThan !== undefined) {
        localVarQueryParameter["ownMoney.lessThan"] = ownMoneyLessThan;
      }

      if (ownMoneyGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["ownMoney.greaterThanOrEqual"] =
          ownMoneyGreaterThanOrEqual;
      }

      if (ownMoneyLessThanOrEqual !== undefined) {
        localVarQueryParameter["ownMoney.lessThanOrEqual"] =
          ownMoneyLessThanOrEqual;
      }

      if (ownMoneyEquals !== undefined) {
        localVarQueryParameter["ownMoney.equals"] = ownMoneyEquals;
      }

      if (ownMoneyNotEquals !== undefined) {
        localVarQueryParameter["ownMoney.notEquals"] = ownMoneyNotEquals;
      }

      if (ownMoneySpecified !== undefined) {
        localVarQueryParameter["ownMoney.specified"] = ownMoneySpecified;
      }

      if (ownMoneyIn) {
        localVarQueryParameter["ownMoney.in"] = ownMoneyIn;
      }

      if (ownMoneyNotIn) {
        localVarQueryParameter["ownMoney.notIn"] = ownMoneyNotIn;
      }

      if (loanAmountGreaterThan !== undefined) {
        localVarQueryParameter["loanAmount.greaterThan"] =
          loanAmountGreaterThan;
      }

      if (loanAmountLessThan !== undefined) {
        localVarQueryParameter["loanAmount.lessThan"] = loanAmountLessThan;
      }

      if (loanAmountGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["loanAmount.greaterThanOrEqual"] =
          loanAmountGreaterThanOrEqual;
      }

      if (loanAmountLessThanOrEqual !== undefined) {
        localVarQueryParameter["loanAmount.lessThanOrEqual"] =
          loanAmountLessThanOrEqual;
      }

      if (loanAmountEquals !== undefined) {
        localVarQueryParameter["loanAmount.equals"] = loanAmountEquals;
      }

      if (loanAmountNotEquals !== undefined) {
        localVarQueryParameter["loanAmount.notEquals"] = loanAmountNotEquals;
      }

      if (loanAmountSpecified !== undefined) {
        localVarQueryParameter["loanAmount.specified"] = loanAmountSpecified;
      }

      if (loanAmountIn) {
        localVarQueryParameter["loanAmount.in"] = loanAmountIn;
      }

      if (loanAmountNotIn) {
        localVarQueryParameter["loanAmount.notIn"] = loanAmountNotIn;
      }

      if (sumNoFeesGreaterThan !== undefined) {
        localVarQueryParameter["sumNoFees.greaterThan"] = sumNoFeesGreaterThan;
      }

      if (sumNoFeesLessThan !== undefined) {
        localVarQueryParameter["sumNoFees.lessThan"] = sumNoFeesLessThan;
      }

      if (sumNoFeesGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["sumNoFees.greaterThanOrEqual"] =
          sumNoFeesGreaterThanOrEqual;
      }

      if (sumNoFeesLessThanOrEqual !== undefined) {
        localVarQueryParameter["sumNoFees.lessThanOrEqual"] =
          sumNoFeesLessThanOrEqual;
      }

      if (sumNoFeesEquals !== undefined) {
        localVarQueryParameter["sumNoFees.equals"] = sumNoFeesEquals;
      }

      if (sumNoFeesNotEquals !== undefined) {
        localVarQueryParameter["sumNoFees.notEquals"] = sumNoFeesNotEquals;
      }

      if (sumNoFeesSpecified !== undefined) {
        localVarQueryParameter["sumNoFees.specified"] = sumNoFeesSpecified;
      }

      if (sumNoFeesIn) {
        localVarQueryParameter["sumNoFees.in"] = sumNoFeesIn;
      }

      if (sumNoFeesNotIn) {
        localVarQueryParameter["sumNoFees.notIn"] = sumNoFeesNotIn;
      }

      if (boughtKgGreaterThan !== undefined) {
        localVarQueryParameter["boughtKg.greaterThan"] = boughtKgGreaterThan;
      }

      if (boughtKgLessThan !== undefined) {
        localVarQueryParameter["boughtKg.lessThan"] = boughtKgLessThan;
      }

      if (boughtKgGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["boughtKg.greaterThanOrEqual"] =
          boughtKgGreaterThanOrEqual;
      }

      if (boughtKgLessThanOrEqual !== undefined) {
        localVarQueryParameter["boughtKg.lessThanOrEqual"] =
          boughtKgLessThanOrEqual;
      }

      if (boughtKgEquals !== undefined) {
        localVarQueryParameter["boughtKg.equals"] = boughtKgEquals;
      }

      if (boughtKgNotEquals !== undefined) {
        localVarQueryParameter["boughtKg.notEquals"] = boughtKgNotEquals;
      }

      if (boughtKgSpecified !== undefined) {
        localVarQueryParameter["boughtKg.specified"] = boughtKgSpecified;
      }

      if (boughtKgIn) {
        localVarQueryParameter["boughtKg.in"] = boughtKgIn;
      }

      if (boughtKgNotIn) {
        localVarQueryParameter["boughtKg.notIn"] = boughtKgNotIn;
      }

      if (soldKgGreaterThan !== undefined) {
        localVarQueryParameter["soldKg.greaterThan"] = soldKgGreaterThan;
      }

      if (soldKgLessThan !== undefined) {
        localVarQueryParameter["soldKg.lessThan"] = soldKgLessThan;
      }

      if (soldKgGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["soldKg.greaterThanOrEqual"] =
          soldKgGreaterThanOrEqual;
      }

      if (soldKgLessThanOrEqual !== undefined) {
        localVarQueryParameter["soldKg.lessThanOrEqual"] =
          soldKgLessThanOrEqual;
      }

      if (soldKgEquals !== undefined) {
        localVarQueryParameter["soldKg.equals"] = soldKgEquals;
      }

      if (soldKgNotEquals !== undefined) {
        localVarQueryParameter["soldKg.notEquals"] = soldKgNotEquals;
      }

      if (soldKgSpecified !== undefined) {
        localVarQueryParameter["soldKg.specified"] = soldKgSpecified;
      }

      if (soldKgIn) {
        localVarQueryParameter["soldKg.in"] = soldKgIn;
      }

      if (soldKgNotIn) {
        localVarQueryParameter["soldKg.notIn"] = soldKgNotIn;
      }

      if (grainContains !== undefined) {
        localVarQueryParameter["grain.contains"] = grainContains;
      }

      if (grainDoesNotContain !== undefined) {
        localVarQueryParameter["grain.doesNotContain"] = grainDoesNotContain;
      }

      if (grainEquals !== undefined) {
        localVarQueryParameter["grain.equals"] = grainEquals;
      }

      if (grainNotEquals !== undefined) {
        localVarQueryParameter["grain.notEquals"] = grainNotEquals;
      }

      if (grainSpecified !== undefined) {
        localVarQueryParameter["grain.specified"] = grainSpecified;
      }

      if (grainIn) {
        localVarQueryParameter["grain.in"] = grainIn;
      }

      if (grainNotIn) {
        localVarQueryParameter["grain.notIn"] = grainNotIn;
      }

      if (boughtBagSumGreaterThan !== undefined) {
        localVarQueryParameter["boughtBagSum.greaterThan"] =
          boughtBagSumGreaterThan;
      }

      if (boughtBagSumLessThan !== undefined) {
        localVarQueryParameter["boughtBagSum.lessThan"] = boughtBagSumLessThan;
      }

      if (boughtBagSumGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["boughtBagSum.greaterThanOrEqual"] =
          boughtBagSumGreaterThanOrEqual;
      }

      if (boughtBagSumLessThanOrEqual !== undefined) {
        localVarQueryParameter["boughtBagSum.lessThanOrEqual"] =
          boughtBagSumLessThanOrEqual;
      }

      if (boughtBagSumEquals !== undefined) {
        localVarQueryParameter["boughtBagSum.equals"] = boughtBagSumEquals;
      }

      if (boughtBagSumNotEquals !== undefined) {
        localVarQueryParameter["boughtBagSum.notEquals"] =
          boughtBagSumNotEquals;
      }

      if (boughtBagSumSpecified !== undefined) {
        localVarQueryParameter["boughtBagSum.specified"] =
          boughtBagSumSpecified;
      }

      if (boughtBagSumIn) {
        localVarQueryParameter["boughtBagSum.in"] = boughtBagSumIn;
      }

      if (boughtBagSumNotIn) {
        localVarQueryParameter["boughtBagSum.notIn"] = boughtBagSumNotIn;
      }

      if (soldBagSumGreaterThan !== undefined) {
        localVarQueryParameter["soldBagSum.greaterThan"] =
          soldBagSumGreaterThan;
      }

      if (soldBagSumLessThan !== undefined) {
        localVarQueryParameter["soldBagSum.lessThan"] = soldBagSumLessThan;
      }

      if (soldBagSumGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["soldBagSum.greaterThanOrEqual"] =
          soldBagSumGreaterThanOrEqual;
      }

      if (soldBagSumLessThanOrEqual !== undefined) {
        localVarQueryParameter["soldBagSum.lessThanOrEqual"] =
          soldBagSumLessThanOrEqual;
      }

      if (soldBagSumEquals !== undefined) {
        localVarQueryParameter["soldBagSum.equals"] = soldBagSumEquals;
      }

      if (soldBagSumNotEquals !== undefined) {
        localVarQueryParameter["soldBagSum.notEquals"] = soldBagSumNotEquals;
      }

      if (soldBagSumSpecified !== undefined) {
        localVarQueryParameter["soldBagSum.specified"] = soldBagSumSpecified;
      }

      if (soldBagSumIn) {
        localVarQueryParameter["soldBagSum.in"] = soldBagSumIn;
      }

      if (soldBagSumNotIn) {
        localVarQueryParameter["soldBagSum.notIn"] = soldBagSumNotIn;
      }

      if (teamContains !== undefined) {
        localVarQueryParameter["team.contains"] = teamContains;
      }

      if (teamDoesNotContain !== undefined) {
        localVarQueryParameter["team.doesNotContain"] = teamDoesNotContain;
      }

      if (teamEquals !== undefined) {
        localVarQueryParameter["team.equals"] = teamEquals;
      }

      if (teamNotEquals !== undefined) {
        localVarQueryParameter["team.notEquals"] = teamNotEquals;
      }

      if (teamSpecified !== undefined) {
        localVarQueryParameter["team.specified"] = teamSpecified;
      }

      if (teamIn) {
        localVarQueryParameter["team.in"] = teamIn;
      }

      if (teamNotIn) {
        localVarQueryParameter["team.notIn"] = teamNotIn;
      }

      if (distinct !== undefined) {
        localVarQueryParameter["distinct"] = distinct;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [customerIDGreaterThan]
     * @param {number} [customerIDLessThan]
     * @param {number} [customerIDGreaterThanOrEqual]
     * @param {number} [customerIDLessThanOrEqual]
     * @param {number} [customerIDEquals]
     * @param {number} [customerIDNotEquals]
     * @param {boolean} [customerIDSpecified]
     * @param {Array<number>} [customerIDIn]
     * @param {Array<number>} [customerIDNotIn]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [sumNoFeesGreaterThan]
     * @param {number} [sumNoFeesLessThan]
     * @param {number} [sumNoFeesGreaterThanOrEqual]
     * @param {number} [sumNoFeesLessThanOrEqual]
     * @param {number} [sumNoFeesEquals]
     * @param {number} [sumNoFeesNotEquals]
     * @param {boolean} [sumNoFeesSpecified]
     * @param {Array<number>} [sumNoFeesIn]
     * @param {Array<number>} [sumNoFeesNotIn]
     * @param {number} [boughtKgGreaterThan]
     * @param {number} [boughtKgLessThan]
     * @param {number} [boughtKgGreaterThanOrEqual]
     * @param {number} [boughtKgLessThanOrEqual]
     * @param {number} [boughtKgEquals]
     * @param {number} [boughtKgNotEquals]
     * @param {boolean} [boughtKgSpecified]
     * @param {Array<number>} [boughtKgIn]
     * @param {Array<number>} [boughtKgNotIn]
     * @param {number} [soldKgGreaterThan]
     * @param {number} [soldKgLessThan]
     * @param {number} [soldKgGreaterThanOrEqual]
     * @param {number} [soldKgLessThanOrEqual]
     * @param {number} [soldKgEquals]
     * @param {number} [soldKgNotEquals]
     * @param {boolean} [soldKgSpecified]
     * @param {Array<number>} [soldKgIn]
     * @param {Array<number>} [soldKgNotIn]
     * @param {string} [grainContains]
     * @param {string} [grainDoesNotContain]
     * @param {string} [grainEquals]
     * @param {string} [grainNotEquals]
     * @param {boolean} [grainSpecified]
     * @param {Array<string>} [grainIn]
     * @param {Array<string>} [grainNotIn]
     * @param {number} [boughtBagSumGreaterThan]
     * @param {number} [boughtBagSumLessThan]
     * @param {number} [boughtBagSumGreaterThanOrEqual]
     * @param {number} [boughtBagSumLessThanOrEqual]
     * @param {number} [boughtBagSumEquals]
     * @param {number} [boughtBagSumNotEquals]
     * @param {boolean} [boughtBagSumSpecified]
     * @param {Array<number>} [boughtBagSumIn]
     * @param {Array<number>} [boughtBagSumNotIn]
     * @param {number} [soldBagSumGreaterThan]
     * @param {number} [soldBagSumLessThan]
     * @param {number} [soldBagSumGreaterThanOrEqual]
     * @param {number} [soldBagSumLessThanOrEqual]
     * @param {number} [soldBagSumEquals]
     * @param {number} [soldBagSumNotEquals]
     * @param {boolean} [soldBagSumSpecified]
     * @param {Array<number>} [soldBagSumIn]
     * @param {Array<number>} [soldBagSumNotIn]
     * @param {string} [teamContains]
     * @param {string} [teamDoesNotContain]
     * @param {string} [teamEquals]
     * @param {string} [teamNotEquals]
     * @param {boolean} [teamSpecified]
     * @param {Array<string>} [teamIn]
     * @param {Array<string>} [teamNotIn]
     * @param {boolean} [distinct]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllInventories: async (
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      customerIDGreaterThan?: number,
      customerIDLessThan?: number,
      customerIDGreaterThanOrEqual?: number,
      customerIDLessThanOrEqual?: number,
      customerIDEquals?: number,
      customerIDNotEquals?: number,
      customerIDSpecified?: boolean,
      customerIDIn?: Array<number>,
      customerIDNotIn?: Array<number>,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      sumNoFeesGreaterThan?: number,
      sumNoFeesLessThan?: number,
      sumNoFeesGreaterThanOrEqual?: number,
      sumNoFeesLessThanOrEqual?: number,
      sumNoFeesEquals?: number,
      sumNoFeesNotEquals?: number,
      sumNoFeesSpecified?: boolean,
      sumNoFeesIn?: Array<number>,
      sumNoFeesNotIn?: Array<number>,
      boughtKgGreaterThan?: number,
      boughtKgLessThan?: number,
      boughtKgGreaterThanOrEqual?: number,
      boughtKgLessThanOrEqual?: number,
      boughtKgEquals?: number,
      boughtKgNotEquals?: number,
      boughtKgSpecified?: boolean,
      boughtKgIn?: Array<number>,
      boughtKgNotIn?: Array<number>,
      soldKgGreaterThan?: number,
      soldKgLessThan?: number,
      soldKgGreaterThanOrEqual?: number,
      soldKgLessThanOrEqual?: number,
      soldKgEquals?: number,
      soldKgNotEquals?: number,
      soldKgSpecified?: boolean,
      soldKgIn?: Array<number>,
      soldKgNotIn?: Array<number>,
      grainContains?: string,
      grainDoesNotContain?: string,
      grainEquals?: string,
      grainNotEquals?: string,
      grainSpecified?: boolean,
      grainIn?: Array<string>,
      grainNotIn?: Array<string>,
      boughtBagSumGreaterThan?: number,
      boughtBagSumLessThan?: number,
      boughtBagSumGreaterThanOrEqual?: number,
      boughtBagSumLessThanOrEqual?: number,
      boughtBagSumEquals?: number,
      boughtBagSumNotEquals?: number,
      boughtBagSumSpecified?: boolean,
      boughtBagSumIn?: Array<number>,
      boughtBagSumNotIn?: Array<number>,
      soldBagSumGreaterThan?: number,
      soldBagSumLessThan?: number,
      soldBagSumGreaterThanOrEqual?: number,
      soldBagSumLessThanOrEqual?: number,
      soldBagSumEquals?: number,
      soldBagSumNotEquals?: number,
      soldBagSumSpecified?: boolean,
      soldBagSumIn?: Array<number>,
      soldBagSumNotIn?: Array<number>,
      teamContains?: string,
      teamDoesNotContain?: string,
      teamEquals?: string,
      teamNotEquals?: string,
      teamSpecified?: boolean,
      teamIn?: Array<string>,
      teamNotIn?: Array<string>,
      distinct?: boolean,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/inventories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (idGreaterThan !== undefined) {
        localVarQueryParameter["id.greaterThan"] = idGreaterThan;
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter["id.lessThan"] = idLessThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["id.greaterThanOrEqual"] = idGreaterThanOrEqual;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter["id.lessThanOrEqual"] = idLessThanOrEqual;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter["id.equals"] = idEquals;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter["id.notEquals"] = idNotEquals;
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter["id.specified"] = idSpecified;
      }

      if (idIn) {
        localVarQueryParameter["id.in"] = idIn;
      }

      if (idNotIn) {
        localVarQueryParameter["id.notIn"] = idNotIn;
      }

      if (customerIDGreaterThan !== undefined) {
        localVarQueryParameter["customerID.greaterThan"] =
          customerIDGreaterThan;
      }

      if (customerIDLessThan !== undefined) {
        localVarQueryParameter["customerID.lessThan"] = customerIDLessThan;
      }

      if (customerIDGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["customerID.greaterThanOrEqual"] =
          customerIDGreaterThanOrEqual;
      }

      if (customerIDLessThanOrEqual !== undefined) {
        localVarQueryParameter["customerID.lessThanOrEqual"] =
          customerIDLessThanOrEqual;
      }

      if (customerIDEquals !== undefined) {
        localVarQueryParameter["customerID.equals"] = customerIDEquals;
      }

      if (customerIDNotEquals !== undefined) {
        localVarQueryParameter["customerID.notEquals"] = customerIDNotEquals;
      }

      if (customerIDSpecified !== undefined) {
        localVarQueryParameter["customerID.specified"] = customerIDSpecified;
      }

      if (customerIDIn) {
        localVarQueryParameter["customerID.in"] = customerIDIn;
      }

      if (customerIDNotIn) {
        localVarQueryParameter["customerID.notIn"] = customerIDNotIn;
      }

      if (nameContains !== undefined) {
        localVarQueryParameter["name.contains"] = nameContains;
      }

      if (nameDoesNotContain !== undefined) {
        localVarQueryParameter["name.doesNotContain"] = nameDoesNotContain;
      }

      if (nameEquals !== undefined) {
        localVarQueryParameter["name.equals"] = nameEquals;
      }

      if (nameNotEquals !== undefined) {
        localVarQueryParameter["name.notEquals"] = nameNotEquals;
      }

      if (nameSpecified !== undefined) {
        localVarQueryParameter["name.specified"] = nameSpecified;
      }

      if (nameIn) {
        localVarQueryParameter["name.in"] = nameIn;
      }

      if (nameNotIn) {
        localVarQueryParameter["name.notIn"] = nameNotIn;
      }

      if (ownMoneyGreaterThan !== undefined) {
        localVarQueryParameter["ownMoney.greaterThan"] = ownMoneyGreaterThan;
      }

      if (ownMoneyLessThan !== undefined) {
        localVarQueryParameter["ownMoney.lessThan"] = ownMoneyLessThan;
      }

      if (ownMoneyGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["ownMoney.greaterThanOrEqual"] =
          ownMoneyGreaterThanOrEqual;
      }

      if (ownMoneyLessThanOrEqual !== undefined) {
        localVarQueryParameter["ownMoney.lessThanOrEqual"] =
          ownMoneyLessThanOrEqual;
      }

      if (ownMoneyEquals !== undefined) {
        localVarQueryParameter["ownMoney.equals"] = ownMoneyEquals;
      }

      if (ownMoneyNotEquals !== undefined) {
        localVarQueryParameter["ownMoney.notEquals"] = ownMoneyNotEquals;
      }

      if (ownMoneySpecified !== undefined) {
        localVarQueryParameter["ownMoney.specified"] = ownMoneySpecified;
      }

      if (ownMoneyIn) {
        localVarQueryParameter["ownMoney.in"] = ownMoneyIn;
      }

      if (ownMoneyNotIn) {
        localVarQueryParameter["ownMoney.notIn"] = ownMoneyNotIn;
      }

      if (loanAmountGreaterThan !== undefined) {
        localVarQueryParameter["loanAmount.greaterThan"] =
          loanAmountGreaterThan;
      }

      if (loanAmountLessThan !== undefined) {
        localVarQueryParameter["loanAmount.lessThan"] = loanAmountLessThan;
      }

      if (loanAmountGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["loanAmount.greaterThanOrEqual"] =
          loanAmountGreaterThanOrEqual;
      }

      if (loanAmountLessThanOrEqual !== undefined) {
        localVarQueryParameter["loanAmount.lessThanOrEqual"] =
          loanAmountLessThanOrEqual;
      }

      if (loanAmountEquals !== undefined) {
        localVarQueryParameter["loanAmount.equals"] = loanAmountEquals;
      }

      if (loanAmountNotEquals !== undefined) {
        localVarQueryParameter["loanAmount.notEquals"] = loanAmountNotEquals;
      }

      if (loanAmountSpecified !== undefined) {
        localVarQueryParameter["loanAmount.specified"] = loanAmountSpecified;
      }

      if (loanAmountIn) {
        localVarQueryParameter["loanAmount.in"] = loanAmountIn;
      }

      if (loanAmountNotIn) {
        localVarQueryParameter["loanAmount.notIn"] = loanAmountNotIn;
      }

      if (sumNoFeesGreaterThan !== undefined) {
        localVarQueryParameter["sumNoFees.greaterThan"] = sumNoFeesGreaterThan;
      }

      if (sumNoFeesLessThan !== undefined) {
        localVarQueryParameter["sumNoFees.lessThan"] = sumNoFeesLessThan;
      }

      if (sumNoFeesGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["sumNoFees.greaterThanOrEqual"] =
          sumNoFeesGreaterThanOrEqual;
      }

      if (sumNoFeesLessThanOrEqual !== undefined) {
        localVarQueryParameter["sumNoFees.lessThanOrEqual"] =
          sumNoFeesLessThanOrEqual;
      }

      if (sumNoFeesEquals !== undefined) {
        localVarQueryParameter["sumNoFees.equals"] = sumNoFeesEquals;
      }

      if (sumNoFeesNotEquals !== undefined) {
        localVarQueryParameter["sumNoFees.notEquals"] = sumNoFeesNotEquals;
      }

      if (sumNoFeesSpecified !== undefined) {
        localVarQueryParameter["sumNoFees.specified"] = sumNoFeesSpecified;
      }

      if (sumNoFeesIn) {
        localVarQueryParameter["sumNoFees.in"] = sumNoFeesIn;
      }

      if (sumNoFeesNotIn) {
        localVarQueryParameter["sumNoFees.notIn"] = sumNoFeesNotIn;
      }

      if (boughtKgGreaterThan !== undefined) {
        localVarQueryParameter["boughtKg.greaterThan"] = boughtKgGreaterThan;
      }

      if (boughtKgLessThan !== undefined) {
        localVarQueryParameter["boughtKg.lessThan"] = boughtKgLessThan;
      }

      if (boughtKgGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["boughtKg.greaterThanOrEqual"] =
          boughtKgGreaterThanOrEqual;
      }

      if (boughtKgLessThanOrEqual !== undefined) {
        localVarQueryParameter["boughtKg.lessThanOrEqual"] =
          boughtKgLessThanOrEqual;
      }

      if (boughtKgEquals !== undefined) {
        localVarQueryParameter["boughtKg.equals"] = boughtKgEquals;
      }

      if (boughtKgNotEquals !== undefined) {
        localVarQueryParameter["boughtKg.notEquals"] = boughtKgNotEquals;
      }

      if (boughtKgSpecified !== undefined) {
        localVarQueryParameter["boughtKg.specified"] = boughtKgSpecified;
      }

      if (boughtKgIn) {
        localVarQueryParameter["boughtKg.in"] = boughtKgIn;
      }

      if (boughtKgNotIn) {
        localVarQueryParameter["boughtKg.notIn"] = boughtKgNotIn;
      }

      if (soldKgGreaterThan !== undefined) {
        localVarQueryParameter["soldKg.greaterThan"] = soldKgGreaterThan;
      }

      if (soldKgLessThan !== undefined) {
        localVarQueryParameter["soldKg.lessThan"] = soldKgLessThan;
      }

      if (soldKgGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["soldKg.greaterThanOrEqual"] =
          soldKgGreaterThanOrEqual;
      }

      if (soldKgLessThanOrEqual !== undefined) {
        localVarQueryParameter["soldKg.lessThanOrEqual"] =
          soldKgLessThanOrEqual;
      }

      if (soldKgEquals !== undefined) {
        localVarQueryParameter["soldKg.equals"] = soldKgEquals;
      }

      if (soldKgNotEquals !== undefined) {
        localVarQueryParameter["soldKg.notEquals"] = soldKgNotEquals;
      }

      if (soldKgSpecified !== undefined) {
        localVarQueryParameter["soldKg.specified"] = soldKgSpecified;
      }

      if (soldKgIn) {
        localVarQueryParameter["soldKg.in"] = soldKgIn;
      }

      if (soldKgNotIn) {
        localVarQueryParameter["soldKg.notIn"] = soldKgNotIn;
      }

      if (grainContains !== undefined) {
        localVarQueryParameter["grain.contains"] = grainContains;
      }

      if (grainDoesNotContain !== undefined) {
        localVarQueryParameter["grain.doesNotContain"] = grainDoesNotContain;
      }

      if (grainEquals !== undefined) {
        localVarQueryParameter["grain.equals"] = grainEquals;
      }

      if (grainNotEquals !== undefined) {
        localVarQueryParameter["grain.notEquals"] = grainNotEquals;
      }

      if (grainSpecified !== undefined) {
        localVarQueryParameter["grain.specified"] = grainSpecified;
      }

      if (grainIn) {
        localVarQueryParameter["grain.in"] = grainIn;
      }

      if (grainNotIn) {
        localVarQueryParameter["grain.notIn"] = grainNotIn;
      }

      if (boughtBagSumGreaterThan !== undefined) {
        localVarQueryParameter["boughtBagSum.greaterThan"] =
          boughtBagSumGreaterThan;
      }

      if (boughtBagSumLessThan !== undefined) {
        localVarQueryParameter["boughtBagSum.lessThan"] = boughtBagSumLessThan;
      }

      if (boughtBagSumGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["boughtBagSum.greaterThanOrEqual"] =
          boughtBagSumGreaterThanOrEqual;
      }

      if (boughtBagSumLessThanOrEqual !== undefined) {
        localVarQueryParameter["boughtBagSum.lessThanOrEqual"] =
          boughtBagSumLessThanOrEqual;
      }

      if (boughtBagSumEquals !== undefined) {
        localVarQueryParameter["boughtBagSum.equals"] = boughtBagSumEquals;
      }

      if (boughtBagSumNotEquals !== undefined) {
        localVarQueryParameter["boughtBagSum.notEquals"] =
          boughtBagSumNotEquals;
      }

      if (boughtBagSumSpecified !== undefined) {
        localVarQueryParameter["boughtBagSum.specified"] =
          boughtBagSumSpecified;
      }

      if (boughtBagSumIn) {
        localVarQueryParameter["boughtBagSum.in"] = boughtBagSumIn;
      }

      if (boughtBagSumNotIn) {
        localVarQueryParameter["boughtBagSum.notIn"] = boughtBagSumNotIn;
      }

      if (soldBagSumGreaterThan !== undefined) {
        localVarQueryParameter["soldBagSum.greaterThan"] =
          soldBagSumGreaterThan;
      }

      if (soldBagSumLessThan !== undefined) {
        localVarQueryParameter["soldBagSum.lessThan"] = soldBagSumLessThan;
      }

      if (soldBagSumGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["soldBagSum.greaterThanOrEqual"] =
          soldBagSumGreaterThanOrEqual;
      }

      if (soldBagSumLessThanOrEqual !== undefined) {
        localVarQueryParameter["soldBagSum.lessThanOrEqual"] =
          soldBagSumLessThanOrEqual;
      }

      if (soldBagSumEquals !== undefined) {
        localVarQueryParameter["soldBagSum.equals"] = soldBagSumEquals;
      }

      if (soldBagSumNotEquals !== undefined) {
        localVarQueryParameter["soldBagSum.notEquals"] = soldBagSumNotEquals;
      }

      if (soldBagSumSpecified !== undefined) {
        localVarQueryParameter["soldBagSum.specified"] = soldBagSumSpecified;
      }

      if (soldBagSumIn) {
        localVarQueryParameter["soldBagSum.in"] = soldBagSumIn;
      }

      if (soldBagSumNotIn) {
        localVarQueryParameter["soldBagSum.notIn"] = soldBagSumNotIn;
      }

      if (teamContains !== undefined) {
        localVarQueryParameter["team.contains"] = teamContains;
      }

      if (teamDoesNotContain !== undefined) {
        localVarQueryParameter["team.doesNotContain"] = teamDoesNotContain;
      }

      if (teamEquals !== undefined) {
        localVarQueryParameter["team.equals"] = teamEquals;
      }

      if (teamNotEquals !== undefined) {
        localVarQueryParameter["team.notEquals"] = teamNotEquals;
      }

      if (teamSpecified !== undefined) {
        localVarQueryParameter["team.specified"] = teamSpecified;
      }

      if (teamIn) {
        localVarQueryParameter["team.in"] = teamIn;
      }

      if (teamNotIn) {
        localVarQueryParameter["team.notIn"] = teamNotIn;
      }

      if (distinct !== undefined) {
        localVarQueryParameter["distinct"] = distinct;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventory: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getInventory", "id", id);
      const localVarPath = `/api/inventories/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Inventory} inventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateInventory: async (
      id: number,
      inventory: Inventory,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateInventory", "id", id);
      // verify required parameter 'inventory' is not null or undefined
      assertParamExists("partialUpdateInventory", "inventory", inventory);
      const localVarPath = `/api/inventories/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inventory,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * InventoryResourceApi - functional programming interface
 * @export
 */
export const InventoryResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    InventoryResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [customerIDGreaterThan]
     * @param {number} [customerIDLessThan]
     * @param {number} [customerIDGreaterThanOrEqual]
     * @param {number} [customerIDLessThanOrEqual]
     * @param {number} [customerIDEquals]
     * @param {number} [customerIDNotEquals]
     * @param {boolean} [customerIDSpecified]
     * @param {Array<number>} [customerIDIn]
     * @param {Array<number>} [customerIDNotIn]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [sumNoFeesGreaterThan]
     * @param {number} [sumNoFeesLessThan]
     * @param {number} [sumNoFeesGreaterThanOrEqual]
     * @param {number} [sumNoFeesLessThanOrEqual]
     * @param {number} [sumNoFeesEquals]
     * @param {number} [sumNoFeesNotEquals]
     * @param {boolean} [sumNoFeesSpecified]
     * @param {Array<number>} [sumNoFeesIn]
     * @param {Array<number>} [sumNoFeesNotIn]
     * @param {number} [boughtKgGreaterThan]
     * @param {number} [boughtKgLessThan]
     * @param {number} [boughtKgGreaterThanOrEqual]
     * @param {number} [boughtKgLessThanOrEqual]
     * @param {number} [boughtKgEquals]
     * @param {number} [boughtKgNotEquals]
     * @param {boolean} [boughtKgSpecified]
     * @param {Array<number>} [boughtKgIn]
     * @param {Array<number>} [boughtKgNotIn]
     * @param {number} [soldKgGreaterThan]
     * @param {number} [soldKgLessThan]
     * @param {number} [soldKgGreaterThanOrEqual]
     * @param {number} [soldKgLessThanOrEqual]
     * @param {number} [soldKgEquals]
     * @param {number} [soldKgNotEquals]
     * @param {boolean} [soldKgSpecified]
     * @param {Array<number>} [soldKgIn]
     * @param {Array<number>} [soldKgNotIn]
     * @param {string} [grainContains]
     * @param {string} [grainDoesNotContain]
     * @param {string} [grainEquals]
     * @param {string} [grainNotEquals]
     * @param {boolean} [grainSpecified]
     * @param {Array<string>} [grainIn]
     * @param {Array<string>} [grainNotIn]
     * @param {number} [boughtBagSumGreaterThan]
     * @param {number} [boughtBagSumLessThan]
     * @param {number} [boughtBagSumGreaterThanOrEqual]
     * @param {number} [boughtBagSumLessThanOrEqual]
     * @param {number} [boughtBagSumEquals]
     * @param {number} [boughtBagSumNotEquals]
     * @param {boolean} [boughtBagSumSpecified]
     * @param {Array<number>} [boughtBagSumIn]
     * @param {Array<number>} [boughtBagSumNotIn]
     * @param {number} [soldBagSumGreaterThan]
     * @param {number} [soldBagSumLessThan]
     * @param {number} [soldBagSumGreaterThanOrEqual]
     * @param {number} [soldBagSumLessThanOrEqual]
     * @param {number} [soldBagSumEquals]
     * @param {number} [soldBagSumNotEquals]
     * @param {boolean} [soldBagSumSpecified]
     * @param {Array<number>} [soldBagSumIn]
     * @param {Array<number>} [soldBagSumNotIn]
     * @param {string} [teamContains]
     * @param {string} [teamDoesNotContain]
     * @param {string} [teamEquals]
     * @param {string} [teamNotEquals]
     * @param {boolean} [teamSpecified]
     * @param {Array<string>} [teamIn]
     * @param {Array<string>} [teamNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countInventories(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      customerIDGreaterThan?: number,
      customerIDLessThan?: number,
      customerIDGreaterThanOrEqual?: number,
      customerIDLessThanOrEqual?: number,
      customerIDEquals?: number,
      customerIDNotEquals?: number,
      customerIDSpecified?: boolean,
      customerIDIn?: Array<number>,
      customerIDNotIn?: Array<number>,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      sumNoFeesGreaterThan?: number,
      sumNoFeesLessThan?: number,
      sumNoFeesGreaterThanOrEqual?: number,
      sumNoFeesLessThanOrEqual?: number,
      sumNoFeesEquals?: number,
      sumNoFeesNotEquals?: number,
      sumNoFeesSpecified?: boolean,
      sumNoFeesIn?: Array<number>,
      sumNoFeesNotIn?: Array<number>,
      boughtKgGreaterThan?: number,
      boughtKgLessThan?: number,
      boughtKgGreaterThanOrEqual?: number,
      boughtKgLessThanOrEqual?: number,
      boughtKgEquals?: number,
      boughtKgNotEquals?: number,
      boughtKgSpecified?: boolean,
      boughtKgIn?: Array<number>,
      boughtKgNotIn?: Array<number>,
      soldKgGreaterThan?: number,
      soldKgLessThan?: number,
      soldKgGreaterThanOrEqual?: number,
      soldKgLessThanOrEqual?: number,
      soldKgEquals?: number,
      soldKgNotEquals?: number,
      soldKgSpecified?: boolean,
      soldKgIn?: Array<number>,
      soldKgNotIn?: Array<number>,
      grainContains?: string,
      grainDoesNotContain?: string,
      grainEquals?: string,
      grainNotEquals?: string,
      grainSpecified?: boolean,
      grainIn?: Array<string>,
      grainNotIn?: Array<string>,
      boughtBagSumGreaterThan?: number,
      boughtBagSumLessThan?: number,
      boughtBagSumGreaterThanOrEqual?: number,
      boughtBagSumLessThanOrEqual?: number,
      boughtBagSumEquals?: number,
      boughtBagSumNotEquals?: number,
      boughtBagSumSpecified?: boolean,
      boughtBagSumIn?: Array<number>,
      boughtBagSumNotIn?: Array<number>,
      soldBagSumGreaterThan?: number,
      soldBagSumLessThan?: number,
      soldBagSumGreaterThanOrEqual?: number,
      soldBagSumLessThanOrEqual?: number,
      soldBagSumEquals?: number,
      soldBagSumNotEquals?: number,
      soldBagSumSpecified?: boolean,
      soldBagSumIn?: Array<number>,
      soldBagSumNotIn?: Array<number>,
      teamContains?: string,
      teamDoesNotContain?: string,
      teamEquals?: string,
      teamNotEquals?: string,
      teamSpecified?: boolean,
      teamIn?: Array<string>,
      teamNotIn?: Array<string>,
      distinct?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.countInventories(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          customerIDGreaterThan,
          customerIDLessThan,
          customerIDGreaterThanOrEqual,
          customerIDLessThanOrEqual,
          customerIDEquals,
          customerIDNotEquals,
          customerIDSpecified,
          customerIDIn,
          customerIDNotIn,
          nameContains,
          nameDoesNotContain,
          nameEquals,
          nameNotEquals,
          nameSpecified,
          nameIn,
          nameNotIn,
          ownMoneyGreaterThan,
          ownMoneyLessThan,
          ownMoneyGreaterThanOrEqual,
          ownMoneyLessThanOrEqual,
          ownMoneyEquals,
          ownMoneyNotEquals,
          ownMoneySpecified,
          ownMoneyIn,
          ownMoneyNotIn,
          loanAmountGreaterThan,
          loanAmountLessThan,
          loanAmountGreaterThanOrEqual,
          loanAmountLessThanOrEqual,
          loanAmountEquals,
          loanAmountNotEquals,
          loanAmountSpecified,
          loanAmountIn,
          loanAmountNotIn,
          sumNoFeesGreaterThan,
          sumNoFeesLessThan,
          sumNoFeesGreaterThanOrEqual,
          sumNoFeesLessThanOrEqual,
          sumNoFeesEquals,
          sumNoFeesNotEquals,
          sumNoFeesSpecified,
          sumNoFeesIn,
          sumNoFeesNotIn,
          boughtKgGreaterThan,
          boughtKgLessThan,
          boughtKgGreaterThanOrEqual,
          boughtKgLessThanOrEqual,
          boughtKgEquals,
          boughtKgNotEquals,
          boughtKgSpecified,
          boughtKgIn,
          boughtKgNotIn,
          soldKgGreaterThan,
          soldKgLessThan,
          soldKgGreaterThanOrEqual,
          soldKgLessThanOrEqual,
          soldKgEquals,
          soldKgNotEquals,
          soldKgSpecified,
          soldKgIn,
          soldKgNotIn,
          grainContains,
          grainDoesNotContain,
          grainEquals,
          grainNotEquals,
          grainSpecified,
          grainIn,
          grainNotIn,
          boughtBagSumGreaterThan,
          boughtBagSumLessThan,
          boughtBagSumGreaterThanOrEqual,
          boughtBagSumLessThanOrEqual,
          boughtBagSumEquals,
          boughtBagSumNotEquals,
          boughtBagSumSpecified,
          boughtBagSumIn,
          boughtBagSumNotIn,
          soldBagSumGreaterThan,
          soldBagSumLessThan,
          soldBagSumGreaterThanOrEqual,
          soldBagSumLessThanOrEqual,
          soldBagSumEquals,
          soldBagSumNotEquals,
          soldBagSumSpecified,
          soldBagSumIn,
          soldBagSumNotIn,
          teamContains,
          teamDoesNotContain,
          teamEquals,
          teamNotEquals,
          teamSpecified,
          teamIn,
          teamNotIn,
          distinct,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [customerIDGreaterThan]
     * @param {number} [customerIDLessThan]
     * @param {number} [customerIDGreaterThanOrEqual]
     * @param {number} [customerIDLessThanOrEqual]
     * @param {number} [customerIDEquals]
     * @param {number} [customerIDNotEquals]
     * @param {boolean} [customerIDSpecified]
     * @param {Array<number>} [customerIDIn]
     * @param {Array<number>} [customerIDNotIn]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [sumNoFeesGreaterThan]
     * @param {number} [sumNoFeesLessThan]
     * @param {number} [sumNoFeesGreaterThanOrEqual]
     * @param {number} [sumNoFeesLessThanOrEqual]
     * @param {number} [sumNoFeesEquals]
     * @param {number} [sumNoFeesNotEquals]
     * @param {boolean} [sumNoFeesSpecified]
     * @param {Array<number>} [sumNoFeesIn]
     * @param {Array<number>} [sumNoFeesNotIn]
     * @param {number} [boughtKgGreaterThan]
     * @param {number} [boughtKgLessThan]
     * @param {number} [boughtKgGreaterThanOrEqual]
     * @param {number} [boughtKgLessThanOrEqual]
     * @param {number} [boughtKgEquals]
     * @param {number} [boughtKgNotEquals]
     * @param {boolean} [boughtKgSpecified]
     * @param {Array<number>} [boughtKgIn]
     * @param {Array<number>} [boughtKgNotIn]
     * @param {number} [soldKgGreaterThan]
     * @param {number} [soldKgLessThan]
     * @param {number} [soldKgGreaterThanOrEqual]
     * @param {number} [soldKgLessThanOrEqual]
     * @param {number} [soldKgEquals]
     * @param {number} [soldKgNotEquals]
     * @param {boolean} [soldKgSpecified]
     * @param {Array<number>} [soldKgIn]
     * @param {Array<number>} [soldKgNotIn]
     * @param {string} [grainContains]
     * @param {string} [grainDoesNotContain]
     * @param {string} [grainEquals]
     * @param {string} [grainNotEquals]
     * @param {boolean} [grainSpecified]
     * @param {Array<string>} [grainIn]
     * @param {Array<string>} [grainNotIn]
     * @param {number} [boughtBagSumGreaterThan]
     * @param {number} [boughtBagSumLessThan]
     * @param {number} [boughtBagSumGreaterThanOrEqual]
     * @param {number} [boughtBagSumLessThanOrEqual]
     * @param {number} [boughtBagSumEquals]
     * @param {number} [boughtBagSumNotEquals]
     * @param {boolean} [boughtBagSumSpecified]
     * @param {Array<number>} [boughtBagSumIn]
     * @param {Array<number>} [boughtBagSumNotIn]
     * @param {number} [soldBagSumGreaterThan]
     * @param {number} [soldBagSumLessThan]
     * @param {number} [soldBagSumGreaterThanOrEqual]
     * @param {number} [soldBagSumLessThanOrEqual]
     * @param {number} [soldBagSumEquals]
     * @param {number} [soldBagSumNotEquals]
     * @param {boolean} [soldBagSumSpecified]
     * @param {Array<number>} [soldBagSumIn]
     * @param {Array<number>} [soldBagSumNotIn]
     * @param {string} [teamContains]
     * @param {string} [teamDoesNotContain]
     * @param {string} [teamEquals]
     * @param {string} [teamNotEquals]
     * @param {boolean} [teamSpecified]
     * @param {Array<string>} [teamIn]
     * @param {Array<string>} [teamNotIn]
     * @param {boolean} [distinct]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllInventories(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      customerIDGreaterThan?: number,
      customerIDLessThan?: number,
      customerIDGreaterThanOrEqual?: number,
      customerIDLessThanOrEqual?: number,
      customerIDEquals?: number,
      customerIDNotEquals?: number,
      customerIDSpecified?: boolean,
      customerIDIn?: Array<number>,
      customerIDNotIn?: Array<number>,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      sumNoFeesGreaterThan?: number,
      sumNoFeesLessThan?: number,
      sumNoFeesGreaterThanOrEqual?: number,
      sumNoFeesLessThanOrEqual?: number,
      sumNoFeesEquals?: number,
      sumNoFeesNotEquals?: number,
      sumNoFeesSpecified?: boolean,
      sumNoFeesIn?: Array<number>,
      sumNoFeesNotIn?: Array<number>,
      boughtKgGreaterThan?: number,
      boughtKgLessThan?: number,
      boughtKgGreaterThanOrEqual?: number,
      boughtKgLessThanOrEqual?: number,
      boughtKgEquals?: number,
      boughtKgNotEquals?: number,
      boughtKgSpecified?: boolean,
      boughtKgIn?: Array<number>,
      boughtKgNotIn?: Array<number>,
      soldKgGreaterThan?: number,
      soldKgLessThan?: number,
      soldKgGreaterThanOrEqual?: number,
      soldKgLessThanOrEqual?: number,
      soldKgEquals?: number,
      soldKgNotEquals?: number,
      soldKgSpecified?: boolean,
      soldKgIn?: Array<number>,
      soldKgNotIn?: Array<number>,
      grainContains?: string,
      grainDoesNotContain?: string,
      grainEquals?: string,
      grainNotEquals?: string,
      grainSpecified?: boolean,
      grainIn?: Array<string>,
      grainNotIn?: Array<string>,
      boughtBagSumGreaterThan?: number,
      boughtBagSumLessThan?: number,
      boughtBagSumGreaterThanOrEqual?: number,
      boughtBagSumLessThanOrEqual?: number,
      boughtBagSumEquals?: number,
      boughtBagSumNotEquals?: number,
      boughtBagSumSpecified?: boolean,
      boughtBagSumIn?: Array<number>,
      boughtBagSumNotIn?: Array<number>,
      soldBagSumGreaterThan?: number,
      soldBagSumLessThan?: number,
      soldBagSumGreaterThanOrEqual?: number,
      soldBagSumLessThanOrEqual?: number,
      soldBagSumEquals?: number,
      soldBagSumNotEquals?: number,
      soldBagSumSpecified?: boolean,
      soldBagSumIn?: Array<number>,
      soldBagSumNotIn?: Array<number>,
      teamContains?: string,
      teamDoesNotContain?: string,
      teamEquals?: string,
      teamNotEquals?: string,
      teamSpecified?: boolean,
      teamIn?: Array<string>,
      teamNotIn?: Array<string>,
      distinct?: boolean,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Inventory>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllInventories(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          customerIDGreaterThan,
          customerIDLessThan,
          customerIDGreaterThanOrEqual,
          customerIDLessThanOrEqual,
          customerIDEquals,
          customerIDNotEquals,
          customerIDSpecified,
          customerIDIn,
          customerIDNotIn,
          nameContains,
          nameDoesNotContain,
          nameEquals,
          nameNotEquals,
          nameSpecified,
          nameIn,
          nameNotIn,
          ownMoneyGreaterThan,
          ownMoneyLessThan,
          ownMoneyGreaterThanOrEqual,
          ownMoneyLessThanOrEqual,
          ownMoneyEquals,
          ownMoneyNotEquals,
          ownMoneySpecified,
          ownMoneyIn,
          ownMoneyNotIn,
          loanAmountGreaterThan,
          loanAmountLessThan,
          loanAmountGreaterThanOrEqual,
          loanAmountLessThanOrEqual,
          loanAmountEquals,
          loanAmountNotEquals,
          loanAmountSpecified,
          loanAmountIn,
          loanAmountNotIn,
          sumNoFeesGreaterThan,
          sumNoFeesLessThan,
          sumNoFeesGreaterThanOrEqual,
          sumNoFeesLessThanOrEqual,
          sumNoFeesEquals,
          sumNoFeesNotEquals,
          sumNoFeesSpecified,
          sumNoFeesIn,
          sumNoFeesNotIn,
          boughtKgGreaterThan,
          boughtKgLessThan,
          boughtKgGreaterThanOrEqual,
          boughtKgLessThanOrEqual,
          boughtKgEquals,
          boughtKgNotEquals,
          boughtKgSpecified,
          boughtKgIn,
          boughtKgNotIn,
          soldKgGreaterThan,
          soldKgLessThan,
          soldKgGreaterThanOrEqual,
          soldKgLessThanOrEqual,
          soldKgEquals,
          soldKgNotEquals,
          soldKgSpecified,
          soldKgIn,
          soldKgNotIn,
          grainContains,
          grainDoesNotContain,
          grainEquals,
          grainNotEquals,
          grainSpecified,
          grainIn,
          grainNotIn,
          boughtBagSumGreaterThan,
          boughtBagSumLessThan,
          boughtBagSumGreaterThanOrEqual,
          boughtBagSumLessThanOrEqual,
          boughtBagSumEquals,
          boughtBagSumNotEquals,
          boughtBagSumSpecified,
          boughtBagSumIn,
          boughtBagSumNotIn,
          soldBagSumGreaterThan,
          soldBagSumLessThan,
          soldBagSumGreaterThanOrEqual,
          soldBagSumLessThanOrEqual,
          soldBagSumEquals,
          soldBagSumNotEquals,
          soldBagSumSpecified,
          soldBagSumIn,
          soldBagSumNotIn,
          teamContains,
          teamDoesNotContain,
          teamEquals,
          teamNotEquals,
          teamSpecified,
          teamIn,
          teamNotIn,
          distinct,
          page,
          size,
          sort,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInventory(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inventory>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInventory(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Inventory} inventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateInventory(
      id: number,
      inventory: Inventory,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Inventory>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdateInventory(
          id,
          inventory,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * InventoryResourceApi - factory interface
 * @export
 */
export const InventoryResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = InventoryResourceApiFp(configuration);
  return {
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [customerIDGreaterThan]
     * @param {number} [customerIDLessThan]
     * @param {number} [customerIDGreaterThanOrEqual]
     * @param {number} [customerIDLessThanOrEqual]
     * @param {number} [customerIDEquals]
     * @param {number} [customerIDNotEquals]
     * @param {boolean} [customerIDSpecified]
     * @param {Array<number>} [customerIDIn]
     * @param {Array<number>} [customerIDNotIn]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [sumNoFeesGreaterThan]
     * @param {number} [sumNoFeesLessThan]
     * @param {number} [sumNoFeesGreaterThanOrEqual]
     * @param {number} [sumNoFeesLessThanOrEqual]
     * @param {number} [sumNoFeesEquals]
     * @param {number} [sumNoFeesNotEquals]
     * @param {boolean} [sumNoFeesSpecified]
     * @param {Array<number>} [sumNoFeesIn]
     * @param {Array<number>} [sumNoFeesNotIn]
     * @param {number} [boughtKgGreaterThan]
     * @param {number} [boughtKgLessThan]
     * @param {number} [boughtKgGreaterThanOrEqual]
     * @param {number} [boughtKgLessThanOrEqual]
     * @param {number} [boughtKgEquals]
     * @param {number} [boughtKgNotEquals]
     * @param {boolean} [boughtKgSpecified]
     * @param {Array<number>} [boughtKgIn]
     * @param {Array<number>} [boughtKgNotIn]
     * @param {number} [soldKgGreaterThan]
     * @param {number} [soldKgLessThan]
     * @param {number} [soldKgGreaterThanOrEqual]
     * @param {number} [soldKgLessThanOrEqual]
     * @param {number} [soldKgEquals]
     * @param {number} [soldKgNotEquals]
     * @param {boolean} [soldKgSpecified]
     * @param {Array<number>} [soldKgIn]
     * @param {Array<number>} [soldKgNotIn]
     * @param {string} [grainContains]
     * @param {string} [grainDoesNotContain]
     * @param {string} [grainEquals]
     * @param {string} [grainNotEquals]
     * @param {boolean} [grainSpecified]
     * @param {Array<string>} [grainIn]
     * @param {Array<string>} [grainNotIn]
     * @param {number} [boughtBagSumGreaterThan]
     * @param {number} [boughtBagSumLessThan]
     * @param {number} [boughtBagSumGreaterThanOrEqual]
     * @param {number} [boughtBagSumLessThanOrEqual]
     * @param {number} [boughtBagSumEquals]
     * @param {number} [boughtBagSumNotEquals]
     * @param {boolean} [boughtBagSumSpecified]
     * @param {Array<number>} [boughtBagSumIn]
     * @param {Array<number>} [boughtBagSumNotIn]
     * @param {number} [soldBagSumGreaterThan]
     * @param {number} [soldBagSumLessThan]
     * @param {number} [soldBagSumGreaterThanOrEqual]
     * @param {number} [soldBagSumLessThanOrEqual]
     * @param {number} [soldBagSumEquals]
     * @param {number} [soldBagSumNotEquals]
     * @param {boolean} [soldBagSumSpecified]
     * @param {Array<number>} [soldBagSumIn]
     * @param {Array<number>} [soldBagSumNotIn]
     * @param {string} [teamContains]
     * @param {string} [teamDoesNotContain]
     * @param {string} [teamEquals]
     * @param {string} [teamNotEquals]
     * @param {boolean} [teamSpecified]
     * @param {Array<string>} [teamIn]
     * @param {Array<string>} [teamNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countInventories(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      customerIDGreaterThan?: number,
      customerIDLessThan?: number,
      customerIDGreaterThanOrEqual?: number,
      customerIDLessThanOrEqual?: number,
      customerIDEquals?: number,
      customerIDNotEquals?: number,
      customerIDSpecified?: boolean,
      customerIDIn?: Array<number>,
      customerIDNotIn?: Array<number>,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      sumNoFeesGreaterThan?: number,
      sumNoFeesLessThan?: number,
      sumNoFeesGreaterThanOrEqual?: number,
      sumNoFeesLessThanOrEqual?: number,
      sumNoFeesEquals?: number,
      sumNoFeesNotEquals?: number,
      sumNoFeesSpecified?: boolean,
      sumNoFeesIn?: Array<number>,
      sumNoFeesNotIn?: Array<number>,
      boughtKgGreaterThan?: number,
      boughtKgLessThan?: number,
      boughtKgGreaterThanOrEqual?: number,
      boughtKgLessThanOrEqual?: number,
      boughtKgEquals?: number,
      boughtKgNotEquals?: number,
      boughtKgSpecified?: boolean,
      boughtKgIn?: Array<number>,
      boughtKgNotIn?: Array<number>,
      soldKgGreaterThan?: number,
      soldKgLessThan?: number,
      soldKgGreaterThanOrEqual?: number,
      soldKgLessThanOrEqual?: number,
      soldKgEquals?: number,
      soldKgNotEquals?: number,
      soldKgSpecified?: boolean,
      soldKgIn?: Array<number>,
      soldKgNotIn?: Array<number>,
      grainContains?: string,
      grainDoesNotContain?: string,
      grainEquals?: string,
      grainNotEquals?: string,
      grainSpecified?: boolean,
      grainIn?: Array<string>,
      grainNotIn?: Array<string>,
      boughtBagSumGreaterThan?: number,
      boughtBagSumLessThan?: number,
      boughtBagSumGreaterThanOrEqual?: number,
      boughtBagSumLessThanOrEqual?: number,
      boughtBagSumEquals?: number,
      boughtBagSumNotEquals?: number,
      boughtBagSumSpecified?: boolean,
      boughtBagSumIn?: Array<number>,
      boughtBagSumNotIn?: Array<number>,
      soldBagSumGreaterThan?: number,
      soldBagSumLessThan?: number,
      soldBagSumGreaterThanOrEqual?: number,
      soldBagSumLessThanOrEqual?: number,
      soldBagSumEquals?: number,
      soldBagSumNotEquals?: number,
      soldBagSumSpecified?: boolean,
      soldBagSumIn?: Array<number>,
      soldBagSumNotIn?: Array<number>,
      teamContains?: string,
      teamDoesNotContain?: string,
      teamEquals?: string,
      teamNotEquals?: string,
      teamSpecified?: boolean,
      teamIn?: Array<string>,
      teamNotIn?: Array<string>,
      distinct?: boolean,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .countInventories(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          customerIDGreaterThan,
          customerIDLessThan,
          customerIDGreaterThanOrEqual,
          customerIDLessThanOrEqual,
          customerIDEquals,
          customerIDNotEquals,
          customerIDSpecified,
          customerIDIn,
          customerIDNotIn,
          nameContains,
          nameDoesNotContain,
          nameEquals,
          nameNotEquals,
          nameSpecified,
          nameIn,
          nameNotIn,
          ownMoneyGreaterThan,
          ownMoneyLessThan,
          ownMoneyGreaterThanOrEqual,
          ownMoneyLessThanOrEqual,
          ownMoneyEquals,
          ownMoneyNotEquals,
          ownMoneySpecified,
          ownMoneyIn,
          ownMoneyNotIn,
          loanAmountGreaterThan,
          loanAmountLessThan,
          loanAmountGreaterThanOrEqual,
          loanAmountLessThanOrEqual,
          loanAmountEquals,
          loanAmountNotEquals,
          loanAmountSpecified,
          loanAmountIn,
          loanAmountNotIn,
          sumNoFeesGreaterThan,
          sumNoFeesLessThan,
          sumNoFeesGreaterThanOrEqual,
          sumNoFeesLessThanOrEqual,
          sumNoFeesEquals,
          sumNoFeesNotEquals,
          sumNoFeesSpecified,
          sumNoFeesIn,
          sumNoFeesNotIn,
          boughtKgGreaterThan,
          boughtKgLessThan,
          boughtKgGreaterThanOrEqual,
          boughtKgLessThanOrEqual,
          boughtKgEquals,
          boughtKgNotEquals,
          boughtKgSpecified,
          boughtKgIn,
          boughtKgNotIn,
          soldKgGreaterThan,
          soldKgLessThan,
          soldKgGreaterThanOrEqual,
          soldKgLessThanOrEqual,
          soldKgEquals,
          soldKgNotEquals,
          soldKgSpecified,
          soldKgIn,
          soldKgNotIn,
          grainContains,
          grainDoesNotContain,
          grainEquals,
          grainNotEquals,
          grainSpecified,
          grainIn,
          grainNotIn,
          boughtBagSumGreaterThan,
          boughtBagSumLessThan,
          boughtBagSumGreaterThanOrEqual,
          boughtBagSumLessThanOrEqual,
          boughtBagSumEquals,
          boughtBagSumNotEquals,
          boughtBagSumSpecified,
          boughtBagSumIn,
          boughtBagSumNotIn,
          soldBagSumGreaterThan,
          soldBagSumLessThan,
          soldBagSumGreaterThanOrEqual,
          soldBagSumLessThanOrEqual,
          soldBagSumEquals,
          soldBagSumNotEquals,
          soldBagSumSpecified,
          soldBagSumIn,
          soldBagSumNotIn,
          teamContains,
          teamDoesNotContain,
          teamEquals,
          teamNotEquals,
          teamSpecified,
          teamIn,
          teamNotIn,
          distinct,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [customerIDGreaterThan]
     * @param {number} [customerIDLessThan]
     * @param {number} [customerIDGreaterThanOrEqual]
     * @param {number} [customerIDLessThanOrEqual]
     * @param {number} [customerIDEquals]
     * @param {number} [customerIDNotEquals]
     * @param {boolean} [customerIDSpecified]
     * @param {Array<number>} [customerIDIn]
     * @param {Array<number>} [customerIDNotIn]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [sumNoFeesGreaterThan]
     * @param {number} [sumNoFeesLessThan]
     * @param {number} [sumNoFeesGreaterThanOrEqual]
     * @param {number} [sumNoFeesLessThanOrEqual]
     * @param {number} [sumNoFeesEquals]
     * @param {number} [sumNoFeesNotEquals]
     * @param {boolean} [sumNoFeesSpecified]
     * @param {Array<number>} [sumNoFeesIn]
     * @param {Array<number>} [sumNoFeesNotIn]
     * @param {number} [boughtKgGreaterThan]
     * @param {number} [boughtKgLessThan]
     * @param {number} [boughtKgGreaterThanOrEqual]
     * @param {number} [boughtKgLessThanOrEqual]
     * @param {number} [boughtKgEquals]
     * @param {number} [boughtKgNotEquals]
     * @param {boolean} [boughtKgSpecified]
     * @param {Array<number>} [boughtKgIn]
     * @param {Array<number>} [boughtKgNotIn]
     * @param {number} [soldKgGreaterThan]
     * @param {number} [soldKgLessThan]
     * @param {number} [soldKgGreaterThanOrEqual]
     * @param {number} [soldKgLessThanOrEqual]
     * @param {number} [soldKgEquals]
     * @param {number} [soldKgNotEquals]
     * @param {boolean} [soldKgSpecified]
     * @param {Array<number>} [soldKgIn]
     * @param {Array<number>} [soldKgNotIn]
     * @param {string} [grainContains]
     * @param {string} [grainDoesNotContain]
     * @param {string} [grainEquals]
     * @param {string} [grainNotEquals]
     * @param {boolean} [grainSpecified]
     * @param {Array<string>} [grainIn]
     * @param {Array<string>} [grainNotIn]
     * @param {number} [boughtBagSumGreaterThan]
     * @param {number} [boughtBagSumLessThan]
     * @param {number} [boughtBagSumGreaterThanOrEqual]
     * @param {number} [boughtBagSumLessThanOrEqual]
     * @param {number} [boughtBagSumEquals]
     * @param {number} [boughtBagSumNotEquals]
     * @param {boolean} [boughtBagSumSpecified]
     * @param {Array<number>} [boughtBagSumIn]
     * @param {Array<number>} [boughtBagSumNotIn]
     * @param {number} [soldBagSumGreaterThan]
     * @param {number} [soldBagSumLessThan]
     * @param {number} [soldBagSumGreaterThanOrEqual]
     * @param {number} [soldBagSumLessThanOrEqual]
     * @param {number} [soldBagSumEquals]
     * @param {number} [soldBagSumNotEquals]
     * @param {boolean} [soldBagSumSpecified]
     * @param {Array<number>} [soldBagSumIn]
     * @param {Array<number>} [soldBagSumNotIn]
     * @param {string} [teamContains]
     * @param {string} [teamDoesNotContain]
     * @param {string} [teamEquals]
     * @param {string} [teamNotEquals]
     * @param {boolean} [teamSpecified]
     * @param {Array<string>} [teamIn]
     * @param {Array<string>} [teamNotIn]
     * @param {boolean} [distinct]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllInventories(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      customerIDGreaterThan?: number,
      customerIDLessThan?: number,
      customerIDGreaterThanOrEqual?: number,
      customerIDLessThanOrEqual?: number,
      customerIDEquals?: number,
      customerIDNotEquals?: number,
      customerIDSpecified?: boolean,
      customerIDIn?: Array<number>,
      customerIDNotIn?: Array<number>,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      sumNoFeesGreaterThan?: number,
      sumNoFeesLessThan?: number,
      sumNoFeesGreaterThanOrEqual?: number,
      sumNoFeesLessThanOrEqual?: number,
      sumNoFeesEquals?: number,
      sumNoFeesNotEquals?: number,
      sumNoFeesSpecified?: boolean,
      sumNoFeesIn?: Array<number>,
      sumNoFeesNotIn?: Array<number>,
      boughtKgGreaterThan?: number,
      boughtKgLessThan?: number,
      boughtKgGreaterThanOrEqual?: number,
      boughtKgLessThanOrEqual?: number,
      boughtKgEquals?: number,
      boughtKgNotEquals?: number,
      boughtKgSpecified?: boolean,
      boughtKgIn?: Array<number>,
      boughtKgNotIn?: Array<number>,
      soldKgGreaterThan?: number,
      soldKgLessThan?: number,
      soldKgGreaterThanOrEqual?: number,
      soldKgLessThanOrEqual?: number,
      soldKgEquals?: number,
      soldKgNotEquals?: number,
      soldKgSpecified?: boolean,
      soldKgIn?: Array<number>,
      soldKgNotIn?: Array<number>,
      grainContains?: string,
      grainDoesNotContain?: string,
      grainEquals?: string,
      grainNotEquals?: string,
      grainSpecified?: boolean,
      grainIn?: Array<string>,
      grainNotIn?: Array<string>,
      boughtBagSumGreaterThan?: number,
      boughtBagSumLessThan?: number,
      boughtBagSumGreaterThanOrEqual?: number,
      boughtBagSumLessThanOrEqual?: number,
      boughtBagSumEquals?: number,
      boughtBagSumNotEquals?: number,
      boughtBagSumSpecified?: boolean,
      boughtBagSumIn?: Array<number>,
      boughtBagSumNotIn?: Array<number>,
      soldBagSumGreaterThan?: number,
      soldBagSumLessThan?: number,
      soldBagSumGreaterThanOrEqual?: number,
      soldBagSumLessThanOrEqual?: number,
      soldBagSumEquals?: number,
      soldBagSumNotEquals?: number,
      soldBagSumSpecified?: boolean,
      soldBagSumIn?: Array<number>,
      soldBagSumNotIn?: Array<number>,
      teamContains?: string,
      teamDoesNotContain?: string,
      teamEquals?: string,
      teamNotEquals?: string,
      teamSpecified?: boolean,
      teamIn?: Array<string>,
      teamNotIn?: Array<string>,
      distinct?: boolean,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<Array<Inventory>> {
      return localVarFp
        .getAllInventories(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          customerIDGreaterThan,
          customerIDLessThan,
          customerIDGreaterThanOrEqual,
          customerIDLessThanOrEqual,
          customerIDEquals,
          customerIDNotEquals,
          customerIDSpecified,
          customerIDIn,
          customerIDNotIn,
          nameContains,
          nameDoesNotContain,
          nameEquals,
          nameNotEquals,
          nameSpecified,
          nameIn,
          nameNotIn,
          ownMoneyGreaterThan,
          ownMoneyLessThan,
          ownMoneyGreaterThanOrEqual,
          ownMoneyLessThanOrEqual,
          ownMoneyEquals,
          ownMoneyNotEquals,
          ownMoneySpecified,
          ownMoneyIn,
          ownMoneyNotIn,
          loanAmountGreaterThan,
          loanAmountLessThan,
          loanAmountGreaterThanOrEqual,
          loanAmountLessThanOrEqual,
          loanAmountEquals,
          loanAmountNotEquals,
          loanAmountSpecified,
          loanAmountIn,
          loanAmountNotIn,
          sumNoFeesGreaterThan,
          sumNoFeesLessThan,
          sumNoFeesGreaterThanOrEqual,
          sumNoFeesLessThanOrEqual,
          sumNoFeesEquals,
          sumNoFeesNotEquals,
          sumNoFeesSpecified,
          sumNoFeesIn,
          sumNoFeesNotIn,
          boughtKgGreaterThan,
          boughtKgLessThan,
          boughtKgGreaterThanOrEqual,
          boughtKgLessThanOrEqual,
          boughtKgEquals,
          boughtKgNotEquals,
          boughtKgSpecified,
          boughtKgIn,
          boughtKgNotIn,
          soldKgGreaterThan,
          soldKgLessThan,
          soldKgGreaterThanOrEqual,
          soldKgLessThanOrEqual,
          soldKgEquals,
          soldKgNotEquals,
          soldKgSpecified,
          soldKgIn,
          soldKgNotIn,
          grainContains,
          grainDoesNotContain,
          grainEquals,
          grainNotEquals,
          grainSpecified,
          grainIn,
          grainNotIn,
          boughtBagSumGreaterThan,
          boughtBagSumLessThan,
          boughtBagSumGreaterThanOrEqual,
          boughtBagSumLessThanOrEqual,
          boughtBagSumEquals,
          boughtBagSumNotEquals,
          boughtBagSumSpecified,
          boughtBagSumIn,
          boughtBagSumNotIn,
          soldBagSumGreaterThan,
          soldBagSumLessThan,
          soldBagSumGreaterThanOrEqual,
          soldBagSumLessThanOrEqual,
          soldBagSumEquals,
          soldBagSumNotEquals,
          soldBagSumSpecified,
          soldBagSumIn,
          soldBagSumNotIn,
          teamContains,
          teamDoesNotContain,
          teamEquals,
          teamNotEquals,
          teamSpecified,
          teamIn,
          teamNotIn,
          distinct,
          page,
          size,
          sort,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventory(id: number, options?: any): AxiosPromise<Inventory> {
      return localVarFp
        .getInventory(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Inventory} inventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateInventory(
      id: number,
      inventory: Inventory,
      options?: any
    ): AxiosPromise<Inventory> {
      return localVarFp
        .partialUpdateInventory(id, inventory, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * InventoryResourceApi - object-oriented interface
 * @export
 * @class InventoryResourceApi
 * @extends {BaseAPI}
 */
export class InventoryResourceApi extends BaseAPI {
  /**
   *
   * @param {number} [idGreaterThan]
   * @param {number} [idLessThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idEquals]
   * @param {number} [idNotEquals]
   * @param {boolean} [idSpecified]
   * @param {Array<number>} [idIn]
   * @param {Array<number>} [idNotIn]
   * @param {number} [customerIDGreaterThan]
   * @param {number} [customerIDLessThan]
   * @param {number} [customerIDGreaterThanOrEqual]
   * @param {number} [customerIDLessThanOrEqual]
   * @param {number} [customerIDEquals]
   * @param {number} [customerIDNotEquals]
   * @param {boolean} [customerIDSpecified]
   * @param {Array<number>} [customerIDIn]
   * @param {Array<number>} [customerIDNotIn]
   * @param {string} [nameContains]
   * @param {string} [nameDoesNotContain]
   * @param {string} [nameEquals]
   * @param {string} [nameNotEquals]
   * @param {boolean} [nameSpecified]
   * @param {Array<string>} [nameIn]
   * @param {Array<string>} [nameNotIn]
   * @param {number} [ownMoneyGreaterThan]
   * @param {number} [ownMoneyLessThan]
   * @param {number} [ownMoneyGreaterThanOrEqual]
   * @param {number} [ownMoneyLessThanOrEqual]
   * @param {number} [ownMoneyEquals]
   * @param {number} [ownMoneyNotEquals]
   * @param {boolean} [ownMoneySpecified]
   * @param {Array<number>} [ownMoneyIn]
   * @param {Array<number>} [ownMoneyNotIn]
   * @param {number} [loanAmountGreaterThan]
   * @param {number} [loanAmountLessThan]
   * @param {number} [loanAmountGreaterThanOrEqual]
   * @param {number} [loanAmountLessThanOrEqual]
   * @param {number} [loanAmountEquals]
   * @param {number} [loanAmountNotEquals]
   * @param {boolean} [loanAmountSpecified]
   * @param {Array<number>} [loanAmountIn]
   * @param {Array<number>} [loanAmountNotIn]
   * @param {number} [sumNoFeesGreaterThan]
   * @param {number} [sumNoFeesLessThan]
   * @param {number} [sumNoFeesGreaterThanOrEqual]
   * @param {number} [sumNoFeesLessThanOrEqual]
   * @param {number} [sumNoFeesEquals]
   * @param {number} [sumNoFeesNotEquals]
   * @param {boolean} [sumNoFeesSpecified]
   * @param {Array<number>} [sumNoFeesIn]
   * @param {Array<number>} [sumNoFeesNotIn]
   * @param {number} [boughtKgGreaterThan]
   * @param {number} [boughtKgLessThan]
   * @param {number} [boughtKgGreaterThanOrEqual]
   * @param {number} [boughtKgLessThanOrEqual]
   * @param {number} [boughtKgEquals]
   * @param {number} [boughtKgNotEquals]
   * @param {boolean} [boughtKgSpecified]
   * @param {Array<number>} [boughtKgIn]
   * @param {Array<number>} [boughtKgNotIn]
   * @param {number} [soldKgGreaterThan]
   * @param {number} [soldKgLessThan]
   * @param {number} [soldKgGreaterThanOrEqual]
   * @param {number} [soldKgLessThanOrEqual]
   * @param {number} [soldKgEquals]
   * @param {number} [soldKgNotEquals]
   * @param {boolean} [soldKgSpecified]
   * @param {Array<number>} [soldKgIn]
   * @param {Array<number>} [soldKgNotIn]
   * @param {string} [grainContains]
   * @param {string} [grainDoesNotContain]
   * @param {string} [grainEquals]
   * @param {string} [grainNotEquals]
   * @param {boolean} [grainSpecified]
   * @param {Array<string>} [grainIn]
   * @param {Array<string>} [grainNotIn]
   * @param {number} [boughtBagSumGreaterThan]
   * @param {number} [boughtBagSumLessThan]
   * @param {number} [boughtBagSumGreaterThanOrEqual]
   * @param {number} [boughtBagSumLessThanOrEqual]
   * @param {number} [boughtBagSumEquals]
   * @param {number} [boughtBagSumNotEquals]
   * @param {boolean} [boughtBagSumSpecified]
   * @param {Array<number>} [boughtBagSumIn]
   * @param {Array<number>} [boughtBagSumNotIn]
   * @param {number} [soldBagSumGreaterThan]
   * @param {number} [soldBagSumLessThan]
   * @param {number} [soldBagSumGreaterThanOrEqual]
   * @param {number} [soldBagSumLessThanOrEqual]
   * @param {number} [soldBagSumEquals]
   * @param {number} [soldBagSumNotEquals]
   * @param {boolean} [soldBagSumSpecified]
   * @param {Array<number>} [soldBagSumIn]
   * @param {Array<number>} [soldBagSumNotIn]
   * @param {string} [teamContains]
   * @param {string} [teamDoesNotContain]
   * @param {string} [teamEquals]
   * @param {string} [teamNotEquals]
   * @param {boolean} [teamSpecified]
   * @param {Array<string>} [teamIn]
   * @param {Array<string>} [teamNotIn]
   * @param {boolean} [distinct]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InventoryResourceApi
   */
  public countInventories(
    idGreaterThan?: number,
    idLessThan?: number,
    idGreaterThanOrEqual?: number,
    idLessThanOrEqual?: number,
    idEquals?: number,
    idNotEquals?: number,
    idSpecified?: boolean,
    idIn?: Array<number>,
    idNotIn?: Array<number>,
    customerIDGreaterThan?: number,
    customerIDLessThan?: number,
    customerIDGreaterThanOrEqual?: number,
    customerIDLessThanOrEqual?: number,
    customerIDEquals?: number,
    customerIDNotEquals?: number,
    customerIDSpecified?: boolean,
    customerIDIn?: Array<number>,
    customerIDNotIn?: Array<number>,
    nameContains?: string,
    nameDoesNotContain?: string,
    nameEquals?: string,
    nameNotEquals?: string,
    nameSpecified?: boolean,
    nameIn?: Array<string>,
    nameNotIn?: Array<string>,
    ownMoneyGreaterThan?: number,
    ownMoneyLessThan?: number,
    ownMoneyGreaterThanOrEqual?: number,
    ownMoneyLessThanOrEqual?: number,
    ownMoneyEquals?: number,
    ownMoneyNotEquals?: number,
    ownMoneySpecified?: boolean,
    ownMoneyIn?: Array<number>,
    ownMoneyNotIn?: Array<number>,
    loanAmountGreaterThan?: number,
    loanAmountLessThan?: number,
    loanAmountGreaterThanOrEqual?: number,
    loanAmountLessThanOrEqual?: number,
    loanAmountEquals?: number,
    loanAmountNotEquals?: number,
    loanAmountSpecified?: boolean,
    loanAmountIn?: Array<number>,
    loanAmountNotIn?: Array<number>,
    sumNoFeesGreaterThan?: number,
    sumNoFeesLessThan?: number,
    sumNoFeesGreaterThanOrEqual?: number,
    sumNoFeesLessThanOrEqual?: number,
    sumNoFeesEquals?: number,
    sumNoFeesNotEquals?: number,
    sumNoFeesSpecified?: boolean,
    sumNoFeesIn?: Array<number>,
    sumNoFeesNotIn?: Array<number>,
    boughtKgGreaterThan?: number,
    boughtKgLessThan?: number,
    boughtKgGreaterThanOrEqual?: number,
    boughtKgLessThanOrEqual?: number,
    boughtKgEquals?: number,
    boughtKgNotEquals?: number,
    boughtKgSpecified?: boolean,
    boughtKgIn?: Array<number>,
    boughtKgNotIn?: Array<number>,
    soldKgGreaterThan?: number,
    soldKgLessThan?: number,
    soldKgGreaterThanOrEqual?: number,
    soldKgLessThanOrEqual?: number,
    soldKgEquals?: number,
    soldKgNotEquals?: number,
    soldKgSpecified?: boolean,
    soldKgIn?: Array<number>,
    soldKgNotIn?: Array<number>,
    grainContains?: string,
    grainDoesNotContain?: string,
    grainEquals?: string,
    grainNotEquals?: string,
    grainSpecified?: boolean,
    grainIn?: Array<string>,
    grainNotIn?: Array<string>,
    boughtBagSumGreaterThan?: number,
    boughtBagSumLessThan?: number,
    boughtBagSumGreaterThanOrEqual?: number,
    boughtBagSumLessThanOrEqual?: number,
    boughtBagSumEquals?: number,
    boughtBagSumNotEquals?: number,
    boughtBagSumSpecified?: boolean,
    boughtBagSumIn?: Array<number>,
    boughtBagSumNotIn?: Array<number>,
    soldBagSumGreaterThan?: number,
    soldBagSumLessThan?: number,
    soldBagSumGreaterThanOrEqual?: number,
    soldBagSumLessThanOrEqual?: number,
    soldBagSumEquals?: number,
    soldBagSumNotEquals?: number,
    soldBagSumSpecified?: boolean,
    soldBagSumIn?: Array<number>,
    soldBagSumNotIn?: Array<number>,
    teamContains?: string,
    teamDoesNotContain?: string,
    teamEquals?: string,
    teamNotEquals?: string,
    teamSpecified?: boolean,
    teamIn?: Array<string>,
    teamNotIn?: Array<string>,
    distinct?: boolean,
    options?: AxiosRequestConfig
  ) {
    return InventoryResourceApiFp(this.configuration)
      .countInventories(
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        customerIDGreaterThan,
        customerIDLessThan,
        customerIDGreaterThanOrEqual,
        customerIDLessThanOrEqual,
        customerIDEquals,
        customerIDNotEquals,
        customerIDSpecified,
        customerIDIn,
        customerIDNotIn,
        nameContains,
        nameDoesNotContain,
        nameEquals,
        nameNotEquals,
        nameSpecified,
        nameIn,
        nameNotIn,
        ownMoneyGreaterThan,
        ownMoneyLessThan,
        ownMoneyGreaterThanOrEqual,
        ownMoneyLessThanOrEqual,
        ownMoneyEquals,
        ownMoneyNotEquals,
        ownMoneySpecified,
        ownMoneyIn,
        ownMoneyNotIn,
        loanAmountGreaterThan,
        loanAmountLessThan,
        loanAmountGreaterThanOrEqual,
        loanAmountLessThanOrEqual,
        loanAmountEquals,
        loanAmountNotEquals,
        loanAmountSpecified,
        loanAmountIn,
        loanAmountNotIn,
        sumNoFeesGreaterThan,
        sumNoFeesLessThan,
        sumNoFeesGreaterThanOrEqual,
        sumNoFeesLessThanOrEqual,
        sumNoFeesEquals,
        sumNoFeesNotEquals,
        sumNoFeesSpecified,
        sumNoFeesIn,
        sumNoFeesNotIn,
        boughtKgGreaterThan,
        boughtKgLessThan,
        boughtKgGreaterThanOrEqual,
        boughtKgLessThanOrEqual,
        boughtKgEquals,
        boughtKgNotEquals,
        boughtKgSpecified,
        boughtKgIn,
        boughtKgNotIn,
        soldKgGreaterThan,
        soldKgLessThan,
        soldKgGreaterThanOrEqual,
        soldKgLessThanOrEqual,
        soldKgEquals,
        soldKgNotEquals,
        soldKgSpecified,
        soldKgIn,
        soldKgNotIn,
        grainContains,
        grainDoesNotContain,
        grainEquals,
        grainNotEquals,
        grainSpecified,
        grainIn,
        grainNotIn,
        boughtBagSumGreaterThan,
        boughtBagSumLessThan,
        boughtBagSumGreaterThanOrEqual,
        boughtBagSumLessThanOrEqual,
        boughtBagSumEquals,
        boughtBagSumNotEquals,
        boughtBagSumSpecified,
        boughtBagSumIn,
        boughtBagSumNotIn,
        soldBagSumGreaterThan,
        soldBagSumLessThan,
        soldBagSumGreaterThanOrEqual,
        soldBagSumLessThanOrEqual,
        soldBagSumEquals,
        soldBagSumNotEquals,
        soldBagSumSpecified,
        soldBagSumIn,
        soldBagSumNotIn,
        teamContains,
        teamDoesNotContain,
        teamEquals,
        teamNotEquals,
        teamSpecified,
        teamIn,
        teamNotIn,
        distinct,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [idGreaterThan]
   * @param {number} [idLessThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idEquals]
   * @param {number} [idNotEquals]
   * @param {boolean} [idSpecified]
   * @param {Array<number>} [idIn]
   * @param {Array<number>} [idNotIn]
   * @param {number} [customerIDGreaterThan]
   * @param {number} [customerIDLessThan]
   * @param {number} [customerIDGreaterThanOrEqual]
   * @param {number} [customerIDLessThanOrEqual]
   * @param {number} [customerIDEquals]
   * @param {number} [customerIDNotEquals]
   * @param {boolean} [customerIDSpecified]
   * @param {Array<number>} [customerIDIn]
   * @param {Array<number>} [customerIDNotIn]
   * @param {string} [nameContains]
   * @param {string} [nameDoesNotContain]
   * @param {string} [nameEquals]
   * @param {string} [nameNotEquals]
   * @param {boolean} [nameSpecified]
   * @param {Array<string>} [nameIn]
   * @param {Array<string>} [nameNotIn]
   * @param {number} [ownMoneyGreaterThan]
   * @param {number} [ownMoneyLessThan]
   * @param {number} [ownMoneyGreaterThanOrEqual]
   * @param {number} [ownMoneyLessThanOrEqual]
   * @param {number} [ownMoneyEquals]
   * @param {number} [ownMoneyNotEquals]
   * @param {boolean} [ownMoneySpecified]
   * @param {Array<number>} [ownMoneyIn]
   * @param {Array<number>} [ownMoneyNotIn]
   * @param {number} [loanAmountGreaterThan]
   * @param {number} [loanAmountLessThan]
   * @param {number} [loanAmountGreaterThanOrEqual]
   * @param {number} [loanAmountLessThanOrEqual]
   * @param {number} [loanAmountEquals]
   * @param {number} [loanAmountNotEquals]
   * @param {boolean} [loanAmountSpecified]
   * @param {Array<number>} [loanAmountIn]
   * @param {Array<number>} [loanAmountNotIn]
   * @param {number} [sumNoFeesGreaterThan]
   * @param {number} [sumNoFeesLessThan]
   * @param {number} [sumNoFeesGreaterThanOrEqual]
   * @param {number} [sumNoFeesLessThanOrEqual]
   * @param {number} [sumNoFeesEquals]
   * @param {number} [sumNoFeesNotEquals]
   * @param {boolean} [sumNoFeesSpecified]
   * @param {Array<number>} [sumNoFeesIn]
   * @param {Array<number>} [sumNoFeesNotIn]
   * @param {number} [boughtKgGreaterThan]
   * @param {number} [boughtKgLessThan]
   * @param {number} [boughtKgGreaterThanOrEqual]
   * @param {number} [boughtKgLessThanOrEqual]
   * @param {number} [boughtKgEquals]
   * @param {number} [boughtKgNotEquals]
   * @param {boolean} [boughtKgSpecified]
   * @param {Array<number>} [boughtKgIn]
   * @param {Array<number>} [boughtKgNotIn]
   * @param {number} [soldKgGreaterThan]
   * @param {number} [soldKgLessThan]
   * @param {number} [soldKgGreaterThanOrEqual]
   * @param {number} [soldKgLessThanOrEqual]
   * @param {number} [soldKgEquals]
   * @param {number} [soldKgNotEquals]
   * @param {boolean} [soldKgSpecified]
   * @param {Array<number>} [soldKgIn]
   * @param {Array<number>} [soldKgNotIn]
   * @param {string} [grainContains]
   * @param {string} [grainDoesNotContain]
   * @param {string} [grainEquals]
   * @param {string} [grainNotEquals]
   * @param {boolean} [grainSpecified]
   * @param {Array<string>} [grainIn]
   * @param {Array<string>} [grainNotIn]
   * @param {number} [boughtBagSumGreaterThan]
   * @param {number} [boughtBagSumLessThan]
   * @param {number} [boughtBagSumGreaterThanOrEqual]
   * @param {number} [boughtBagSumLessThanOrEqual]
   * @param {number} [boughtBagSumEquals]
   * @param {number} [boughtBagSumNotEquals]
   * @param {boolean} [boughtBagSumSpecified]
   * @param {Array<number>} [boughtBagSumIn]
   * @param {Array<number>} [boughtBagSumNotIn]
   * @param {number} [soldBagSumGreaterThan]
   * @param {number} [soldBagSumLessThan]
   * @param {number} [soldBagSumGreaterThanOrEqual]
   * @param {number} [soldBagSumLessThanOrEqual]
   * @param {number} [soldBagSumEquals]
   * @param {number} [soldBagSumNotEquals]
   * @param {boolean} [soldBagSumSpecified]
   * @param {Array<number>} [soldBagSumIn]
   * @param {Array<number>} [soldBagSumNotIn]
   * @param {string} [teamContains]
   * @param {string} [teamDoesNotContain]
   * @param {string} [teamEquals]
   * @param {string} [teamNotEquals]
   * @param {boolean} [teamSpecified]
   * @param {Array<string>} [teamIn]
   * @param {Array<string>} [teamNotIn]
   * @param {boolean} [distinct]
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InventoryResourceApi
   */
  public getAllInventories(
    idGreaterThan?: number,
    idLessThan?: number,
    idGreaterThanOrEqual?: number,
    idLessThanOrEqual?: number,
    idEquals?: number,
    idNotEquals?: number,
    idSpecified?: boolean,
    idIn?: Array<number>,
    idNotIn?: Array<number>,
    customerIDGreaterThan?: number,
    customerIDLessThan?: number,
    customerIDGreaterThanOrEqual?: number,
    customerIDLessThanOrEqual?: number,
    customerIDEquals?: number,
    customerIDNotEquals?: number,
    customerIDSpecified?: boolean,
    customerIDIn?: Array<number>,
    customerIDNotIn?: Array<number>,
    nameContains?: string,
    nameDoesNotContain?: string,
    nameEquals?: string,
    nameNotEquals?: string,
    nameSpecified?: boolean,
    nameIn?: Array<string>,
    nameNotIn?: Array<string>,
    ownMoneyGreaterThan?: number,
    ownMoneyLessThan?: number,
    ownMoneyGreaterThanOrEqual?: number,
    ownMoneyLessThanOrEqual?: number,
    ownMoneyEquals?: number,
    ownMoneyNotEquals?: number,
    ownMoneySpecified?: boolean,
    ownMoneyIn?: Array<number>,
    ownMoneyNotIn?: Array<number>,
    loanAmountGreaterThan?: number,
    loanAmountLessThan?: number,
    loanAmountGreaterThanOrEqual?: number,
    loanAmountLessThanOrEqual?: number,
    loanAmountEquals?: number,
    loanAmountNotEquals?: number,
    loanAmountSpecified?: boolean,
    loanAmountIn?: Array<number>,
    loanAmountNotIn?: Array<number>,
    sumNoFeesGreaterThan?: number,
    sumNoFeesLessThan?: number,
    sumNoFeesGreaterThanOrEqual?: number,
    sumNoFeesLessThanOrEqual?: number,
    sumNoFeesEquals?: number,
    sumNoFeesNotEquals?: number,
    sumNoFeesSpecified?: boolean,
    sumNoFeesIn?: Array<number>,
    sumNoFeesNotIn?: Array<number>,
    boughtKgGreaterThan?: number,
    boughtKgLessThan?: number,
    boughtKgGreaterThanOrEqual?: number,
    boughtKgLessThanOrEqual?: number,
    boughtKgEquals?: number,
    boughtKgNotEquals?: number,
    boughtKgSpecified?: boolean,
    boughtKgIn?: Array<number>,
    boughtKgNotIn?: Array<number>,
    soldKgGreaterThan?: number,
    soldKgLessThan?: number,
    soldKgGreaterThanOrEqual?: number,
    soldKgLessThanOrEqual?: number,
    soldKgEquals?: number,
    soldKgNotEquals?: number,
    soldKgSpecified?: boolean,
    soldKgIn?: Array<number>,
    soldKgNotIn?: Array<number>,
    grainContains?: string,
    grainDoesNotContain?: string,
    grainEquals?: string,
    grainNotEquals?: string,
    grainSpecified?: boolean,
    grainIn?: Array<string>,
    grainNotIn?: Array<string>,
    boughtBagSumGreaterThan?: number,
    boughtBagSumLessThan?: number,
    boughtBagSumGreaterThanOrEqual?: number,
    boughtBagSumLessThanOrEqual?: number,
    boughtBagSumEquals?: number,
    boughtBagSumNotEquals?: number,
    boughtBagSumSpecified?: boolean,
    boughtBagSumIn?: Array<number>,
    boughtBagSumNotIn?: Array<number>,
    soldBagSumGreaterThan?: number,
    soldBagSumLessThan?: number,
    soldBagSumGreaterThanOrEqual?: number,
    soldBagSumLessThanOrEqual?: number,
    soldBagSumEquals?: number,
    soldBagSumNotEquals?: number,
    soldBagSumSpecified?: boolean,
    soldBagSumIn?: Array<number>,
    soldBagSumNotIn?: Array<number>,
    teamContains?: string,
    teamDoesNotContain?: string,
    teamEquals?: string,
    teamNotEquals?: string,
    teamSpecified?: boolean,
    teamIn?: Array<string>,
    teamNotIn?: Array<string>,
    distinct?: boolean,
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return InventoryResourceApiFp(this.configuration)
      .getAllInventories(
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        customerIDGreaterThan,
        customerIDLessThan,
        customerIDGreaterThanOrEqual,
        customerIDLessThanOrEqual,
        customerIDEquals,
        customerIDNotEquals,
        customerIDSpecified,
        customerIDIn,
        customerIDNotIn,
        nameContains,
        nameDoesNotContain,
        nameEquals,
        nameNotEquals,
        nameSpecified,
        nameIn,
        nameNotIn,
        ownMoneyGreaterThan,
        ownMoneyLessThan,
        ownMoneyGreaterThanOrEqual,
        ownMoneyLessThanOrEqual,
        ownMoneyEquals,
        ownMoneyNotEquals,
        ownMoneySpecified,
        ownMoneyIn,
        ownMoneyNotIn,
        loanAmountGreaterThan,
        loanAmountLessThan,
        loanAmountGreaterThanOrEqual,
        loanAmountLessThanOrEqual,
        loanAmountEquals,
        loanAmountNotEquals,
        loanAmountSpecified,
        loanAmountIn,
        loanAmountNotIn,
        sumNoFeesGreaterThan,
        sumNoFeesLessThan,
        sumNoFeesGreaterThanOrEqual,
        sumNoFeesLessThanOrEqual,
        sumNoFeesEquals,
        sumNoFeesNotEquals,
        sumNoFeesSpecified,
        sumNoFeesIn,
        sumNoFeesNotIn,
        boughtKgGreaterThan,
        boughtKgLessThan,
        boughtKgGreaterThanOrEqual,
        boughtKgLessThanOrEqual,
        boughtKgEquals,
        boughtKgNotEquals,
        boughtKgSpecified,
        boughtKgIn,
        boughtKgNotIn,
        soldKgGreaterThan,
        soldKgLessThan,
        soldKgGreaterThanOrEqual,
        soldKgLessThanOrEqual,
        soldKgEquals,
        soldKgNotEquals,
        soldKgSpecified,
        soldKgIn,
        soldKgNotIn,
        grainContains,
        grainDoesNotContain,
        grainEquals,
        grainNotEquals,
        grainSpecified,
        grainIn,
        grainNotIn,
        boughtBagSumGreaterThan,
        boughtBagSumLessThan,
        boughtBagSumGreaterThanOrEqual,
        boughtBagSumLessThanOrEqual,
        boughtBagSumEquals,
        boughtBagSumNotEquals,
        boughtBagSumSpecified,
        boughtBagSumIn,
        boughtBagSumNotIn,
        soldBagSumGreaterThan,
        soldBagSumLessThan,
        soldBagSumGreaterThanOrEqual,
        soldBagSumLessThanOrEqual,
        soldBagSumEquals,
        soldBagSumNotEquals,
        soldBagSumSpecified,
        soldBagSumIn,
        soldBagSumNotIn,
        teamContains,
        teamDoesNotContain,
        teamEquals,
        teamNotEquals,
        teamSpecified,
        teamIn,
        teamNotIn,
        distinct,
        page,
        size,
        sort,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InventoryResourceApi
   */
  public getInventory(id: number, options?: AxiosRequestConfig) {
    return InventoryResourceApiFp(this.configuration)
      .getInventory(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Inventory} inventory
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InventoryResourceApi
   */
  public partialUpdateInventory(
    id: number,
    inventory: Inventory,
    options?: AxiosRequestConfig
  ) {
    return InventoryResourceApiFp(this.configuration)
      .partialUpdateInventory(id, inventory, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * LoanContractResourceApi - axios parameter creator
 * @export
 */
export const LoanContractResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {boolean} [approvedEquals]
     * @param {boolean} [approvedNotEquals]
     * @param {boolean} [approvedSpecified]
     * @param {Array<boolean>} [approvedIn]
     * @param {Array<boolean>} [approvedNotIn]
     * @param {number} [contractDurationGreaterThan]
     * @param {number} [contractDurationLessThan]
     * @param {number} [contractDurationGreaterThanOrEqual]
     * @param {number} [contractDurationLessThanOrEqual]
     * @param {number} [contractDurationEquals]
     * @param {number} [contractDurationNotEquals]
     * @param {boolean} [contractDurationSpecified]
     * @param {Array<number>} [contractDurationIn]
     * @param {Array<number>} [contractDurationNotIn]
     * @param {string} [contractStartDateGreaterThan]
     * @param {string} [contractStartDateLessThan]
     * @param {string} [contractStartDateGreaterThanOrEqual]
     * @param {string} [contractStartDateLessThanOrEqual]
     * @param {string} [contractStartDateEquals]
     * @param {string} [contractStartDateNotEquals]
     * @param {boolean} [contractStartDateSpecified]
     * @param {Array<string>} [contractStartDateIn]
     * @param {Array<string>} [contractStartDateNotIn]
     * @param {string} [createdDateGreaterThan]
     * @param {string} [createdDateLessThan]
     * @param {string} [createdDateGreaterThanOrEqual]
     * @param {string} [createdDateLessThanOrEqual]
     * @param {string} [createdDateEquals]
     * @param {string} [createdDateNotEquals]
     * @param {boolean} [createdDateSpecified]
     * @param {Array<string>} [createdDateIn]
     * @param {Array<string>} [createdDateNotIn]
     * @param {string} [lastUpdateDateGreaterThan]
     * @param {string} [lastUpdateDateLessThan]
     * @param {string} [lastUpdateDateGreaterThanOrEqual]
     * @param {string} [lastUpdateDateLessThanOrEqual]
     * @param {string} [lastUpdateDateEquals]
     * @param {string} [lastUpdateDateNotEquals]
     * @param {boolean} [lastUpdateDateSpecified]
     * @param {Array<string>} [lastUpdateDateIn]
     * @param {Array<string>} [lastUpdateDateNotIn]
     * @param {number} [interestRateGreaterThan]
     * @param {number} [interestRateLessThan]
     * @param {number} [interestRateGreaterThanOrEqual]
     * @param {number} [interestRateLessThanOrEqual]
     * @param {number} [interestRateEquals]
     * @param {number} [interestRateNotEquals]
     * @param {boolean} [interestRateSpecified]
     * @param {Array<number>} [interestRateIn]
     * @param {Array<number>} [interestRateNotIn]
     * @param {number} [paybackRateGreaterThan]
     * @param {number} [paybackRateLessThan]
     * @param {number} [paybackRateGreaterThanOrEqual]
     * @param {number} [paybackRateLessThanOrEqual]
     * @param {number} [paybackRateEquals]
     * @param {number} [paybackRateNotEquals]
     * @param {boolean} [paybackRateSpecified]
     * @param {Array<number>} [paybackRateIn]
     * @param {Array<number>} [paybackRateNotIn]
     * @param {number} [ctmFeeGreaterThan]
     * @param {number} [ctmFeeLessThan]
     * @param {number} [ctmFeeGreaterThanOrEqual]
     * @param {number} [ctmFeeLessThanOrEqual]
     * @param {number} [ctmFeeEquals]
     * @param {number} [ctmFeeNotEquals]
     * @param {boolean} [ctmFeeSpecified]
     * @param {Array<number>} [ctmFeeIn]
     * @param {Array<number>} [ctmFeeNotIn]
     * @param {number} [mtcFeeGreaterThan]
     * @param {number} [mtcFeeLessThan]
     * @param {number} [mtcFeeGreaterThanOrEqual]
     * @param {number} [mtcFeeLessThanOrEqual]
     * @param {number} [mtcFeeEquals]
     * @param {number} [mtcFeeNotEquals]
     * @param {boolean} [mtcFeeSpecified]
     * @param {Array<number>} [mtcFeeIn]
     * @param {Array<number>} [mtcFeeNotIn]
     * @param {number} [ctmCapGreaterThan]
     * @param {number} [ctmCapLessThan]
     * @param {number} [ctmCapGreaterThanOrEqual]
     * @param {number} [ctmCapLessThanOrEqual]
     * @param {number} [ctmCapEquals]
     * @param {number} [ctmCapNotEquals]
     * @param {boolean} [ctmCapSpecified]
     * @param {Array<number>} [ctmCapIn]
     * @param {Array<number>} [ctmCapNotIn]
     * @param {number} [mtcCapGreaterThan]
     * @param {number} [mtcCapLessThan]
     * @param {number} [mtcCapGreaterThanOrEqual]
     * @param {number} [mtcCapLessThanOrEqual]
     * @param {number} [mtcCapEquals]
     * @param {number} [mtcCapNotEquals]
     * @param {boolean} [mtcCapSpecified]
     * @param {Array<number>} [mtcCapIn]
     * @param {Array<number>} [mtcCapNotIn]
     * @param {boolean} [allowCtmEquals]
     * @param {boolean} [allowCtmNotEquals]
     * @param {boolean} [allowCtmSpecified]
     * @param {Array<boolean>} [allowCtmIn]
     * @param {Array<boolean>} [allowCtmNotIn]
     * @param {number} [personIdGreaterThan]
     * @param {number} [personIdLessThan]
     * @param {number} [personIdGreaterThanOrEqual]
     * @param {number} [personIdLessThanOrEqual]
     * @param {number} [personIdEquals]
     * @param {number} [personIdNotEquals]
     * @param {boolean} [personIdSpecified]
     * @param {Array<number>} [personIdIn]
     * @param {Array<number>} [personIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countLoanContracts: async (
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      approvedEquals?: boolean,
      approvedNotEquals?: boolean,
      approvedSpecified?: boolean,
      approvedIn?: Array<boolean>,
      approvedNotIn?: Array<boolean>,
      contractDurationGreaterThan?: number,
      contractDurationLessThan?: number,
      contractDurationGreaterThanOrEqual?: number,
      contractDurationLessThanOrEqual?: number,
      contractDurationEquals?: number,
      contractDurationNotEquals?: number,
      contractDurationSpecified?: boolean,
      contractDurationIn?: Array<number>,
      contractDurationNotIn?: Array<number>,
      contractStartDateGreaterThan?: string,
      contractStartDateLessThan?: string,
      contractStartDateGreaterThanOrEqual?: string,
      contractStartDateLessThanOrEqual?: string,
      contractStartDateEquals?: string,
      contractStartDateNotEquals?: string,
      contractStartDateSpecified?: boolean,
      contractStartDateIn?: Array<string>,
      contractStartDateNotIn?: Array<string>,
      createdDateGreaterThan?: string,
      createdDateLessThan?: string,
      createdDateGreaterThanOrEqual?: string,
      createdDateLessThanOrEqual?: string,
      createdDateEquals?: string,
      createdDateNotEquals?: string,
      createdDateSpecified?: boolean,
      createdDateIn?: Array<string>,
      createdDateNotIn?: Array<string>,
      lastUpdateDateGreaterThan?: string,
      lastUpdateDateLessThan?: string,
      lastUpdateDateGreaterThanOrEqual?: string,
      lastUpdateDateLessThanOrEqual?: string,
      lastUpdateDateEquals?: string,
      lastUpdateDateNotEquals?: string,
      lastUpdateDateSpecified?: boolean,
      lastUpdateDateIn?: Array<string>,
      lastUpdateDateNotIn?: Array<string>,
      interestRateGreaterThan?: number,
      interestRateLessThan?: number,
      interestRateGreaterThanOrEqual?: number,
      interestRateLessThanOrEqual?: number,
      interestRateEquals?: number,
      interestRateNotEquals?: number,
      interestRateSpecified?: boolean,
      interestRateIn?: Array<number>,
      interestRateNotIn?: Array<number>,
      paybackRateGreaterThan?: number,
      paybackRateLessThan?: number,
      paybackRateGreaterThanOrEqual?: number,
      paybackRateLessThanOrEqual?: number,
      paybackRateEquals?: number,
      paybackRateNotEquals?: number,
      paybackRateSpecified?: boolean,
      paybackRateIn?: Array<number>,
      paybackRateNotIn?: Array<number>,
      ctmFeeGreaterThan?: number,
      ctmFeeLessThan?: number,
      ctmFeeGreaterThanOrEqual?: number,
      ctmFeeLessThanOrEqual?: number,
      ctmFeeEquals?: number,
      ctmFeeNotEquals?: number,
      ctmFeeSpecified?: boolean,
      ctmFeeIn?: Array<number>,
      ctmFeeNotIn?: Array<number>,
      mtcFeeGreaterThan?: number,
      mtcFeeLessThan?: number,
      mtcFeeGreaterThanOrEqual?: number,
      mtcFeeLessThanOrEqual?: number,
      mtcFeeEquals?: number,
      mtcFeeNotEquals?: number,
      mtcFeeSpecified?: boolean,
      mtcFeeIn?: Array<number>,
      mtcFeeNotIn?: Array<number>,
      ctmCapGreaterThan?: number,
      ctmCapLessThan?: number,
      ctmCapGreaterThanOrEqual?: number,
      ctmCapLessThanOrEqual?: number,
      ctmCapEquals?: number,
      ctmCapNotEquals?: number,
      ctmCapSpecified?: boolean,
      ctmCapIn?: Array<number>,
      ctmCapNotIn?: Array<number>,
      mtcCapGreaterThan?: number,
      mtcCapLessThan?: number,
      mtcCapGreaterThanOrEqual?: number,
      mtcCapLessThanOrEqual?: number,
      mtcCapEquals?: number,
      mtcCapNotEquals?: number,
      mtcCapSpecified?: boolean,
      mtcCapIn?: Array<number>,
      mtcCapNotIn?: Array<number>,
      allowCtmEquals?: boolean,
      allowCtmNotEquals?: boolean,
      allowCtmSpecified?: boolean,
      allowCtmIn?: Array<boolean>,
      allowCtmNotIn?: Array<boolean>,
      personIdGreaterThan?: number,
      personIdLessThan?: number,
      personIdGreaterThanOrEqual?: number,
      personIdLessThanOrEqual?: number,
      personIdEquals?: number,
      personIdNotEquals?: number,
      personIdSpecified?: boolean,
      personIdIn?: Array<number>,
      personIdNotIn?: Array<number>,
      distinct?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/loan-contracts/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (idGreaterThan !== undefined) {
        localVarQueryParameter["id.greaterThan"] = idGreaterThan;
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter["id.lessThan"] = idLessThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["id.greaterThanOrEqual"] = idGreaterThanOrEqual;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter["id.lessThanOrEqual"] = idLessThanOrEqual;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter["id.equals"] = idEquals;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter["id.notEquals"] = idNotEquals;
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter["id.specified"] = idSpecified;
      }

      if (idIn) {
        localVarQueryParameter["id.in"] = idIn;
      }

      if (idNotIn) {
        localVarQueryParameter["id.notIn"] = idNotIn;
      }

      if (loanAmountGreaterThan !== undefined) {
        localVarQueryParameter["loanAmount.greaterThan"] =
          loanAmountGreaterThan;
      }

      if (loanAmountLessThan !== undefined) {
        localVarQueryParameter["loanAmount.lessThan"] = loanAmountLessThan;
      }

      if (loanAmountGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["loanAmount.greaterThanOrEqual"] =
          loanAmountGreaterThanOrEqual;
      }

      if (loanAmountLessThanOrEqual !== undefined) {
        localVarQueryParameter["loanAmount.lessThanOrEqual"] =
          loanAmountLessThanOrEqual;
      }

      if (loanAmountEquals !== undefined) {
        localVarQueryParameter["loanAmount.equals"] = loanAmountEquals;
      }

      if (loanAmountNotEquals !== undefined) {
        localVarQueryParameter["loanAmount.notEquals"] = loanAmountNotEquals;
      }

      if (loanAmountSpecified !== undefined) {
        localVarQueryParameter["loanAmount.specified"] = loanAmountSpecified;
      }

      if (loanAmountIn) {
        localVarQueryParameter["loanAmount.in"] = loanAmountIn;
      }

      if (loanAmountNotIn) {
        localVarQueryParameter["loanAmount.notIn"] = loanAmountNotIn;
      }

      if (ownMoneyGreaterThan !== undefined) {
        localVarQueryParameter["ownMoney.greaterThan"] = ownMoneyGreaterThan;
      }

      if (ownMoneyLessThan !== undefined) {
        localVarQueryParameter["ownMoney.lessThan"] = ownMoneyLessThan;
      }

      if (ownMoneyGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["ownMoney.greaterThanOrEqual"] =
          ownMoneyGreaterThanOrEqual;
      }

      if (ownMoneyLessThanOrEqual !== undefined) {
        localVarQueryParameter["ownMoney.lessThanOrEqual"] =
          ownMoneyLessThanOrEqual;
      }

      if (ownMoneyEquals !== undefined) {
        localVarQueryParameter["ownMoney.equals"] = ownMoneyEquals;
      }

      if (ownMoneyNotEquals !== undefined) {
        localVarQueryParameter["ownMoney.notEquals"] = ownMoneyNotEquals;
      }

      if (ownMoneySpecified !== undefined) {
        localVarQueryParameter["ownMoney.specified"] = ownMoneySpecified;
      }

      if (ownMoneyIn) {
        localVarQueryParameter["ownMoney.in"] = ownMoneyIn;
      }

      if (ownMoneyNotIn) {
        localVarQueryParameter["ownMoney.notIn"] = ownMoneyNotIn;
      }

      if (approvedEquals !== undefined) {
        localVarQueryParameter["approved.equals"] = approvedEquals;
      }

      if (approvedNotEquals !== undefined) {
        localVarQueryParameter["approved.notEquals"] = approvedNotEquals;
      }

      if (approvedSpecified !== undefined) {
        localVarQueryParameter["approved.specified"] = approvedSpecified;
      }

      if (approvedIn) {
        localVarQueryParameter["approved.in"] = approvedIn;
      }

      if (approvedNotIn) {
        localVarQueryParameter["approved.notIn"] = approvedNotIn;
      }

      if (contractDurationGreaterThan !== undefined) {
        localVarQueryParameter["contractDuration.greaterThan"] =
          contractDurationGreaterThan;
      }

      if (contractDurationLessThan !== undefined) {
        localVarQueryParameter["contractDuration.lessThan"] =
          contractDurationLessThan;
      }

      if (contractDurationGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["contractDuration.greaterThanOrEqual"] =
          contractDurationGreaterThanOrEqual;
      }

      if (contractDurationLessThanOrEqual !== undefined) {
        localVarQueryParameter["contractDuration.lessThanOrEqual"] =
          contractDurationLessThanOrEqual;
      }

      if (contractDurationEquals !== undefined) {
        localVarQueryParameter["contractDuration.equals"] =
          contractDurationEquals;
      }

      if (contractDurationNotEquals !== undefined) {
        localVarQueryParameter["contractDuration.notEquals"] =
          contractDurationNotEquals;
      }

      if (contractDurationSpecified !== undefined) {
        localVarQueryParameter["contractDuration.specified"] =
          contractDurationSpecified;
      }

      if (contractDurationIn) {
        localVarQueryParameter["contractDuration.in"] = contractDurationIn;
      }

      if (contractDurationNotIn) {
        localVarQueryParameter["contractDuration.notIn"] =
          contractDurationNotIn;
      }

      if (contractStartDateGreaterThan !== undefined) {
        localVarQueryParameter["contractStartDate.greaterThan"] =
          (contractStartDateGreaterThan as any) instanceof Date
            ? (contractStartDateGreaterThan as any).toISOString()
            : contractStartDateGreaterThan;
      }

      if (contractStartDateLessThan !== undefined) {
        localVarQueryParameter["contractStartDate.lessThan"] =
          (contractStartDateLessThan as any) instanceof Date
            ? (contractStartDateLessThan as any).toISOString()
            : contractStartDateLessThan;
      }

      if (contractStartDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["contractStartDate.greaterThanOrEqual"] =
          (contractStartDateGreaterThanOrEqual as any) instanceof Date
            ? (contractStartDateGreaterThanOrEqual as any).toISOString()
            : contractStartDateGreaterThanOrEqual;
      }

      if (contractStartDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["contractStartDate.lessThanOrEqual"] =
          (contractStartDateLessThanOrEqual as any) instanceof Date
            ? (contractStartDateLessThanOrEqual as any).toISOString()
            : contractStartDateLessThanOrEqual;
      }

      if (contractStartDateEquals !== undefined) {
        localVarQueryParameter["contractStartDate.equals"] =
          (contractStartDateEquals as any) instanceof Date
            ? (contractStartDateEquals as any).toISOString()
            : contractStartDateEquals;
      }

      if (contractStartDateNotEquals !== undefined) {
        localVarQueryParameter["contractStartDate.notEquals"] =
          (contractStartDateNotEquals as any) instanceof Date
            ? (contractStartDateNotEquals as any).toISOString()
            : contractStartDateNotEquals;
      }

      if (contractStartDateSpecified !== undefined) {
        localVarQueryParameter["contractStartDate.specified"] =
          contractStartDateSpecified;
      }

      if (contractStartDateIn) {
        localVarQueryParameter["contractStartDate.in"] = contractStartDateIn;
      }

      if (contractStartDateNotIn) {
        localVarQueryParameter["contractStartDate.notIn"] =
          contractStartDateNotIn;
      }

      if (createdDateGreaterThan !== undefined) {
        localVarQueryParameter["createdDate.greaterThan"] =
          (createdDateGreaterThan as any) instanceof Date
            ? (createdDateGreaterThan as any).toISOString()
            : createdDateGreaterThan;
      }

      if (createdDateLessThan !== undefined) {
        localVarQueryParameter["createdDate.lessThan"] =
          (createdDateLessThan as any) instanceof Date
            ? (createdDateLessThan as any).toISOString()
            : createdDateLessThan;
      }

      if (createdDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["createdDate.greaterThanOrEqual"] =
          (createdDateGreaterThanOrEqual as any) instanceof Date
            ? (createdDateGreaterThanOrEqual as any).toISOString()
            : createdDateGreaterThanOrEqual;
      }

      if (createdDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["createdDate.lessThanOrEqual"] =
          (createdDateLessThanOrEqual as any) instanceof Date
            ? (createdDateLessThanOrEqual as any).toISOString()
            : createdDateLessThanOrEqual;
      }

      if (createdDateEquals !== undefined) {
        localVarQueryParameter["createdDate.equals"] =
          (createdDateEquals as any) instanceof Date
            ? (createdDateEquals as any).toISOString()
            : createdDateEquals;
      }

      if (createdDateNotEquals !== undefined) {
        localVarQueryParameter["createdDate.notEquals"] =
          (createdDateNotEquals as any) instanceof Date
            ? (createdDateNotEquals as any).toISOString()
            : createdDateNotEquals;
      }

      if (createdDateSpecified !== undefined) {
        localVarQueryParameter["createdDate.specified"] = createdDateSpecified;
      }

      if (createdDateIn) {
        localVarQueryParameter["createdDate.in"] = createdDateIn;
      }

      if (createdDateNotIn) {
        localVarQueryParameter["createdDate.notIn"] = createdDateNotIn;
      }

      if (lastUpdateDateGreaterThan !== undefined) {
        localVarQueryParameter["lastUpdateDate.greaterThan"] =
          (lastUpdateDateGreaterThan as any) instanceof Date
            ? (lastUpdateDateGreaterThan as any).toISOString()
            : lastUpdateDateGreaterThan;
      }

      if (lastUpdateDateLessThan !== undefined) {
        localVarQueryParameter["lastUpdateDate.lessThan"] =
          (lastUpdateDateLessThan as any) instanceof Date
            ? (lastUpdateDateLessThan as any).toISOString()
            : lastUpdateDateLessThan;
      }

      if (lastUpdateDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["lastUpdateDate.greaterThanOrEqual"] =
          (lastUpdateDateGreaterThanOrEqual as any) instanceof Date
            ? (lastUpdateDateGreaterThanOrEqual as any).toISOString()
            : lastUpdateDateGreaterThanOrEqual;
      }

      if (lastUpdateDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["lastUpdateDate.lessThanOrEqual"] =
          (lastUpdateDateLessThanOrEqual as any) instanceof Date
            ? (lastUpdateDateLessThanOrEqual as any).toISOString()
            : lastUpdateDateLessThanOrEqual;
      }

      if (lastUpdateDateEquals !== undefined) {
        localVarQueryParameter["lastUpdateDate.equals"] =
          (lastUpdateDateEquals as any) instanceof Date
            ? (lastUpdateDateEquals as any).toISOString()
            : lastUpdateDateEquals;
      }

      if (lastUpdateDateNotEquals !== undefined) {
        localVarQueryParameter["lastUpdateDate.notEquals"] =
          (lastUpdateDateNotEquals as any) instanceof Date
            ? (lastUpdateDateNotEquals as any).toISOString()
            : lastUpdateDateNotEquals;
      }

      if (lastUpdateDateSpecified !== undefined) {
        localVarQueryParameter["lastUpdateDate.specified"] =
          lastUpdateDateSpecified;
      }

      if (lastUpdateDateIn) {
        localVarQueryParameter["lastUpdateDate.in"] = lastUpdateDateIn;
      }

      if (lastUpdateDateNotIn) {
        localVarQueryParameter["lastUpdateDate.notIn"] = lastUpdateDateNotIn;
      }

      if (interestRateGreaterThan !== undefined) {
        localVarQueryParameter["interestRate.greaterThan"] =
          interestRateGreaterThan;
      }

      if (interestRateLessThan !== undefined) {
        localVarQueryParameter["interestRate.lessThan"] = interestRateLessThan;
      }

      if (interestRateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["interestRate.greaterThanOrEqual"] =
          interestRateGreaterThanOrEqual;
      }

      if (interestRateLessThanOrEqual !== undefined) {
        localVarQueryParameter["interestRate.lessThanOrEqual"] =
          interestRateLessThanOrEqual;
      }

      if (interestRateEquals !== undefined) {
        localVarQueryParameter["interestRate.equals"] = interestRateEquals;
      }

      if (interestRateNotEquals !== undefined) {
        localVarQueryParameter["interestRate.notEquals"] =
          interestRateNotEquals;
      }

      if (interestRateSpecified !== undefined) {
        localVarQueryParameter["interestRate.specified"] =
          interestRateSpecified;
      }

      if (interestRateIn) {
        localVarQueryParameter["interestRate.in"] = interestRateIn;
      }

      if (interestRateNotIn) {
        localVarQueryParameter["interestRate.notIn"] = interestRateNotIn;
      }

      if (paybackRateGreaterThan !== undefined) {
        localVarQueryParameter["paybackRate.greaterThan"] =
          paybackRateGreaterThan;
      }

      if (paybackRateLessThan !== undefined) {
        localVarQueryParameter["paybackRate.lessThan"] = paybackRateLessThan;
      }

      if (paybackRateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paybackRate.greaterThanOrEqual"] =
          paybackRateGreaterThanOrEqual;
      }

      if (paybackRateLessThanOrEqual !== undefined) {
        localVarQueryParameter["paybackRate.lessThanOrEqual"] =
          paybackRateLessThanOrEqual;
      }

      if (paybackRateEquals !== undefined) {
        localVarQueryParameter["paybackRate.equals"] = paybackRateEquals;
      }

      if (paybackRateNotEquals !== undefined) {
        localVarQueryParameter["paybackRate.notEquals"] = paybackRateNotEquals;
      }

      if (paybackRateSpecified !== undefined) {
        localVarQueryParameter["paybackRate.specified"] = paybackRateSpecified;
      }

      if (paybackRateIn) {
        localVarQueryParameter["paybackRate.in"] = paybackRateIn;
      }

      if (paybackRateNotIn) {
        localVarQueryParameter["paybackRate.notIn"] = paybackRateNotIn;
      }

      if (ctmFeeGreaterThan !== undefined) {
        localVarQueryParameter["ctmFee.greaterThan"] = ctmFeeGreaterThan;
      }

      if (ctmFeeLessThan !== undefined) {
        localVarQueryParameter["ctmFee.lessThan"] = ctmFeeLessThan;
      }

      if (ctmFeeGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["ctmFee.greaterThanOrEqual"] =
          ctmFeeGreaterThanOrEqual;
      }

      if (ctmFeeLessThanOrEqual !== undefined) {
        localVarQueryParameter["ctmFee.lessThanOrEqual"] =
          ctmFeeLessThanOrEqual;
      }

      if (ctmFeeEquals !== undefined) {
        localVarQueryParameter["ctmFee.equals"] = ctmFeeEquals;
      }

      if (ctmFeeNotEquals !== undefined) {
        localVarQueryParameter["ctmFee.notEquals"] = ctmFeeNotEquals;
      }

      if (ctmFeeSpecified !== undefined) {
        localVarQueryParameter["ctmFee.specified"] = ctmFeeSpecified;
      }

      if (ctmFeeIn) {
        localVarQueryParameter["ctmFee.in"] = ctmFeeIn;
      }

      if (ctmFeeNotIn) {
        localVarQueryParameter["ctmFee.notIn"] = ctmFeeNotIn;
      }

      if (mtcFeeGreaterThan !== undefined) {
        localVarQueryParameter["mtcFee.greaterThan"] = mtcFeeGreaterThan;
      }

      if (mtcFeeLessThan !== undefined) {
        localVarQueryParameter["mtcFee.lessThan"] = mtcFeeLessThan;
      }

      if (mtcFeeGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["mtcFee.greaterThanOrEqual"] =
          mtcFeeGreaterThanOrEqual;
      }

      if (mtcFeeLessThanOrEqual !== undefined) {
        localVarQueryParameter["mtcFee.lessThanOrEqual"] =
          mtcFeeLessThanOrEqual;
      }

      if (mtcFeeEquals !== undefined) {
        localVarQueryParameter["mtcFee.equals"] = mtcFeeEquals;
      }

      if (mtcFeeNotEquals !== undefined) {
        localVarQueryParameter["mtcFee.notEquals"] = mtcFeeNotEquals;
      }

      if (mtcFeeSpecified !== undefined) {
        localVarQueryParameter["mtcFee.specified"] = mtcFeeSpecified;
      }

      if (mtcFeeIn) {
        localVarQueryParameter["mtcFee.in"] = mtcFeeIn;
      }

      if (mtcFeeNotIn) {
        localVarQueryParameter["mtcFee.notIn"] = mtcFeeNotIn;
      }

      if (ctmCapGreaterThan !== undefined) {
        localVarQueryParameter["ctmCap.greaterThan"] = ctmCapGreaterThan;
      }

      if (ctmCapLessThan !== undefined) {
        localVarQueryParameter["ctmCap.lessThan"] = ctmCapLessThan;
      }

      if (ctmCapGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["ctmCap.greaterThanOrEqual"] =
          ctmCapGreaterThanOrEqual;
      }

      if (ctmCapLessThanOrEqual !== undefined) {
        localVarQueryParameter["ctmCap.lessThanOrEqual"] =
          ctmCapLessThanOrEqual;
      }

      if (ctmCapEquals !== undefined) {
        localVarQueryParameter["ctmCap.equals"] = ctmCapEquals;
      }

      if (ctmCapNotEquals !== undefined) {
        localVarQueryParameter["ctmCap.notEquals"] = ctmCapNotEquals;
      }

      if (ctmCapSpecified !== undefined) {
        localVarQueryParameter["ctmCap.specified"] = ctmCapSpecified;
      }

      if (ctmCapIn) {
        localVarQueryParameter["ctmCap.in"] = ctmCapIn;
      }

      if (ctmCapNotIn) {
        localVarQueryParameter["ctmCap.notIn"] = ctmCapNotIn;
      }

      if (mtcCapGreaterThan !== undefined) {
        localVarQueryParameter["mtcCap.greaterThan"] = mtcCapGreaterThan;
      }

      if (mtcCapLessThan !== undefined) {
        localVarQueryParameter["mtcCap.lessThan"] = mtcCapLessThan;
      }

      if (mtcCapGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["mtcCap.greaterThanOrEqual"] =
          mtcCapGreaterThanOrEqual;
      }

      if (mtcCapLessThanOrEqual !== undefined) {
        localVarQueryParameter["mtcCap.lessThanOrEqual"] =
          mtcCapLessThanOrEqual;
      }

      if (mtcCapEquals !== undefined) {
        localVarQueryParameter["mtcCap.equals"] = mtcCapEquals;
      }

      if (mtcCapNotEquals !== undefined) {
        localVarQueryParameter["mtcCap.notEquals"] = mtcCapNotEquals;
      }

      if (mtcCapSpecified !== undefined) {
        localVarQueryParameter["mtcCap.specified"] = mtcCapSpecified;
      }

      if (mtcCapIn) {
        localVarQueryParameter["mtcCap.in"] = mtcCapIn;
      }

      if (mtcCapNotIn) {
        localVarQueryParameter["mtcCap.notIn"] = mtcCapNotIn;
      }

      if (allowCtmEquals !== undefined) {
        localVarQueryParameter["allowCtm.equals"] = allowCtmEquals;
      }

      if (allowCtmNotEquals !== undefined) {
        localVarQueryParameter["allowCtm.notEquals"] = allowCtmNotEquals;
      }

      if (allowCtmSpecified !== undefined) {
        localVarQueryParameter["allowCtm.specified"] = allowCtmSpecified;
      }

      if (allowCtmIn) {
        localVarQueryParameter["allowCtm.in"] = allowCtmIn;
      }

      if (allowCtmNotIn) {
        localVarQueryParameter["allowCtm.notIn"] = allowCtmNotIn;
      }

      if (personIdGreaterThan !== undefined) {
        localVarQueryParameter["personId.greaterThan"] = personIdGreaterThan;
      }

      if (personIdLessThan !== undefined) {
        localVarQueryParameter["personId.lessThan"] = personIdLessThan;
      }

      if (personIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["personId.greaterThanOrEqual"] =
          personIdGreaterThanOrEqual;
      }

      if (personIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["personId.lessThanOrEqual"] =
          personIdLessThanOrEqual;
      }

      if (personIdEquals !== undefined) {
        localVarQueryParameter["personId.equals"] = personIdEquals;
      }

      if (personIdNotEquals !== undefined) {
        localVarQueryParameter["personId.notEquals"] = personIdNotEquals;
      }

      if (personIdSpecified !== undefined) {
        localVarQueryParameter["personId.specified"] = personIdSpecified;
      }

      if (personIdIn) {
        localVarQueryParameter["personId.in"] = personIdIn;
      }

      if (personIdNotIn) {
        localVarQueryParameter["personId.notIn"] = personIdNotIn;
      }

      if (distinct !== undefined) {
        localVarQueryParameter["distinct"] = distinct;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LoanContract} loanContract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoanContract: async (
      loanContract: LoanContract,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'loanContract' is not null or undefined
      assertParamExists("createLoanContract", "loanContract", loanContract);
      const localVarPath = `/api/loan-contracts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loanContract,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLoanContract: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteLoanContract", "id", id);
      const localVarPath = `/api/loan-contracts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {boolean} [approvedEquals]
     * @param {boolean} [approvedNotEquals]
     * @param {boolean} [approvedSpecified]
     * @param {Array<boolean>} [approvedIn]
     * @param {Array<boolean>} [approvedNotIn]
     * @param {number} [contractDurationGreaterThan]
     * @param {number} [contractDurationLessThan]
     * @param {number} [contractDurationGreaterThanOrEqual]
     * @param {number} [contractDurationLessThanOrEqual]
     * @param {number} [contractDurationEquals]
     * @param {number} [contractDurationNotEquals]
     * @param {boolean} [contractDurationSpecified]
     * @param {Array<number>} [contractDurationIn]
     * @param {Array<number>} [contractDurationNotIn]
     * @param {string} [contractStartDateGreaterThan]
     * @param {string} [contractStartDateLessThan]
     * @param {string} [contractStartDateGreaterThanOrEqual]
     * @param {string} [contractStartDateLessThanOrEqual]
     * @param {string} [contractStartDateEquals]
     * @param {string} [contractStartDateNotEquals]
     * @param {boolean} [contractStartDateSpecified]
     * @param {Array<string>} [contractStartDateIn]
     * @param {Array<string>} [contractStartDateNotIn]
     * @param {string} [createdDateGreaterThan]
     * @param {string} [createdDateLessThan]
     * @param {string} [createdDateGreaterThanOrEqual]
     * @param {string} [createdDateLessThanOrEqual]
     * @param {string} [createdDateEquals]
     * @param {string} [createdDateNotEquals]
     * @param {boolean} [createdDateSpecified]
     * @param {Array<string>} [createdDateIn]
     * @param {Array<string>} [createdDateNotIn]
     * @param {string} [lastUpdateDateGreaterThan]
     * @param {string} [lastUpdateDateLessThan]
     * @param {string} [lastUpdateDateGreaterThanOrEqual]
     * @param {string} [lastUpdateDateLessThanOrEqual]
     * @param {string} [lastUpdateDateEquals]
     * @param {string} [lastUpdateDateNotEquals]
     * @param {boolean} [lastUpdateDateSpecified]
     * @param {Array<string>} [lastUpdateDateIn]
     * @param {Array<string>} [lastUpdateDateNotIn]
     * @param {number} [interestRateGreaterThan]
     * @param {number} [interestRateLessThan]
     * @param {number} [interestRateGreaterThanOrEqual]
     * @param {number} [interestRateLessThanOrEqual]
     * @param {number} [interestRateEquals]
     * @param {number} [interestRateNotEquals]
     * @param {boolean} [interestRateSpecified]
     * @param {Array<number>} [interestRateIn]
     * @param {Array<number>} [interestRateNotIn]
     * @param {number} [paybackRateGreaterThan]
     * @param {number} [paybackRateLessThan]
     * @param {number} [paybackRateGreaterThanOrEqual]
     * @param {number} [paybackRateLessThanOrEqual]
     * @param {number} [paybackRateEquals]
     * @param {number} [paybackRateNotEquals]
     * @param {boolean} [paybackRateSpecified]
     * @param {Array<number>} [paybackRateIn]
     * @param {Array<number>} [paybackRateNotIn]
     * @param {number} [ctmFeeGreaterThan]
     * @param {number} [ctmFeeLessThan]
     * @param {number} [ctmFeeGreaterThanOrEqual]
     * @param {number} [ctmFeeLessThanOrEqual]
     * @param {number} [ctmFeeEquals]
     * @param {number} [ctmFeeNotEquals]
     * @param {boolean} [ctmFeeSpecified]
     * @param {Array<number>} [ctmFeeIn]
     * @param {Array<number>} [ctmFeeNotIn]
     * @param {number} [mtcFeeGreaterThan]
     * @param {number} [mtcFeeLessThan]
     * @param {number} [mtcFeeGreaterThanOrEqual]
     * @param {number} [mtcFeeLessThanOrEqual]
     * @param {number} [mtcFeeEquals]
     * @param {number} [mtcFeeNotEquals]
     * @param {boolean} [mtcFeeSpecified]
     * @param {Array<number>} [mtcFeeIn]
     * @param {Array<number>} [mtcFeeNotIn]
     * @param {number} [ctmCapGreaterThan]
     * @param {number} [ctmCapLessThan]
     * @param {number} [ctmCapGreaterThanOrEqual]
     * @param {number} [ctmCapLessThanOrEqual]
     * @param {number} [ctmCapEquals]
     * @param {number} [ctmCapNotEquals]
     * @param {boolean} [ctmCapSpecified]
     * @param {Array<number>} [ctmCapIn]
     * @param {Array<number>} [ctmCapNotIn]
     * @param {number} [mtcCapGreaterThan]
     * @param {number} [mtcCapLessThan]
     * @param {number} [mtcCapGreaterThanOrEqual]
     * @param {number} [mtcCapLessThanOrEqual]
     * @param {number} [mtcCapEquals]
     * @param {number} [mtcCapNotEquals]
     * @param {boolean} [mtcCapSpecified]
     * @param {Array<number>} [mtcCapIn]
     * @param {Array<number>} [mtcCapNotIn]
     * @param {boolean} [allowCtmEquals]
     * @param {boolean} [allowCtmNotEquals]
     * @param {boolean} [allowCtmSpecified]
     * @param {Array<boolean>} [allowCtmIn]
     * @param {Array<boolean>} [allowCtmNotIn]
     * @param {number} [personIdGreaterThan]
     * @param {number} [personIdLessThan]
     * @param {number} [personIdGreaterThanOrEqual]
     * @param {number} [personIdLessThanOrEqual]
     * @param {number} [personIdEquals]
     * @param {number} [personIdNotEquals]
     * @param {boolean} [personIdSpecified]
     * @param {Array<number>} [personIdIn]
     * @param {Array<number>} [personIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllLoanContracts: async (
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      approvedEquals?: boolean,
      approvedNotEquals?: boolean,
      approvedSpecified?: boolean,
      approvedIn?: Array<boolean>,
      approvedNotIn?: Array<boolean>,
      contractDurationGreaterThan?: number,
      contractDurationLessThan?: number,
      contractDurationGreaterThanOrEqual?: number,
      contractDurationLessThanOrEqual?: number,
      contractDurationEquals?: number,
      contractDurationNotEquals?: number,
      contractDurationSpecified?: boolean,
      contractDurationIn?: Array<number>,
      contractDurationNotIn?: Array<number>,
      contractStartDateGreaterThan?: string,
      contractStartDateLessThan?: string,
      contractStartDateGreaterThanOrEqual?: string,
      contractStartDateLessThanOrEqual?: string,
      contractStartDateEquals?: string,
      contractStartDateNotEquals?: string,
      contractStartDateSpecified?: boolean,
      contractStartDateIn?: Array<string>,
      contractStartDateNotIn?: Array<string>,
      createdDateGreaterThan?: string,
      createdDateLessThan?: string,
      createdDateGreaterThanOrEqual?: string,
      createdDateLessThanOrEqual?: string,
      createdDateEquals?: string,
      createdDateNotEquals?: string,
      createdDateSpecified?: boolean,
      createdDateIn?: Array<string>,
      createdDateNotIn?: Array<string>,
      lastUpdateDateGreaterThan?: string,
      lastUpdateDateLessThan?: string,
      lastUpdateDateGreaterThanOrEqual?: string,
      lastUpdateDateLessThanOrEqual?: string,
      lastUpdateDateEquals?: string,
      lastUpdateDateNotEquals?: string,
      lastUpdateDateSpecified?: boolean,
      lastUpdateDateIn?: Array<string>,
      lastUpdateDateNotIn?: Array<string>,
      interestRateGreaterThan?: number,
      interestRateLessThan?: number,
      interestRateGreaterThanOrEqual?: number,
      interestRateLessThanOrEqual?: number,
      interestRateEquals?: number,
      interestRateNotEquals?: number,
      interestRateSpecified?: boolean,
      interestRateIn?: Array<number>,
      interestRateNotIn?: Array<number>,
      paybackRateGreaterThan?: number,
      paybackRateLessThan?: number,
      paybackRateGreaterThanOrEqual?: number,
      paybackRateLessThanOrEqual?: number,
      paybackRateEquals?: number,
      paybackRateNotEquals?: number,
      paybackRateSpecified?: boolean,
      paybackRateIn?: Array<number>,
      paybackRateNotIn?: Array<number>,
      ctmFeeGreaterThan?: number,
      ctmFeeLessThan?: number,
      ctmFeeGreaterThanOrEqual?: number,
      ctmFeeLessThanOrEqual?: number,
      ctmFeeEquals?: number,
      ctmFeeNotEquals?: number,
      ctmFeeSpecified?: boolean,
      ctmFeeIn?: Array<number>,
      ctmFeeNotIn?: Array<number>,
      mtcFeeGreaterThan?: number,
      mtcFeeLessThan?: number,
      mtcFeeGreaterThanOrEqual?: number,
      mtcFeeLessThanOrEqual?: number,
      mtcFeeEquals?: number,
      mtcFeeNotEquals?: number,
      mtcFeeSpecified?: boolean,
      mtcFeeIn?: Array<number>,
      mtcFeeNotIn?: Array<number>,
      ctmCapGreaterThan?: number,
      ctmCapLessThan?: number,
      ctmCapGreaterThanOrEqual?: number,
      ctmCapLessThanOrEqual?: number,
      ctmCapEquals?: number,
      ctmCapNotEquals?: number,
      ctmCapSpecified?: boolean,
      ctmCapIn?: Array<number>,
      ctmCapNotIn?: Array<number>,
      mtcCapGreaterThan?: number,
      mtcCapLessThan?: number,
      mtcCapGreaterThanOrEqual?: number,
      mtcCapLessThanOrEqual?: number,
      mtcCapEquals?: number,
      mtcCapNotEquals?: number,
      mtcCapSpecified?: boolean,
      mtcCapIn?: Array<number>,
      mtcCapNotIn?: Array<number>,
      allowCtmEquals?: boolean,
      allowCtmNotEquals?: boolean,
      allowCtmSpecified?: boolean,
      allowCtmIn?: Array<boolean>,
      allowCtmNotIn?: Array<boolean>,
      personIdGreaterThan?: number,
      personIdLessThan?: number,
      personIdGreaterThanOrEqual?: number,
      personIdLessThanOrEqual?: number,
      personIdEquals?: number,
      personIdNotEquals?: number,
      personIdSpecified?: boolean,
      personIdIn?: Array<number>,
      personIdNotIn?: Array<number>,
      distinct?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/loan-contracts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (idGreaterThan !== undefined) {
        localVarQueryParameter["id.greaterThan"] = idGreaterThan;
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter["id.lessThan"] = idLessThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["id.greaterThanOrEqual"] = idGreaterThanOrEqual;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter["id.lessThanOrEqual"] = idLessThanOrEqual;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter["id.equals"] = idEquals;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter["id.notEquals"] = idNotEquals;
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter["id.specified"] = idSpecified;
      }

      if (idIn) {
        localVarQueryParameter["id.in"] = idIn;
      }

      if (idNotIn) {
        localVarQueryParameter["id.notIn"] = idNotIn;
      }

      if (loanAmountGreaterThan !== undefined) {
        localVarQueryParameter["loanAmount.greaterThan"] =
          loanAmountGreaterThan;
      }

      if (loanAmountLessThan !== undefined) {
        localVarQueryParameter["loanAmount.lessThan"] = loanAmountLessThan;
      }

      if (loanAmountGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["loanAmount.greaterThanOrEqual"] =
          loanAmountGreaterThanOrEqual;
      }

      if (loanAmountLessThanOrEqual !== undefined) {
        localVarQueryParameter["loanAmount.lessThanOrEqual"] =
          loanAmountLessThanOrEqual;
      }

      if (loanAmountEquals !== undefined) {
        localVarQueryParameter["loanAmount.equals"] = loanAmountEquals;
      }

      if (loanAmountNotEquals !== undefined) {
        localVarQueryParameter["loanAmount.notEquals"] = loanAmountNotEquals;
      }

      if (loanAmountSpecified !== undefined) {
        localVarQueryParameter["loanAmount.specified"] = loanAmountSpecified;
      }

      if (loanAmountIn) {
        localVarQueryParameter["loanAmount.in"] = loanAmountIn;
      }

      if (loanAmountNotIn) {
        localVarQueryParameter["loanAmount.notIn"] = loanAmountNotIn;
      }

      if (ownMoneyGreaterThan !== undefined) {
        localVarQueryParameter["ownMoney.greaterThan"] = ownMoneyGreaterThan;
      }

      if (ownMoneyLessThan !== undefined) {
        localVarQueryParameter["ownMoney.lessThan"] = ownMoneyLessThan;
      }

      if (ownMoneyGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["ownMoney.greaterThanOrEqual"] =
          ownMoneyGreaterThanOrEqual;
      }

      if (ownMoneyLessThanOrEqual !== undefined) {
        localVarQueryParameter["ownMoney.lessThanOrEqual"] =
          ownMoneyLessThanOrEqual;
      }

      if (ownMoneyEquals !== undefined) {
        localVarQueryParameter["ownMoney.equals"] = ownMoneyEquals;
      }

      if (ownMoneyNotEquals !== undefined) {
        localVarQueryParameter["ownMoney.notEquals"] = ownMoneyNotEquals;
      }

      if (ownMoneySpecified !== undefined) {
        localVarQueryParameter["ownMoney.specified"] = ownMoneySpecified;
      }

      if (ownMoneyIn) {
        localVarQueryParameter["ownMoney.in"] = ownMoneyIn;
      }

      if (ownMoneyNotIn) {
        localVarQueryParameter["ownMoney.notIn"] = ownMoneyNotIn;
      }

      if (approvedEquals !== undefined) {
        localVarQueryParameter["approved.equals"] = approvedEquals;
      }

      if (approvedNotEquals !== undefined) {
        localVarQueryParameter["approved.notEquals"] = approvedNotEquals;
      }

      if (approvedSpecified !== undefined) {
        localVarQueryParameter["approved.specified"] = approvedSpecified;
      }

      if (approvedIn) {
        localVarQueryParameter["approved.in"] = approvedIn;
      }

      if (approvedNotIn) {
        localVarQueryParameter["approved.notIn"] = approvedNotIn;
      }

      if (contractDurationGreaterThan !== undefined) {
        localVarQueryParameter["contractDuration.greaterThan"] =
          contractDurationGreaterThan;
      }

      if (contractDurationLessThan !== undefined) {
        localVarQueryParameter["contractDuration.lessThan"] =
          contractDurationLessThan;
      }

      if (contractDurationGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["contractDuration.greaterThanOrEqual"] =
          contractDurationGreaterThanOrEqual;
      }

      if (contractDurationLessThanOrEqual !== undefined) {
        localVarQueryParameter["contractDuration.lessThanOrEqual"] =
          contractDurationLessThanOrEqual;
      }

      if (contractDurationEquals !== undefined) {
        localVarQueryParameter["contractDuration.equals"] =
          contractDurationEquals;
      }

      if (contractDurationNotEquals !== undefined) {
        localVarQueryParameter["contractDuration.notEquals"] =
          contractDurationNotEquals;
      }

      if (contractDurationSpecified !== undefined) {
        localVarQueryParameter["contractDuration.specified"] =
          contractDurationSpecified;
      }

      if (contractDurationIn) {
        localVarQueryParameter["contractDuration.in"] = contractDurationIn;
      }

      if (contractDurationNotIn) {
        localVarQueryParameter["contractDuration.notIn"] =
          contractDurationNotIn;
      }

      if (contractStartDateGreaterThan !== undefined) {
        localVarQueryParameter["contractStartDate.greaterThan"] =
          (contractStartDateGreaterThan as any) instanceof Date
            ? (contractStartDateGreaterThan as any).toISOString()
            : contractStartDateGreaterThan;
      }

      if (contractStartDateLessThan !== undefined) {
        localVarQueryParameter["contractStartDate.lessThan"] =
          (contractStartDateLessThan as any) instanceof Date
            ? (contractStartDateLessThan as any).toISOString()
            : contractStartDateLessThan;
      }

      if (contractStartDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["contractStartDate.greaterThanOrEqual"] =
          (contractStartDateGreaterThanOrEqual as any) instanceof Date
            ? (contractStartDateGreaterThanOrEqual as any).toISOString()
            : contractStartDateGreaterThanOrEqual;
      }

      if (contractStartDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["contractStartDate.lessThanOrEqual"] =
          (contractStartDateLessThanOrEqual as any) instanceof Date
            ? (contractStartDateLessThanOrEqual as any).toISOString()
            : contractStartDateLessThanOrEqual;
      }

      if (contractStartDateEquals !== undefined) {
        localVarQueryParameter["contractStartDate.equals"] =
          (contractStartDateEquals as any) instanceof Date
            ? (contractStartDateEquals as any).toISOString()
            : contractStartDateEquals;
      }

      if (contractStartDateNotEquals !== undefined) {
        localVarQueryParameter["contractStartDate.notEquals"] =
          (contractStartDateNotEquals as any) instanceof Date
            ? (contractStartDateNotEquals as any).toISOString()
            : contractStartDateNotEquals;
      }

      if (contractStartDateSpecified !== undefined) {
        localVarQueryParameter["contractStartDate.specified"] =
          contractStartDateSpecified;
      }

      if (contractStartDateIn) {
        localVarQueryParameter["contractStartDate.in"] = contractStartDateIn;
      }

      if (contractStartDateNotIn) {
        localVarQueryParameter["contractStartDate.notIn"] =
          contractStartDateNotIn;
      }

      if (createdDateGreaterThan !== undefined) {
        localVarQueryParameter["createdDate.greaterThan"] =
          (createdDateGreaterThan as any) instanceof Date
            ? (createdDateGreaterThan as any).toISOString()
            : createdDateGreaterThan;
      }

      if (createdDateLessThan !== undefined) {
        localVarQueryParameter["createdDate.lessThan"] =
          (createdDateLessThan as any) instanceof Date
            ? (createdDateLessThan as any).toISOString()
            : createdDateLessThan;
      }

      if (createdDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["createdDate.greaterThanOrEqual"] =
          (createdDateGreaterThanOrEqual as any) instanceof Date
            ? (createdDateGreaterThanOrEqual as any).toISOString()
            : createdDateGreaterThanOrEqual;
      }

      if (createdDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["createdDate.lessThanOrEqual"] =
          (createdDateLessThanOrEqual as any) instanceof Date
            ? (createdDateLessThanOrEqual as any).toISOString()
            : createdDateLessThanOrEqual;
      }

      if (createdDateEquals !== undefined) {
        localVarQueryParameter["createdDate.equals"] =
          (createdDateEquals as any) instanceof Date
            ? (createdDateEquals as any).toISOString()
            : createdDateEquals;
      }

      if (createdDateNotEquals !== undefined) {
        localVarQueryParameter["createdDate.notEquals"] =
          (createdDateNotEquals as any) instanceof Date
            ? (createdDateNotEquals as any).toISOString()
            : createdDateNotEquals;
      }

      if (createdDateSpecified !== undefined) {
        localVarQueryParameter["createdDate.specified"] = createdDateSpecified;
      }

      if (createdDateIn) {
        localVarQueryParameter["createdDate.in"] = createdDateIn;
      }

      if (createdDateNotIn) {
        localVarQueryParameter["createdDate.notIn"] = createdDateNotIn;
      }

      if (lastUpdateDateGreaterThan !== undefined) {
        localVarQueryParameter["lastUpdateDate.greaterThan"] =
          (lastUpdateDateGreaterThan as any) instanceof Date
            ? (lastUpdateDateGreaterThan as any).toISOString()
            : lastUpdateDateGreaterThan;
      }

      if (lastUpdateDateLessThan !== undefined) {
        localVarQueryParameter["lastUpdateDate.lessThan"] =
          (lastUpdateDateLessThan as any) instanceof Date
            ? (lastUpdateDateLessThan as any).toISOString()
            : lastUpdateDateLessThan;
      }

      if (lastUpdateDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["lastUpdateDate.greaterThanOrEqual"] =
          (lastUpdateDateGreaterThanOrEqual as any) instanceof Date
            ? (lastUpdateDateGreaterThanOrEqual as any).toISOString()
            : lastUpdateDateGreaterThanOrEqual;
      }

      if (lastUpdateDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["lastUpdateDate.lessThanOrEqual"] =
          (lastUpdateDateLessThanOrEqual as any) instanceof Date
            ? (lastUpdateDateLessThanOrEqual as any).toISOString()
            : lastUpdateDateLessThanOrEqual;
      }

      if (lastUpdateDateEquals !== undefined) {
        localVarQueryParameter["lastUpdateDate.equals"] =
          (lastUpdateDateEquals as any) instanceof Date
            ? (lastUpdateDateEquals as any).toISOString()
            : lastUpdateDateEquals;
      }

      if (lastUpdateDateNotEquals !== undefined) {
        localVarQueryParameter["lastUpdateDate.notEquals"] =
          (lastUpdateDateNotEquals as any) instanceof Date
            ? (lastUpdateDateNotEquals as any).toISOString()
            : lastUpdateDateNotEquals;
      }

      if (lastUpdateDateSpecified !== undefined) {
        localVarQueryParameter["lastUpdateDate.specified"] =
          lastUpdateDateSpecified;
      }

      if (lastUpdateDateIn) {
        localVarQueryParameter["lastUpdateDate.in"] = lastUpdateDateIn;
      }

      if (lastUpdateDateNotIn) {
        localVarQueryParameter["lastUpdateDate.notIn"] = lastUpdateDateNotIn;
      }

      if (interestRateGreaterThan !== undefined) {
        localVarQueryParameter["interestRate.greaterThan"] =
          interestRateGreaterThan;
      }

      if (interestRateLessThan !== undefined) {
        localVarQueryParameter["interestRate.lessThan"] = interestRateLessThan;
      }

      if (interestRateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["interestRate.greaterThanOrEqual"] =
          interestRateGreaterThanOrEqual;
      }

      if (interestRateLessThanOrEqual !== undefined) {
        localVarQueryParameter["interestRate.lessThanOrEqual"] =
          interestRateLessThanOrEqual;
      }

      if (interestRateEquals !== undefined) {
        localVarQueryParameter["interestRate.equals"] = interestRateEquals;
      }

      if (interestRateNotEquals !== undefined) {
        localVarQueryParameter["interestRate.notEquals"] =
          interestRateNotEquals;
      }

      if (interestRateSpecified !== undefined) {
        localVarQueryParameter["interestRate.specified"] =
          interestRateSpecified;
      }

      if (interestRateIn) {
        localVarQueryParameter["interestRate.in"] = interestRateIn;
      }

      if (interestRateNotIn) {
        localVarQueryParameter["interestRate.notIn"] = interestRateNotIn;
      }

      if (paybackRateGreaterThan !== undefined) {
        localVarQueryParameter["paybackRate.greaterThan"] =
          paybackRateGreaterThan;
      }

      if (paybackRateLessThan !== undefined) {
        localVarQueryParameter["paybackRate.lessThan"] = paybackRateLessThan;
      }

      if (paybackRateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paybackRate.greaterThanOrEqual"] =
          paybackRateGreaterThanOrEqual;
      }

      if (paybackRateLessThanOrEqual !== undefined) {
        localVarQueryParameter["paybackRate.lessThanOrEqual"] =
          paybackRateLessThanOrEqual;
      }

      if (paybackRateEquals !== undefined) {
        localVarQueryParameter["paybackRate.equals"] = paybackRateEquals;
      }

      if (paybackRateNotEquals !== undefined) {
        localVarQueryParameter["paybackRate.notEquals"] = paybackRateNotEquals;
      }

      if (paybackRateSpecified !== undefined) {
        localVarQueryParameter["paybackRate.specified"] = paybackRateSpecified;
      }

      if (paybackRateIn) {
        localVarQueryParameter["paybackRate.in"] = paybackRateIn;
      }

      if (paybackRateNotIn) {
        localVarQueryParameter["paybackRate.notIn"] = paybackRateNotIn;
      }

      if (ctmFeeGreaterThan !== undefined) {
        localVarQueryParameter["ctmFee.greaterThan"] = ctmFeeGreaterThan;
      }

      if (ctmFeeLessThan !== undefined) {
        localVarQueryParameter["ctmFee.lessThan"] = ctmFeeLessThan;
      }

      if (ctmFeeGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["ctmFee.greaterThanOrEqual"] =
          ctmFeeGreaterThanOrEqual;
      }

      if (ctmFeeLessThanOrEqual !== undefined) {
        localVarQueryParameter["ctmFee.lessThanOrEqual"] =
          ctmFeeLessThanOrEqual;
      }

      if (ctmFeeEquals !== undefined) {
        localVarQueryParameter["ctmFee.equals"] = ctmFeeEquals;
      }

      if (ctmFeeNotEquals !== undefined) {
        localVarQueryParameter["ctmFee.notEquals"] = ctmFeeNotEquals;
      }

      if (ctmFeeSpecified !== undefined) {
        localVarQueryParameter["ctmFee.specified"] = ctmFeeSpecified;
      }

      if (ctmFeeIn) {
        localVarQueryParameter["ctmFee.in"] = ctmFeeIn;
      }

      if (ctmFeeNotIn) {
        localVarQueryParameter["ctmFee.notIn"] = ctmFeeNotIn;
      }

      if (mtcFeeGreaterThan !== undefined) {
        localVarQueryParameter["mtcFee.greaterThan"] = mtcFeeGreaterThan;
      }

      if (mtcFeeLessThan !== undefined) {
        localVarQueryParameter["mtcFee.lessThan"] = mtcFeeLessThan;
      }

      if (mtcFeeGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["mtcFee.greaterThanOrEqual"] =
          mtcFeeGreaterThanOrEqual;
      }

      if (mtcFeeLessThanOrEqual !== undefined) {
        localVarQueryParameter["mtcFee.lessThanOrEqual"] =
          mtcFeeLessThanOrEqual;
      }

      if (mtcFeeEquals !== undefined) {
        localVarQueryParameter["mtcFee.equals"] = mtcFeeEquals;
      }

      if (mtcFeeNotEquals !== undefined) {
        localVarQueryParameter["mtcFee.notEquals"] = mtcFeeNotEquals;
      }

      if (mtcFeeSpecified !== undefined) {
        localVarQueryParameter["mtcFee.specified"] = mtcFeeSpecified;
      }

      if (mtcFeeIn) {
        localVarQueryParameter["mtcFee.in"] = mtcFeeIn;
      }

      if (mtcFeeNotIn) {
        localVarQueryParameter["mtcFee.notIn"] = mtcFeeNotIn;
      }

      if (ctmCapGreaterThan !== undefined) {
        localVarQueryParameter["ctmCap.greaterThan"] = ctmCapGreaterThan;
      }

      if (ctmCapLessThan !== undefined) {
        localVarQueryParameter["ctmCap.lessThan"] = ctmCapLessThan;
      }

      if (ctmCapGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["ctmCap.greaterThanOrEqual"] =
          ctmCapGreaterThanOrEqual;
      }

      if (ctmCapLessThanOrEqual !== undefined) {
        localVarQueryParameter["ctmCap.lessThanOrEqual"] =
          ctmCapLessThanOrEqual;
      }

      if (ctmCapEquals !== undefined) {
        localVarQueryParameter["ctmCap.equals"] = ctmCapEquals;
      }

      if (ctmCapNotEquals !== undefined) {
        localVarQueryParameter["ctmCap.notEquals"] = ctmCapNotEquals;
      }

      if (ctmCapSpecified !== undefined) {
        localVarQueryParameter["ctmCap.specified"] = ctmCapSpecified;
      }

      if (ctmCapIn) {
        localVarQueryParameter["ctmCap.in"] = ctmCapIn;
      }

      if (ctmCapNotIn) {
        localVarQueryParameter["ctmCap.notIn"] = ctmCapNotIn;
      }

      if (mtcCapGreaterThan !== undefined) {
        localVarQueryParameter["mtcCap.greaterThan"] = mtcCapGreaterThan;
      }

      if (mtcCapLessThan !== undefined) {
        localVarQueryParameter["mtcCap.lessThan"] = mtcCapLessThan;
      }

      if (mtcCapGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["mtcCap.greaterThanOrEqual"] =
          mtcCapGreaterThanOrEqual;
      }

      if (mtcCapLessThanOrEqual !== undefined) {
        localVarQueryParameter["mtcCap.lessThanOrEqual"] =
          mtcCapLessThanOrEqual;
      }

      if (mtcCapEquals !== undefined) {
        localVarQueryParameter["mtcCap.equals"] = mtcCapEquals;
      }

      if (mtcCapNotEquals !== undefined) {
        localVarQueryParameter["mtcCap.notEquals"] = mtcCapNotEquals;
      }

      if (mtcCapSpecified !== undefined) {
        localVarQueryParameter["mtcCap.specified"] = mtcCapSpecified;
      }

      if (mtcCapIn) {
        localVarQueryParameter["mtcCap.in"] = mtcCapIn;
      }

      if (mtcCapNotIn) {
        localVarQueryParameter["mtcCap.notIn"] = mtcCapNotIn;
      }

      if (allowCtmEquals !== undefined) {
        localVarQueryParameter["allowCtm.equals"] = allowCtmEquals;
      }

      if (allowCtmNotEquals !== undefined) {
        localVarQueryParameter["allowCtm.notEquals"] = allowCtmNotEquals;
      }

      if (allowCtmSpecified !== undefined) {
        localVarQueryParameter["allowCtm.specified"] = allowCtmSpecified;
      }

      if (allowCtmIn) {
        localVarQueryParameter["allowCtm.in"] = allowCtmIn;
      }

      if (allowCtmNotIn) {
        localVarQueryParameter["allowCtm.notIn"] = allowCtmNotIn;
      }

      if (personIdGreaterThan !== undefined) {
        localVarQueryParameter["personId.greaterThan"] = personIdGreaterThan;
      }

      if (personIdLessThan !== undefined) {
        localVarQueryParameter["personId.lessThan"] = personIdLessThan;
      }

      if (personIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["personId.greaterThanOrEqual"] =
          personIdGreaterThanOrEqual;
      }

      if (personIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["personId.lessThanOrEqual"] =
          personIdLessThanOrEqual;
      }

      if (personIdEquals !== undefined) {
        localVarQueryParameter["personId.equals"] = personIdEquals;
      }

      if (personIdNotEquals !== undefined) {
        localVarQueryParameter["personId.notEquals"] = personIdNotEquals;
      }

      if (personIdSpecified !== undefined) {
        localVarQueryParameter["personId.specified"] = personIdSpecified;
      }

      if (personIdIn) {
        localVarQueryParameter["personId.in"] = personIdIn;
      }

      if (personIdNotIn) {
        localVarQueryParameter["personId.notIn"] = personIdNotIn;
      }

      if (distinct !== undefined) {
        localVarQueryParameter["distinct"] = distinct;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoanContract: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getLoanContract", "id", id);
      const localVarPath = `/api/loan-contracts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {LoanContract} loanContract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateLoanContract: async (
      id: number,
      loanContract: LoanContract,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateLoanContract", "id", id);
      // verify required parameter 'loanContract' is not null or undefined
      assertParamExists(
        "partialUpdateLoanContract",
        "loanContract",
        loanContract
      );
      const localVarPath = `/api/loan-contracts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loanContract,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {LoanContract} loanContract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLoanContract: async (
      id: number,
      loanContract: LoanContract,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateLoanContract", "id", id);
      // verify required parameter 'loanContract' is not null or undefined
      assertParamExists("updateLoanContract", "loanContract", loanContract);
      const localVarPath = `/api/loan-contracts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loanContract,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LoanContractResourceApi - functional programming interface
 * @export
 */
export const LoanContractResourceApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    LoanContractResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {boolean} [approvedEquals]
     * @param {boolean} [approvedNotEquals]
     * @param {boolean} [approvedSpecified]
     * @param {Array<boolean>} [approvedIn]
     * @param {Array<boolean>} [approvedNotIn]
     * @param {number} [contractDurationGreaterThan]
     * @param {number} [contractDurationLessThan]
     * @param {number} [contractDurationGreaterThanOrEqual]
     * @param {number} [contractDurationLessThanOrEqual]
     * @param {number} [contractDurationEquals]
     * @param {number} [contractDurationNotEquals]
     * @param {boolean} [contractDurationSpecified]
     * @param {Array<number>} [contractDurationIn]
     * @param {Array<number>} [contractDurationNotIn]
     * @param {string} [contractStartDateGreaterThan]
     * @param {string} [contractStartDateLessThan]
     * @param {string} [contractStartDateGreaterThanOrEqual]
     * @param {string} [contractStartDateLessThanOrEqual]
     * @param {string} [contractStartDateEquals]
     * @param {string} [contractStartDateNotEquals]
     * @param {boolean} [contractStartDateSpecified]
     * @param {Array<string>} [contractStartDateIn]
     * @param {Array<string>} [contractStartDateNotIn]
     * @param {string} [createdDateGreaterThan]
     * @param {string} [createdDateLessThan]
     * @param {string} [createdDateGreaterThanOrEqual]
     * @param {string} [createdDateLessThanOrEqual]
     * @param {string} [createdDateEquals]
     * @param {string} [createdDateNotEquals]
     * @param {boolean} [createdDateSpecified]
     * @param {Array<string>} [createdDateIn]
     * @param {Array<string>} [createdDateNotIn]
     * @param {string} [lastUpdateDateGreaterThan]
     * @param {string} [lastUpdateDateLessThan]
     * @param {string} [lastUpdateDateGreaterThanOrEqual]
     * @param {string} [lastUpdateDateLessThanOrEqual]
     * @param {string} [lastUpdateDateEquals]
     * @param {string} [lastUpdateDateNotEquals]
     * @param {boolean} [lastUpdateDateSpecified]
     * @param {Array<string>} [lastUpdateDateIn]
     * @param {Array<string>} [lastUpdateDateNotIn]
     * @param {number} [interestRateGreaterThan]
     * @param {number} [interestRateLessThan]
     * @param {number} [interestRateGreaterThanOrEqual]
     * @param {number} [interestRateLessThanOrEqual]
     * @param {number} [interestRateEquals]
     * @param {number} [interestRateNotEquals]
     * @param {boolean} [interestRateSpecified]
     * @param {Array<number>} [interestRateIn]
     * @param {Array<number>} [interestRateNotIn]
     * @param {number} [paybackRateGreaterThan]
     * @param {number} [paybackRateLessThan]
     * @param {number} [paybackRateGreaterThanOrEqual]
     * @param {number} [paybackRateLessThanOrEqual]
     * @param {number} [paybackRateEquals]
     * @param {number} [paybackRateNotEquals]
     * @param {boolean} [paybackRateSpecified]
     * @param {Array<number>} [paybackRateIn]
     * @param {Array<number>} [paybackRateNotIn]
     * @param {number} [ctmFeeGreaterThan]
     * @param {number} [ctmFeeLessThan]
     * @param {number} [ctmFeeGreaterThanOrEqual]
     * @param {number} [ctmFeeLessThanOrEqual]
     * @param {number} [ctmFeeEquals]
     * @param {number} [ctmFeeNotEquals]
     * @param {boolean} [ctmFeeSpecified]
     * @param {Array<number>} [ctmFeeIn]
     * @param {Array<number>} [ctmFeeNotIn]
     * @param {number} [mtcFeeGreaterThan]
     * @param {number} [mtcFeeLessThan]
     * @param {number} [mtcFeeGreaterThanOrEqual]
     * @param {number} [mtcFeeLessThanOrEqual]
     * @param {number} [mtcFeeEquals]
     * @param {number} [mtcFeeNotEquals]
     * @param {boolean} [mtcFeeSpecified]
     * @param {Array<number>} [mtcFeeIn]
     * @param {Array<number>} [mtcFeeNotIn]
     * @param {number} [ctmCapGreaterThan]
     * @param {number} [ctmCapLessThan]
     * @param {number} [ctmCapGreaterThanOrEqual]
     * @param {number} [ctmCapLessThanOrEqual]
     * @param {number} [ctmCapEquals]
     * @param {number} [ctmCapNotEquals]
     * @param {boolean} [ctmCapSpecified]
     * @param {Array<number>} [ctmCapIn]
     * @param {Array<number>} [ctmCapNotIn]
     * @param {number} [mtcCapGreaterThan]
     * @param {number} [mtcCapLessThan]
     * @param {number} [mtcCapGreaterThanOrEqual]
     * @param {number} [mtcCapLessThanOrEqual]
     * @param {number} [mtcCapEquals]
     * @param {number} [mtcCapNotEquals]
     * @param {boolean} [mtcCapSpecified]
     * @param {Array<number>} [mtcCapIn]
     * @param {Array<number>} [mtcCapNotIn]
     * @param {boolean} [allowCtmEquals]
     * @param {boolean} [allowCtmNotEquals]
     * @param {boolean} [allowCtmSpecified]
     * @param {Array<boolean>} [allowCtmIn]
     * @param {Array<boolean>} [allowCtmNotIn]
     * @param {number} [personIdGreaterThan]
     * @param {number} [personIdLessThan]
     * @param {number} [personIdGreaterThanOrEqual]
     * @param {number} [personIdLessThanOrEqual]
     * @param {number} [personIdEquals]
     * @param {number} [personIdNotEquals]
     * @param {boolean} [personIdSpecified]
     * @param {Array<number>} [personIdIn]
     * @param {Array<number>} [personIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countLoanContracts(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      approvedEquals?: boolean,
      approvedNotEquals?: boolean,
      approvedSpecified?: boolean,
      approvedIn?: Array<boolean>,
      approvedNotIn?: Array<boolean>,
      contractDurationGreaterThan?: number,
      contractDurationLessThan?: number,
      contractDurationGreaterThanOrEqual?: number,
      contractDurationLessThanOrEqual?: number,
      contractDurationEquals?: number,
      contractDurationNotEquals?: number,
      contractDurationSpecified?: boolean,
      contractDurationIn?: Array<number>,
      contractDurationNotIn?: Array<number>,
      contractStartDateGreaterThan?: string,
      contractStartDateLessThan?: string,
      contractStartDateGreaterThanOrEqual?: string,
      contractStartDateLessThanOrEqual?: string,
      contractStartDateEquals?: string,
      contractStartDateNotEquals?: string,
      contractStartDateSpecified?: boolean,
      contractStartDateIn?: Array<string>,
      contractStartDateNotIn?: Array<string>,
      createdDateGreaterThan?: string,
      createdDateLessThan?: string,
      createdDateGreaterThanOrEqual?: string,
      createdDateLessThanOrEqual?: string,
      createdDateEquals?: string,
      createdDateNotEquals?: string,
      createdDateSpecified?: boolean,
      createdDateIn?: Array<string>,
      createdDateNotIn?: Array<string>,
      lastUpdateDateGreaterThan?: string,
      lastUpdateDateLessThan?: string,
      lastUpdateDateGreaterThanOrEqual?: string,
      lastUpdateDateLessThanOrEqual?: string,
      lastUpdateDateEquals?: string,
      lastUpdateDateNotEquals?: string,
      lastUpdateDateSpecified?: boolean,
      lastUpdateDateIn?: Array<string>,
      lastUpdateDateNotIn?: Array<string>,
      interestRateGreaterThan?: number,
      interestRateLessThan?: number,
      interestRateGreaterThanOrEqual?: number,
      interestRateLessThanOrEqual?: number,
      interestRateEquals?: number,
      interestRateNotEquals?: number,
      interestRateSpecified?: boolean,
      interestRateIn?: Array<number>,
      interestRateNotIn?: Array<number>,
      paybackRateGreaterThan?: number,
      paybackRateLessThan?: number,
      paybackRateGreaterThanOrEqual?: number,
      paybackRateLessThanOrEqual?: number,
      paybackRateEquals?: number,
      paybackRateNotEquals?: number,
      paybackRateSpecified?: boolean,
      paybackRateIn?: Array<number>,
      paybackRateNotIn?: Array<number>,
      ctmFeeGreaterThan?: number,
      ctmFeeLessThan?: number,
      ctmFeeGreaterThanOrEqual?: number,
      ctmFeeLessThanOrEqual?: number,
      ctmFeeEquals?: number,
      ctmFeeNotEquals?: number,
      ctmFeeSpecified?: boolean,
      ctmFeeIn?: Array<number>,
      ctmFeeNotIn?: Array<number>,
      mtcFeeGreaterThan?: number,
      mtcFeeLessThan?: number,
      mtcFeeGreaterThanOrEqual?: number,
      mtcFeeLessThanOrEqual?: number,
      mtcFeeEquals?: number,
      mtcFeeNotEquals?: number,
      mtcFeeSpecified?: boolean,
      mtcFeeIn?: Array<number>,
      mtcFeeNotIn?: Array<number>,
      ctmCapGreaterThan?: number,
      ctmCapLessThan?: number,
      ctmCapGreaterThanOrEqual?: number,
      ctmCapLessThanOrEqual?: number,
      ctmCapEquals?: number,
      ctmCapNotEquals?: number,
      ctmCapSpecified?: boolean,
      ctmCapIn?: Array<number>,
      ctmCapNotIn?: Array<number>,
      mtcCapGreaterThan?: number,
      mtcCapLessThan?: number,
      mtcCapGreaterThanOrEqual?: number,
      mtcCapLessThanOrEqual?: number,
      mtcCapEquals?: number,
      mtcCapNotEquals?: number,
      mtcCapSpecified?: boolean,
      mtcCapIn?: Array<number>,
      mtcCapNotIn?: Array<number>,
      allowCtmEquals?: boolean,
      allowCtmNotEquals?: boolean,
      allowCtmSpecified?: boolean,
      allowCtmIn?: Array<boolean>,
      allowCtmNotIn?: Array<boolean>,
      personIdGreaterThan?: number,
      personIdLessThan?: number,
      personIdGreaterThanOrEqual?: number,
      personIdLessThanOrEqual?: number,
      personIdEquals?: number,
      personIdNotEquals?: number,
      personIdSpecified?: boolean,
      personIdIn?: Array<number>,
      personIdNotIn?: Array<number>,
      distinct?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.countLoanContracts(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          loanAmountGreaterThan,
          loanAmountLessThan,
          loanAmountGreaterThanOrEqual,
          loanAmountLessThanOrEqual,
          loanAmountEquals,
          loanAmountNotEquals,
          loanAmountSpecified,
          loanAmountIn,
          loanAmountNotIn,
          ownMoneyGreaterThan,
          ownMoneyLessThan,
          ownMoneyGreaterThanOrEqual,
          ownMoneyLessThanOrEqual,
          ownMoneyEquals,
          ownMoneyNotEquals,
          ownMoneySpecified,
          ownMoneyIn,
          ownMoneyNotIn,
          approvedEquals,
          approvedNotEquals,
          approvedSpecified,
          approvedIn,
          approvedNotIn,
          contractDurationGreaterThan,
          contractDurationLessThan,
          contractDurationGreaterThanOrEqual,
          contractDurationLessThanOrEqual,
          contractDurationEquals,
          contractDurationNotEquals,
          contractDurationSpecified,
          contractDurationIn,
          contractDurationNotIn,
          contractStartDateGreaterThan,
          contractStartDateLessThan,
          contractStartDateGreaterThanOrEqual,
          contractStartDateLessThanOrEqual,
          contractStartDateEquals,
          contractStartDateNotEquals,
          contractStartDateSpecified,
          contractStartDateIn,
          contractStartDateNotIn,
          createdDateGreaterThan,
          createdDateLessThan,
          createdDateGreaterThanOrEqual,
          createdDateLessThanOrEqual,
          createdDateEquals,
          createdDateNotEquals,
          createdDateSpecified,
          createdDateIn,
          createdDateNotIn,
          lastUpdateDateGreaterThan,
          lastUpdateDateLessThan,
          lastUpdateDateGreaterThanOrEqual,
          lastUpdateDateLessThanOrEqual,
          lastUpdateDateEquals,
          lastUpdateDateNotEquals,
          lastUpdateDateSpecified,
          lastUpdateDateIn,
          lastUpdateDateNotIn,
          interestRateGreaterThan,
          interestRateLessThan,
          interestRateGreaterThanOrEqual,
          interestRateLessThanOrEqual,
          interestRateEquals,
          interestRateNotEquals,
          interestRateSpecified,
          interestRateIn,
          interestRateNotIn,
          paybackRateGreaterThan,
          paybackRateLessThan,
          paybackRateGreaterThanOrEqual,
          paybackRateLessThanOrEqual,
          paybackRateEquals,
          paybackRateNotEquals,
          paybackRateSpecified,
          paybackRateIn,
          paybackRateNotIn,
          ctmFeeGreaterThan,
          ctmFeeLessThan,
          ctmFeeGreaterThanOrEqual,
          ctmFeeLessThanOrEqual,
          ctmFeeEquals,
          ctmFeeNotEquals,
          ctmFeeSpecified,
          ctmFeeIn,
          ctmFeeNotIn,
          mtcFeeGreaterThan,
          mtcFeeLessThan,
          mtcFeeGreaterThanOrEqual,
          mtcFeeLessThanOrEqual,
          mtcFeeEquals,
          mtcFeeNotEquals,
          mtcFeeSpecified,
          mtcFeeIn,
          mtcFeeNotIn,
          ctmCapGreaterThan,
          ctmCapLessThan,
          ctmCapGreaterThanOrEqual,
          ctmCapLessThanOrEqual,
          ctmCapEquals,
          ctmCapNotEquals,
          ctmCapSpecified,
          ctmCapIn,
          ctmCapNotIn,
          mtcCapGreaterThan,
          mtcCapLessThan,
          mtcCapGreaterThanOrEqual,
          mtcCapLessThanOrEqual,
          mtcCapEquals,
          mtcCapNotEquals,
          mtcCapSpecified,
          mtcCapIn,
          mtcCapNotIn,
          allowCtmEquals,
          allowCtmNotEquals,
          allowCtmSpecified,
          allowCtmIn,
          allowCtmNotIn,
          personIdGreaterThan,
          personIdLessThan,
          personIdGreaterThanOrEqual,
          personIdLessThanOrEqual,
          personIdEquals,
          personIdNotEquals,
          personIdSpecified,
          personIdIn,
          personIdNotIn,
          distinct,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {LoanContract} loanContract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createLoanContract(
      loanContract: LoanContract,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoanContract>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createLoanContract(
          loanContract,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteLoanContract(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteLoanContract(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {boolean} [approvedEquals]
     * @param {boolean} [approvedNotEquals]
     * @param {boolean} [approvedSpecified]
     * @param {Array<boolean>} [approvedIn]
     * @param {Array<boolean>} [approvedNotIn]
     * @param {number} [contractDurationGreaterThan]
     * @param {number} [contractDurationLessThan]
     * @param {number} [contractDurationGreaterThanOrEqual]
     * @param {number} [contractDurationLessThanOrEqual]
     * @param {number} [contractDurationEquals]
     * @param {number} [contractDurationNotEquals]
     * @param {boolean} [contractDurationSpecified]
     * @param {Array<number>} [contractDurationIn]
     * @param {Array<number>} [contractDurationNotIn]
     * @param {string} [contractStartDateGreaterThan]
     * @param {string} [contractStartDateLessThan]
     * @param {string} [contractStartDateGreaterThanOrEqual]
     * @param {string} [contractStartDateLessThanOrEqual]
     * @param {string} [contractStartDateEquals]
     * @param {string} [contractStartDateNotEquals]
     * @param {boolean} [contractStartDateSpecified]
     * @param {Array<string>} [contractStartDateIn]
     * @param {Array<string>} [contractStartDateNotIn]
     * @param {string} [createdDateGreaterThan]
     * @param {string} [createdDateLessThan]
     * @param {string} [createdDateGreaterThanOrEqual]
     * @param {string} [createdDateLessThanOrEqual]
     * @param {string} [createdDateEquals]
     * @param {string} [createdDateNotEquals]
     * @param {boolean} [createdDateSpecified]
     * @param {Array<string>} [createdDateIn]
     * @param {Array<string>} [createdDateNotIn]
     * @param {string} [lastUpdateDateGreaterThan]
     * @param {string} [lastUpdateDateLessThan]
     * @param {string} [lastUpdateDateGreaterThanOrEqual]
     * @param {string} [lastUpdateDateLessThanOrEqual]
     * @param {string} [lastUpdateDateEquals]
     * @param {string} [lastUpdateDateNotEquals]
     * @param {boolean} [lastUpdateDateSpecified]
     * @param {Array<string>} [lastUpdateDateIn]
     * @param {Array<string>} [lastUpdateDateNotIn]
     * @param {number} [interestRateGreaterThan]
     * @param {number} [interestRateLessThan]
     * @param {number} [interestRateGreaterThanOrEqual]
     * @param {number} [interestRateLessThanOrEqual]
     * @param {number} [interestRateEquals]
     * @param {number} [interestRateNotEquals]
     * @param {boolean} [interestRateSpecified]
     * @param {Array<number>} [interestRateIn]
     * @param {Array<number>} [interestRateNotIn]
     * @param {number} [paybackRateGreaterThan]
     * @param {number} [paybackRateLessThan]
     * @param {number} [paybackRateGreaterThanOrEqual]
     * @param {number} [paybackRateLessThanOrEqual]
     * @param {number} [paybackRateEquals]
     * @param {number} [paybackRateNotEquals]
     * @param {boolean} [paybackRateSpecified]
     * @param {Array<number>} [paybackRateIn]
     * @param {Array<number>} [paybackRateNotIn]
     * @param {number} [ctmFeeGreaterThan]
     * @param {number} [ctmFeeLessThan]
     * @param {number} [ctmFeeGreaterThanOrEqual]
     * @param {number} [ctmFeeLessThanOrEqual]
     * @param {number} [ctmFeeEquals]
     * @param {number} [ctmFeeNotEquals]
     * @param {boolean} [ctmFeeSpecified]
     * @param {Array<number>} [ctmFeeIn]
     * @param {Array<number>} [ctmFeeNotIn]
     * @param {number} [mtcFeeGreaterThan]
     * @param {number} [mtcFeeLessThan]
     * @param {number} [mtcFeeGreaterThanOrEqual]
     * @param {number} [mtcFeeLessThanOrEqual]
     * @param {number} [mtcFeeEquals]
     * @param {number} [mtcFeeNotEquals]
     * @param {boolean} [mtcFeeSpecified]
     * @param {Array<number>} [mtcFeeIn]
     * @param {Array<number>} [mtcFeeNotIn]
     * @param {number} [ctmCapGreaterThan]
     * @param {number} [ctmCapLessThan]
     * @param {number} [ctmCapGreaterThanOrEqual]
     * @param {number} [ctmCapLessThanOrEqual]
     * @param {number} [ctmCapEquals]
     * @param {number} [ctmCapNotEquals]
     * @param {boolean} [ctmCapSpecified]
     * @param {Array<number>} [ctmCapIn]
     * @param {Array<number>} [ctmCapNotIn]
     * @param {number} [mtcCapGreaterThan]
     * @param {number} [mtcCapLessThan]
     * @param {number} [mtcCapGreaterThanOrEqual]
     * @param {number} [mtcCapLessThanOrEqual]
     * @param {number} [mtcCapEquals]
     * @param {number} [mtcCapNotEquals]
     * @param {boolean} [mtcCapSpecified]
     * @param {Array<number>} [mtcCapIn]
     * @param {Array<number>} [mtcCapNotIn]
     * @param {boolean} [allowCtmEquals]
     * @param {boolean} [allowCtmNotEquals]
     * @param {boolean} [allowCtmSpecified]
     * @param {Array<boolean>} [allowCtmIn]
     * @param {Array<boolean>} [allowCtmNotIn]
     * @param {number} [personIdGreaterThan]
     * @param {number} [personIdLessThan]
     * @param {number} [personIdGreaterThanOrEqual]
     * @param {number} [personIdLessThanOrEqual]
     * @param {number} [personIdEquals]
     * @param {number} [personIdNotEquals]
     * @param {boolean} [personIdSpecified]
     * @param {Array<number>} [personIdIn]
     * @param {Array<number>} [personIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllLoanContracts(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      approvedEquals?: boolean,
      approvedNotEquals?: boolean,
      approvedSpecified?: boolean,
      approvedIn?: Array<boolean>,
      approvedNotIn?: Array<boolean>,
      contractDurationGreaterThan?: number,
      contractDurationLessThan?: number,
      contractDurationGreaterThanOrEqual?: number,
      contractDurationLessThanOrEqual?: number,
      contractDurationEquals?: number,
      contractDurationNotEquals?: number,
      contractDurationSpecified?: boolean,
      contractDurationIn?: Array<number>,
      contractDurationNotIn?: Array<number>,
      contractStartDateGreaterThan?: string,
      contractStartDateLessThan?: string,
      contractStartDateGreaterThanOrEqual?: string,
      contractStartDateLessThanOrEqual?: string,
      contractStartDateEquals?: string,
      contractStartDateNotEquals?: string,
      contractStartDateSpecified?: boolean,
      contractStartDateIn?: Array<string>,
      contractStartDateNotIn?: Array<string>,
      createdDateGreaterThan?: string,
      createdDateLessThan?: string,
      createdDateGreaterThanOrEqual?: string,
      createdDateLessThanOrEqual?: string,
      createdDateEquals?: string,
      createdDateNotEquals?: string,
      createdDateSpecified?: boolean,
      createdDateIn?: Array<string>,
      createdDateNotIn?: Array<string>,
      lastUpdateDateGreaterThan?: string,
      lastUpdateDateLessThan?: string,
      lastUpdateDateGreaterThanOrEqual?: string,
      lastUpdateDateLessThanOrEqual?: string,
      lastUpdateDateEquals?: string,
      lastUpdateDateNotEquals?: string,
      lastUpdateDateSpecified?: boolean,
      lastUpdateDateIn?: Array<string>,
      lastUpdateDateNotIn?: Array<string>,
      interestRateGreaterThan?: number,
      interestRateLessThan?: number,
      interestRateGreaterThanOrEqual?: number,
      interestRateLessThanOrEqual?: number,
      interestRateEquals?: number,
      interestRateNotEquals?: number,
      interestRateSpecified?: boolean,
      interestRateIn?: Array<number>,
      interestRateNotIn?: Array<number>,
      paybackRateGreaterThan?: number,
      paybackRateLessThan?: number,
      paybackRateGreaterThanOrEqual?: number,
      paybackRateLessThanOrEqual?: number,
      paybackRateEquals?: number,
      paybackRateNotEquals?: number,
      paybackRateSpecified?: boolean,
      paybackRateIn?: Array<number>,
      paybackRateNotIn?: Array<number>,
      ctmFeeGreaterThan?: number,
      ctmFeeLessThan?: number,
      ctmFeeGreaterThanOrEqual?: number,
      ctmFeeLessThanOrEqual?: number,
      ctmFeeEquals?: number,
      ctmFeeNotEquals?: number,
      ctmFeeSpecified?: boolean,
      ctmFeeIn?: Array<number>,
      ctmFeeNotIn?: Array<number>,
      mtcFeeGreaterThan?: number,
      mtcFeeLessThan?: number,
      mtcFeeGreaterThanOrEqual?: number,
      mtcFeeLessThanOrEqual?: number,
      mtcFeeEquals?: number,
      mtcFeeNotEquals?: number,
      mtcFeeSpecified?: boolean,
      mtcFeeIn?: Array<number>,
      mtcFeeNotIn?: Array<number>,
      ctmCapGreaterThan?: number,
      ctmCapLessThan?: number,
      ctmCapGreaterThanOrEqual?: number,
      ctmCapLessThanOrEqual?: number,
      ctmCapEquals?: number,
      ctmCapNotEquals?: number,
      ctmCapSpecified?: boolean,
      ctmCapIn?: Array<number>,
      ctmCapNotIn?: Array<number>,
      mtcCapGreaterThan?: number,
      mtcCapLessThan?: number,
      mtcCapGreaterThanOrEqual?: number,
      mtcCapLessThanOrEqual?: number,
      mtcCapEquals?: number,
      mtcCapNotEquals?: number,
      mtcCapSpecified?: boolean,
      mtcCapIn?: Array<number>,
      mtcCapNotIn?: Array<number>,
      allowCtmEquals?: boolean,
      allowCtmNotEquals?: boolean,
      allowCtmSpecified?: boolean,
      allowCtmIn?: Array<boolean>,
      allowCtmNotIn?: Array<boolean>,
      personIdGreaterThan?: number,
      personIdLessThan?: number,
      personIdGreaterThanOrEqual?: number,
      personIdLessThanOrEqual?: number,
      personIdEquals?: number,
      personIdNotEquals?: number,
      personIdSpecified?: boolean,
      personIdIn?: Array<number>,
      personIdNotIn?: Array<number>,
      distinct?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<LoanContract>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllLoanContracts(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          loanAmountGreaterThan,
          loanAmountLessThan,
          loanAmountGreaterThanOrEqual,
          loanAmountLessThanOrEqual,
          loanAmountEquals,
          loanAmountNotEquals,
          loanAmountSpecified,
          loanAmountIn,
          loanAmountNotIn,
          ownMoneyGreaterThan,
          ownMoneyLessThan,
          ownMoneyGreaterThanOrEqual,
          ownMoneyLessThanOrEqual,
          ownMoneyEquals,
          ownMoneyNotEquals,
          ownMoneySpecified,
          ownMoneyIn,
          ownMoneyNotIn,
          approvedEquals,
          approvedNotEquals,
          approvedSpecified,
          approvedIn,
          approvedNotIn,
          contractDurationGreaterThan,
          contractDurationLessThan,
          contractDurationGreaterThanOrEqual,
          contractDurationLessThanOrEqual,
          contractDurationEquals,
          contractDurationNotEquals,
          contractDurationSpecified,
          contractDurationIn,
          contractDurationNotIn,
          contractStartDateGreaterThan,
          contractStartDateLessThan,
          contractStartDateGreaterThanOrEqual,
          contractStartDateLessThanOrEqual,
          contractStartDateEquals,
          contractStartDateNotEquals,
          contractStartDateSpecified,
          contractStartDateIn,
          contractStartDateNotIn,
          createdDateGreaterThan,
          createdDateLessThan,
          createdDateGreaterThanOrEqual,
          createdDateLessThanOrEqual,
          createdDateEquals,
          createdDateNotEquals,
          createdDateSpecified,
          createdDateIn,
          createdDateNotIn,
          lastUpdateDateGreaterThan,
          lastUpdateDateLessThan,
          lastUpdateDateGreaterThanOrEqual,
          lastUpdateDateLessThanOrEqual,
          lastUpdateDateEquals,
          lastUpdateDateNotEquals,
          lastUpdateDateSpecified,
          lastUpdateDateIn,
          lastUpdateDateNotIn,
          interestRateGreaterThan,
          interestRateLessThan,
          interestRateGreaterThanOrEqual,
          interestRateLessThanOrEqual,
          interestRateEquals,
          interestRateNotEquals,
          interestRateSpecified,
          interestRateIn,
          interestRateNotIn,
          paybackRateGreaterThan,
          paybackRateLessThan,
          paybackRateGreaterThanOrEqual,
          paybackRateLessThanOrEqual,
          paybackRateEquals,
          paybackRateNotEquals,
          paybackRateSpecified,
          paybackRateIn,
          paybackRateNotIn,
          ctmFeeGreaterThan,
          ctmFeeLessThan,
          ctmFeeGreaterThanOrEqual,
          ctmFeeLessThanOrEqual,
          ctmFeeEquals,
          ctmFeeNotEquals,
          ctmFeeSpecified,
          ctmFeeIn,
          ctmFeeNotIn,
          mtcFeeGreaterThan,
          mtcFeeLessThan,
          mtcFeeGreaterThanOrEqual,
          mtcFeeLessThanOrEqual,
          mtcFeeEquals,
          mtcFeeNotEquals,
          mtcFeeSpecified,
          mtcFeeIn,
          mtcFeeNotIn,
          ctmCapGreaterThan,
          ctmCapLessThan,
          ctmCapGreaterThanOrEqual,
          ctmCapLessThanOrEqual,
          ctmCapEquals,
          ctmCapNotEquals,
          ctmCapSpecified,
          ctmCapIn,
          ctmCapNotIn,
          mtcCapGreaterThan,
          mtcCapLessThan,
          mtcCapGreaterThanOrEqual,
          mtcCapLessThanOrEqual,
          mtcCapEquals,
          mtcCapNotEquals,
          mtcCapSpecified,
          mtcCapIn,
          mtcCapNotIn,
          allowCtmEquals,
          allowCtmNotEquals,
          allowCtmSpecified,
          allowCtmIn,
          allowCtmNotIn,
          personIdGreaterThan,
          personIdLessThan,
          personIdGreaterThanOrEqual,
          personIdLessThanOrEqual,
          personIdEquals,
          personIdNotEquals,
          personIdSpecified,
          personIdIn,
          personIdNotIn,
          distinct,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLoanContract(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoanContract>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanContract(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {LoanContract} loanContract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateLoanContract(
      id: number,
      loanContract: LoanContract,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoanContract>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdateLoanContract(
          id,
          loanContract,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {LoanContract} loanContract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateLoanContract(
      id: number,
      loanContract: LoanContract,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoanContract>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateLoanContract(
          id,
          loanContract,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * LoanContractResourceApi - factory interface
 * @export
 */
export const LoanContractResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LoanContractResourceApiFp(configuration);
  return {
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {boolean} [approvedEquals]
     * @param {boolean} [approvedNotEquals]
     * @param {boolean} [approvedSpecified]
     * @param {Array<boolean>} [approvedIn]
     * @param {Array<boolean>} [approvedNotIn]
     * @param {number} [contractDurationGreaterThan]
     * @param {number} [contractDurationLessThan]
     * @param {number} [contractDurationGreaterThanOrEqual]
     * @param {number} [contractDurationLessThanOrEqual]
     * @param {number} [contractDurationEquals]
     * @param {number} [contractDurationNotEquals]
     * @param {boolean} [contractDurationSpecified]
     * @param {Array<number>} [contractDurationIn]
     * @param {Array<number>} [contractDurationNotIn]
     * @param {string} [contractStartDateGreaterThan]
     * @param {string} [contractStartDateLessThan]
     * @param {string} [contractStartDateGreaterThanOrEqual]
     * @param {string} [contractStartDateLessThanOrEqual]
     * @param {string} [contractStartDateEquals]
     * @param {string} [contractStartDateNotEquals]
     * @param {boolean} [contractStartDateSpecified]
     * @param {Array<string>} [contractStartDateIn]
     * @param {Array<string>} [contractStartDateNotIn]
     * @param {string} [createdDateGreaterThan]
     * @param {string} [createdDateLessThan]
     * @param {string} [createdDateGreaterThanOrEqual]
     * @param {string} [createdDateLessThanOrEqual]
     * @param {string} [createdDateEquals]
     * @param {string} [createdDateNotEquals]
     * @param {boolean} [createdDateSpecified]
     * @param {Array<string>} [createdDateIn]
     * @param {Array<string>} [createdDateNotIn]
     * @param {string} [lastUpdateDateGreaterThan]
     * @param {string} [lastUpdateDateLessThan]
     * @param {string} [lastUpdateDateGreaterThanOrEqual]
     * @param {string} [lastUpdateDateLessThanOrEqual]
     * @param {string} [lastUpdateDateEquals]
     * @param {string} [lastUpdateDateNotEquals]
     * @param {boolean} [lastUpdateDateSpecified]
     * @param {Array<string>} [lastUpdateDateIn]
     * @param {Array<string>} [lastUpdateDateNotIn]
     * @param {number} [interestRateGreaterThan]
     * @param {number} [interestRateLessThan]
     * @param {number} [interestRateGreaterThanOrEqual]
     * @param {number} [interestRateLessThanOrEqual]
     * @param {number} [interestRateEquals]
     * @param {number} [interestRateNotEquals]
     * @param {boolean} [interestRateSpecified]
     * @param {Array<number>} [interestRateIn]
     * @param {Array<number>} [interestRateNotIn]
     * @param {number} [paybackRateGreaterThan]
     * @param {number} [paybackRateLessThan]
     * @param {number} [paybackRateGreaterThanOrEqual]
     * @param {number} [paybackRateLessThanOrEqual]
     * @param {number} [paybackRateEquals]
     * @param {number} [paybackRateNotEquals]
     * @param {boolean} [paybackRateSpecified]
     * @param {Array<number>} [paybackRateIn]
     * @param {Array<number>} [paybackRateNotIn]
     * @param {number} [ctmFeeGreaterThan]
     * @param {number} [ctmFeeLessThan]
     * @param {number} [ctmFeeGreaterThanOrEqual]
     * @param {number} [ctmFeeLessThanOrEqual]
     * @param {number} [ctmFeeEquals]
     * @param {number} [ctmFeeNotEquals]
     * @param {boolean} [ctmFeeSpecified]
     * @param {Array<number>} [ctmFeeIn]
     * @param {Array<number>} [ctmFeeNotIn]
     * @param {number} [mtcFeeGreaterThan]
     * @param {number} [mtcFeeLessThan]
     * @param {number} [mtcFeeGreaterThanOrEqual]
     * @param {number} [mtcFeeLessThanOrEqual]
     * @param {number} [mtcFeeEquals]
     * @param {number} [mtcFeeNotEquals]
     * @param {boolean} [mtcFeeSpecified]
     * @param {Array<number>} [mtcFeeIn]
     * @param {Array<number>} [mtcFeeNotIn]
     * @param {number} [ctmCapGreaterThan]
     * @param {number} [ctmCapLessThan]
     * @param {number} [ctmCapGreaterThanOrEqual]
     * @param {number} [ctmCapLessThanOrEqual]
     * @param {number} [ctmCapEquals]
     * @param {number} [ctmCapNotEquals]
     * @param {boolean} [ctmCapSpecified]
     * @param {Array<number>} [ctmCapIn]
     * @param {Array<number>} [ctmCapNotIn]
     * @param {number} [mtcCapGreaterThan]
     * @param {number} [mtcCapLessThan]
     * @param {number} [mtcCapGreaterThanOrEqual]
     * @param {number} [mtcCapLessThanOrEqual]
     * @param {number} [mtcCapEquals]
     * @param {number} [mtcCapNotEquals]
     * @param {boolean} [mtcCapSpecified]
     * @param {Array<number>} [mtcCapIn]
     * @param {Array<number>} [mtcCapNotIn]
     * @param {boolean} [allowCtmEquals]
     * @param {boolean} [allowCtmNotEquals]
     * @param {boolean} [allowCtmSpecified]
     * @param {Array<boolean>} [allowCtmIn]
     * @param {Array<boolean>} [allowCtmNotIn]
     * @param {number} [personIdGreaterThan]
     * @param {number} [personIdLessThan]
     * @param {number} [personIdGreaterThanOrEqual]
     * @param {number} [personIdLessThanOrEqual]
     * @param {number} [personIdEquals]
     * @param {number} [personIdNotEquals]
     * @param {boolean} [personIdSpecified]
     * @param {Array<number>} [personIdIn]
     * @param {Array<number>} [personIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countLoanContracts(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      approvedEquals?: boolean,
      approvedNotEquals?: boolean,
      approvedSpecified?: boolean,
      approvedIn?: Array<boolean>,
      approvedNotIn?: Array<boolean>,
      contractDurationGreaterThan?: number,
      contractDurationLessThan?: number,
      contractDurationGreaterThanOrEqual?: number,
      contractDurationLessThanOrEqual?: number,
      contractDurationEquals?: number,
      contractDurationNotEquals?: number,
      contractDurationSpecified?: boolean,
      contractDurationIn?: Array<number>,
      contractDurationNotIn?: Array<number>,
      contractStartDateGreaterThan?: string,
      contractStartDateLessThan?: string,
      contractStartDateGreaterThanOrEqual?: string,
      contractStartDateLessThanOrEqual?: string,
      contractStartDateEquals?: string,
      contractStartDateNotEquals?: string,
      contractStartDateSpecified?: boolean,
      contractStartDateIn?: Array<string>,
      contractStartDateNotIn?: Array<string>,
      createdDateGreaterThan?: string,
      createdDateLessThan?: string,
      createdDateGreaterThanOrEqual?: string,
      createdDateLessThanOrEqual?: string,
      createdDateEquals?: string,
      createdDateNotEquals?: string,
      createdDateSpecified?: boolean,
      createdDateIn?: Array<string>,
      createdDateNotIn?: Array<string>,
      lastUpdateDateGreaterThan?: string,
      lastUpdateDateLessThan?: string,
      lastUpdateDateGreaterThanOrEqual?: string,
      lastUpdateDateLessThanOrEqual?: string,
      lastUpdateDateEquals?: string,
      lastUpdateDateNotEquals?: string,
      lastUpdateDateSpecified?: boolean,
      lastUpdateDateIn?: Array<string>,
      lastUpdateDateNotIn?: Array<string>,
      interestRateGreaterThan?: number,
      interestRateLessThan?: number,
      interestRateGreaterThanOrEqual?: number,
      interestRateLessThanOrEqual?: number,
      interestRateEquals?: number,
      interestRateNotEquals?: number,
      interestRateSpecified?: boolean,
      interestRateIn?: Array<number>,
      interestRateNotIn?: Array<number>,
      paybackRateGreaterThan?: number,
      paybackRateLessThan?: number,
      paybackRateGreaterThanOrEqual?: number,
      paybackRateLessThanOrEqual?: number,
      paybackRateEquals?: number,
      paybackRateNotEquals?: number,
      paybackRateSpecified?: boolean,
      paybackRateIn?: Array<number>,
      paybackRateNotIn?: Array<number>,
      ctmFeeGreaterThan?: number,
      ctmFeeLessThan?: number,
      ctmFeeGreaterThanOrEqual?: number,
      ctmFeeLessThanOrEqual?: number,
      ctmFeeEquals?: number,
      ctmFeeNotEquals?: number,
      ctmFeeSpecified?: boolean,
      ctmFeeIn?: Array<number>,
      ctmFeeNotIn?: Array<number>,
      mtcFeeGreaterThan?: number,
      mtcFeeLessThan?: number,
      mtcFeeGreaterThanOrEqual?: number,
      mtcFeeLessThanOrEqual?: number,
      mtcFeeEquals?: number,
      mtcFeeNotEquals?: number,
      mtcFeeSpecified?: boolean,
      mtcFeeIn?: Array<number>,
      mtcFeeNotIn?: Array<number>,
      ctmCapGreaterThan?: number,
      ctmCapLessThan?: number,
      ctmCapGreaterThanOrEqual?: number,
      ctmCapLessThanOrEqual?: number,
      ctmCapEquals?: number,
      ctmCapNotEquals?: number,
      ctmCapSpecified?: boolean,
      ctmCapIn?: Array<number>,
      ctmCapNotIn?: Array<number>,
      mtcCapGreaterThan?: number,
      mtcCapLessThan?: number,
      mtcCapGreaterThanOrEqual?: number,
      mtcCapLessThanOrEqual?: number,
      mtcCapEquals?: number,
      mtcCapNotEquals?: number,
      mtcCapSpecified?: boolean,
      mtcCapIn?: Array<number>,
      mtcCapNotIn?: Array<number>,
      allowCtmEquals?: boolean,
      allowCtmNotEquals?: boolean,
      allowCtmSpecified?: boolean,
      allowCtmIn?: Array<boolean>,
      allowCtmNotIn?: Array<boolean>,
      personIdGreaterThan?: number,
      personIdLessThan?: number,
      personIdGreaterThanOrEqual?: number,
      personIdLessThanOrEqual?: number,
      personIdEquals?: number,
      personIdNotEquals?: number,
      personIdSpecified?: boolean,
      personIdIn?: Array<number>,
      personIdNotIn?: Array<number>,
      distinct?: boolean,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .countLoanContracts(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          loanAmountGreaterThan,
          loanAmountLessThan,
          loanAmountGreaterThanOrEqual,
          loanAmountLessThanOrEqual,
          loanAmountEquals,
          loanAmountNotEquals,
          loanAmountSpecified,
          loanAmountIn,
          loanAmountNotIn,
          ownMoneyGreaterThan,
          ownMoneyLessThan,
          ownMoneyGreaterThanOrEqual,
          ownMoneyLessThanOrEqual,
          ownMoneyEquals,
          ownMoneyNotEquals,
          ownMoneySpecified,
          ownMoneyIn,
          ownMoneyNotIn,
          approvedEquals,
          approvedNotEquals,
          approvedSpecified,
          approvedIn,
          approvedNotIn,
          contractDurationGreaterThan,
          contractDurationLessThan,
          contractDurationGreaterThanOrEqual,
          contractDurationLessThanOrEqual,
          contractDurationEquals,
          contractDurationNotEquals,
          contractDurationSpecified,
          contractDurationIn,
          contractDurationNotIn,
          contractStartDateGreaterThan,
          contractStartDateLessThan,
          contractStartDateGreaterThanOrEqual,
          contractStartDateLessThanOrEqual,
          contractStartDateEquals,
          contractStartDateNotEquals,
          contractStartDateSpecified,
          contractStartDateIn,
          contractStartDateNotIn,
          createdDateGreaterThan,
          createdDateLessThan,
          createdDateGreaterThanOrEqual,
          createdDateLessThanOrEqual,
          createdDateEquals,
          createdDateNotEquals,
          createdDateSpecified,
          createdDateIn,
          createdDateNotIn,
          lastUpdateDateGreaterThan,
          lastUpdateDateLessThan,
          lastUpdateDateGreaterThanOrEqual,
          lastUpdateDateLessThanOrEqual,
          lastUpdateDateEquals,
          lastUpdateDateNotEquals,
          lastUpdateDateSpecified,
          lastUpdateDateIn,
          lastUpdateDateNotIn,
          interestRateGreaterThan,
          interestRateLessThan,
          interestRateGreaterThanOrEqual,
          interestRateLessThanOrEqual,
          interestRateEquals,
          interestRateNotEquals,
          interestRateSpecified,
          interestRateIn,
          interestRateNotIn,
          paybackRateGreaterThan,
          paybackRateLessThan,
          paybackRateGreaterThanOrEqual,
          paybackRateLessThanOrEqual,
          paybackRateEquals,
          paybackRateNotEquals,
          paybackRateSpecified,
          paybackRateIn,
          paybackRateNotIn,
          ctmFeeGreaterThan,
          ctmFeeLessThan,
          ctmFeeGreaterThanOrEqual,
          ctmFeeLessThanOrEqual,
          ctmFeeEquals,
          ctmFeeNotEquals,
          ctmFeeSpecified,
          ctmFeeIn,
          ctmFeeNotIn,
          mtcFeeGreaterThan,
          mtcFeeLessThan,
          mtcFeeGreaterThanOrEqual,
          mtcFeeLessThanOrEqual,
          mtcFeeEquals,
          mtcFeeNotEquals,
          mtcFeeSpecified,
          mtcFeeIn,
          mtcFeeNotIn,
          ctmCapGreaterThan,
          ctmCapLessThan,
          ctmCapGreaterThanOrEqual,
          ctmCapLessThanOrEqual,
          ctmCapEquals,
          ctmCapNotEquals,
          ctmCapSpecified,
          ctmCapIn,
          ctmCapNotIn,
          mtcCapGreaterThan,
          mtcCapLessThan,
          mtcCapGreaterThanOrEqual,
          mtcCapLessThanOrEqual,
          mtcCapEquals,
          mtcCapNotEquals,
          mtcCapSpecified,
          mtcCapIn,
          mtcCapNotIn,
          allowCtmEquals,
          allowCtmNotEquals,
          allowCtmSpecified,
          allowCtmIn,
          allowCtmNotIn,
          personIdGreaterThan,
          personIdLessThan,
          personIdGreaterThanOrEqual,
          personIdLessThanOrEqual,
          personIdEquals,
          personIdNotEquals,
          personIdSpecified,
          personIdIn,
          personIdNotIn,
          distinct,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LoanContract} loanContract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLoanContract(
      loanContract: LoanContract,
      options?: any
    ): AxiosPromise<LoanContract> {
      return localVarFp
        .createLoanContract(loanContract, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLoanContract(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteLoanContract(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {number} [loanAmountGreaterThan]
     * @param {number} [loanAmountLessThan]
     * @param {number} [loanAmountGreaterThanOrEqual]
     * @param {number} [loanAmountLessThanOrEqual]
     * @param {number} [loanAmountEquals]
     * @param {number} [loanAmountNotEquals]
     * @param {boolean} [loanAmountSpecified]
     * @param {Array<number>} [loanAmountIn]
     * @param {Array<number>} [loanAmountNotIn]
     * @param {number} [ownMoneyGreaterThan]
     * @param {number} [ownMoneyLessThan]
     * @param {number} [ownMoneyGreaterThanOrEqual]
     * @param {number} [ownMoneyLessThanOrEqual]
     * @param {number} [ownMoneyEquals]
     * @param {number} [ownMoneyNotEquals]
     * @param {boolean} [ownMoneySpecified]
     * @param {Array<number>} [ownMoneyIn]
     * @param {Array<number>} [ownMoneyNotIn]
     * @param {boolean} [approvedEquals]
     * @param {boolean} [approvedNotEquals]
     * @param {boolean} [approvedSpecified]
     * @param {Array<boolean>} [approvedIn]
     * @param {Array<boolean>} [approvedNotIn]
     * @param {number} [contractDurationGreaterThan]
     * @param {number} [contractDurationLessThan]
     * @param {number} [contractDurationGreaterThanOrEqual]
     * @param {number} [contractDurationLessThanOrEqual]
     * @param {number} [contractDurationEquals]
     * @param {number} [contractDurationNotEquals]
     * @param {boolean} [contractDurationSpecified]
     * @param {Array<number>} [contractDurationIn]
     * @param {Array<number>} [contractDurationNotIn]
     * @param {string} [contractStartDateGreaterThan]
     * @param {string} [contractStartDateLessThan]
     * @param {string} [contractStartDateGreaterThanOrEqual]
     * @param {string} [contractStartDateLessThanOrEqual]
     * @param {string} [contractStartDateEquals]
     * @param {string} [contractStartDateNotEquals]
     * @param {boolean} [contractStartDateSpecified]
     * @param {Array<string>} [contractStartDateIn]
     * @param {Array<string>} [contractStartDateNotIn]
     * @param {string} [createdDateGreaterThan]
     * @param {string} [createdDateLessThan]
     * @param {string} [createdDateGreaterThanOrEqual]
     * @param {string} [createdDateLessThanOrEqual]
     * @param {string} [createdDateEquals]
     * @param {string} [createdDateNotEquals]
     * @param {boolean} [createdDateSpecified]
     * @param {Array<string>} [createdDateIn]
     * @param {Array<string>} [createdDateNotIn]
     * @param {string} [lastUpdateDateGreaterThan]
     * @param {string} [lastUpdateDateLessThan]
     * @param {string} [lastUpdateDateGreaterThanOrEqual]
     * @param {string} [lastUpdateDateLessThanOrEqual]
     * @param {string} [lastUpdateDateEquals]
     * @param {string} [lastUpdateDateNotEquals]
     * @param {boolean} [lastUpdateDateSpecified]
     * @param {Array<string>} [lastUpdateDateIn]
     * @param {Array<string>} [lastUpdateDateNotIn]
     * @param {number} [interestRateGreaterThan]
     * @param {number} [interestRateLessThan]
     * @param {number} [interestRateGreaterThanOrEqual]
     * @param {number} [interestRateLessThanOrEqual]
     * @param {number} [interestRateEquals]
     * @param {number} [interestRateNotEquals]
     * @param {boolean} [interestRateSpecified]
     * @param {Array<number>} [interestRateIn]
     * @param {Array<number>} [interestRateNotIn]
     * @param {number} [paybackRateGreaterThan]
     * @param {number} [paybackRateLessThan]
     * @param {number} [paybackRateGreaterThanOrEqual]
     * @param {number} [paybackRateLessThanOrEqual]
     * @param {number} [paybackRateEquals]
     * @param {number} [paybackRateNotEquals]
     * @param {boolean} [paybackRateSpecified]
     * @param {Array<number>} [paybackRateIn]
     * @param {Array<number>} [paybackRateNotIn]
     * @param {number} [ctmFeeGreaterThan]
     * @param {number} [ctmFeeLessThan]
     * @param {number} [ctmFeeGreaterThanOrEqual]
     * @param {number} [ctmFeeLessThanOrEqual]
     * @param {number} [ctmFeeEquals]
     * @param {number} [ctmFeeNotEquals]
     * @param {boolean} [ctmFeeSpecified]
     * @param {Array<number>} [ctmFeeIn]
     * @param {Array<number>} [ctmFeeNotIn]
     * @param {number} [mtcFeeGreaterThan]
     * @param {number} [mtcFeeLessThan]
     * @param {number} [mtcFeeGreaterThanOrEqual]
     * @param {number} [mtcFeeLessThanOrEqual]
     * @param {number} [mtcFeeEquals]
     * @param {number} [mtcFeeNotEquals]
     * @param {boolean} [mtcFeeSpecified]
     * @param {Array<number>} [mtcFeeIn]
     * @param {Array<number>} [mtcFeeNotIn]
     * @param {number} [ctmCapGreaterThan]
     * @param {number} [ctmCapLessThan]
     * @param {number} [ctmCapGreaterThanOrEqual]
     * @param {number} [ctmCapLessThanOrEqual]
     * @param {number} [ctmCapEquals]
     * @param {number} [ctmCapNotEquals]
     * @param {boolean} [ctmCapSpecified]
     * @param {Array<number>} [ctmCapIn]
     * @param {Array<number>} [ctmCapNotIn]
     * @param {number} [mtcCapGreaterThan]
     * @param {number} [mtcCapLessThan]
     * @param {number} [mtcCapGreaterThanOrEqual]
     * @param {number} [mtcCapLessThanOrEqual]
     * @param {number} [mtcCapEquals]
     * @param {number} [mtcCapNotEquals]
     * @param {boolean} [mtcCapSpecified]
     * @param {Array<number>} [mtcCapIn]
     * @param {Array<number>} [mtcCapNotIn]
     * @param {boolean} [allowCtmEquals]
     * @param {boolean} [allowCtmNotEquals]
     * @param {boolean} [allowCtmSpecified]
     * @param {Array<boolean>} [allowCtmIn]
     * @param {Array<boolean>} [allowCtmNotIn]
     * @param {number} [personIdGreaterThan]
     * @param {number} [personIdLessThan]
     * @param {number} [personIdGreaterThanOrEqual]
     * @param {number} [personIdLessThanOrEqual]
     * @param {number} [personIdEquals]
     * @param {number} [personIdNotEquals]
     * @param {boolean} [personIdSpecified]
     * @param {Array<number>} [personIdIn]
     * @param {Array<number>} [personIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllLoanContracts(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loanAmountGreaterThan?: number,
      loanAmountLessThan?: number,
      loanAmountGreaterThanOrEqual?: number,
      loanAmountLessThanOrEqual?: number,
      loanAmountEquals?: number,
      loanAmountNotEquals?: number,
      loanAmountSpecified?: boolean,
      loanAmountIn?: Array<number>,
      loanAmountNotIn?: Array<number>,
      ownMoneyGreaterThan?: number,
      ownMoneyLessThan?: number,
      ownMoneyGreaterThanOrEqual?: number,
      ownMoneyLessThanOrEqual?: number,
      ownMoneyEquals?: number,
      ownMoneyNotEquals?: number,
      ownMoneySpecified?: boolean,
      ownMoneyIn?: Array<number>,
      ownMoneyNotIn?: Array<number>,
      approvedEquals?: boolean,
      approvedNotEquals?: boolean,
      approvedSpecified?: boolean,
      approvedIn?: Array<boolean>,
      approvedNotIn?: Array<boolean>,
      contractDurationGreaterThan?: number,
      contractDurationLessThan?: number,
      contractDurationGreaterThanOrEqual?: number,
      contractDurationLessThanOrEqual?: number,
      contractDurationEquals?: number,
      contractDurationNotEquals?: number,
      contractDurationSpecified?: boolean,
      contractDurationIn?: Array<number>,
      contractDurationNotIn?: Array<number>,
      contractStartDateGreaterThan?: string,
      contractStartDateLessThan?: string,
      contractStartDateGreaterThanOrEqual?: string,
      contractStartDateLessThanOrEqual?: string,
      contractStartDateEquals?: string,
      contractStartDateNotEquals?: string,
      contractStartDateSpecified?: boolean,
      contractStartDateIn?: Array<string>,
      contractStartDateNotIn?: Array<string>,
      createdDateGreaterThan?: string,
      createdDateLessThan?: string,
      createdDateGreaterThanOrEqual?: string,
      createdDateLessThanOrEqual?: string,
      createdDateEquals?: string,
      createdDateNotEquals?: string,
      createdDateSpecified?: boolean,
      createdDateIn?: Array<string>,
      createdDateNotIn?: Array<string>,
      lastUpdateDateGreaterThan?: string,
      lastUpdateDateLessThan?: string,
      lastUpdateDateGreaterThanOrEqual?: string,
      lastUpdateDateLessThanOrEqual?: string,
      lastUpdateDateEquals?: string,
      lastUpdateDateNotEquals?: string,
      lastUpdateDateSpecified?: boolean,
      lastUpdateDateIn?: Array<string>,
      lastUpdateDateNotIn?: Array<string>,
      interestRateGreaterThan?: number,
      interestRateLessThan?: number,
      interestRateGreaterThanOrEqual?: number,
      interestRateLessThanOrEqual?: number,
      interestRateEquals?: number,
      interestRateNotEquals?: number,
      interestRateSpecified?: boolean,
      interestRateIn?: Array<number>,
      interestRateNotIn?: Array<number>,
      paybackRateGreaterThan?: number,
      paybackRateLessThan?: number,
      paybackRateGreaterThanOrEqual?: number,
      paybackRateLessThanOrEqual?: number,
      paybackRateEquals?: number,
      paybackRateNotEquals?: number,
      paybackRateSpecified?: boolean,
      paybackRateIn?: Array<number>,
      paybackRateNotIn?: Array<number>,
      ctmFeeGreaterThan?: number,
      ctmFeeLessThan?: number,
      ctmFeeGreaterThanOrEqual?: number,
      ctmFeeLessThanOrEqual?: number,
      ctmFeeEquals?: number,
      ctmFeeNotEquals?: number,
      ctmFeeSpecified?: boolean,
      ctmFeeIn?: Array<number>,
      ctmFeeNotIn?: Array<number>,
      mtcFeeGreaterThan?: number,
      mtcFeeLessThan?: number,
      mtcFeeGreaterThanOrEqual?: number,
      mtcFeeLessThanOrEqual?: number,
      mtcFeeEquals?: number,
      mtcFeeNotEquals?: number,
      mtcFeeSpecified?: boolean,
      mtcFeeIn?: Array<number>,
      mtcFeeNotIn?: Array<number>,
      ctmCapGreaterThan?: number,
      ctmCapLessThan?: number,
      ctmCapGreaterThanOrEqual?: number,
      ctmCapLessThanOrEqual?: number,
      ctmCapEquals?: number,
      ctmCapNotEquals?: number,
      ctmCapSpecified?: boolean,
      ctmCapIn?: Array<number>,
      ctmCapNotIn?: Array<number>,
      mtcCapGreaterThan?: number,
      mtcCapLessThan?: number,
      mtcCapGreaterThanOrEqual?: number,
      mtcCapLessThanOrEqual?: number,
      mtcCapEquals?: number,
      mtcCapNotEquals?: number,
      mtcCapSpecified?: boolean,
      mtcCapIn?: Array<number>,
      mtcCapNotIn?: Array<number>,
      allowCtmEquals?: boolean,
      allowCtmNotEquals?: boolean,
      allowCtmSpecified?: boolean,
      allowCtmIn?: Array<boolean>,
      allowCtmNotIn?: Array<boolean>,
      personIdGreaterThan?: number,
      personIdLessThan?: number,
      personIdGreaterThanOrEqual?: number,
      personIdLessThanOrEqual?: number,
      personIdEquals?: number,
      personIdNotEquals?: number,
      personIdSpecified?: boolean,
      personIdIn?: Array<number>,
      personIdNotIn?: Array<number>,
      distinct?: boolean,
      options?: any
    ): AxiosPromise<Array<LoanContract>> {
      return localVarFp
        .getAllLoanContracts(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          loanAmountGreaterThan,
          loanAmountLessThan,
          loanAmountGreaterThanOrEqual,
          loanAmountLessThanOrEqual,
          loanAmountEquals,
          loanAmountNotEquals,
          loanAmountSpecified,
          loanAmountIn,
          loanAmountNotIn,
          ownMoneyGreaterThan,
          ownMoneyLessThan,
          ownMoneyGreaterThanOrEqual,
          ownMoneyLessThanOrEqual,
          ownMoneyEquals,
          ownMoneyNotEquals,
          ownMoneySpecified,
          ownMoneyIn,
          ownMoneyNotIn,
          approvedEquals,
          approvedNotEquals,
          approvedSpecified,
          approvedIn,
          approvedNotIn,
          contractDurationGreaterThan,
          contractDurationLessThan,
          contractDurationGreaterThanOrEqual,
          contractDurationLessThanOrEqual,
          contractDurationEquals,
          contractDurationNotEquals,
          contractDurationSpecified,
          contractDurationIn,
          contractDurationNotIn,
          contractStartDateGreaterThan,
          contractStartDateLessThan,
          contractStartDateGreaterThanOrEqual,
          contractStartDateLessThanOrEqual,
          contractStartDateEquals,
          contractStartDateNotEquals,
          contractStartDateSpecified,
          contractStartDateIn,
          contractStartDateNotIn,
          createdDateGreaterThan,
          createdDateLessThan,
          createdDateGreaterThanOrEqual,
          createdDateLessThanOrEqual,
          createdDateEquals,
          createdDateNotEquals,
          createdDateSpecified,
          createdDateIn,
          createdDateNotIn,
          lastUpdateDateGreaterThan,
          lastUpdateDateLessThan,
          lastUpdateDateGreaterThanOrEqual,
          lastUpdateDateLessThanOrEqual,
          lastUpdateDateEquals,
          lastUpdateDateNotEquals,
          lastUpdateDateSpecified,
          lastUpdateDateIn,
          lastUpdateDateNotIn,
          interestRateGreaterThan,
          interestRateLessThan,
          interestRateGreaterThanOrEqual,
          interestRateLessThanOrEqual,
          interestRateEquals,
          interestRateNotEquals,
          interestRateSpecified,
          interestRateIn,
          interestRateNotIn,
          paybackRateGreaterThan,
          paybackRateLessThan,
          paybackRateGreaterThanOrEqual,
          paybackRateLessThanOrEqual,
          paybackRateEquals,
          paybackRateNotEquals,
          paybackRateSpecified,
          paybackRateIn,
          paybackRateNotIn,
          ctmFeeGreaterThan,
          ctmFeeLessThan,
          ctmFeeGreaterThanOrEqual,
          ctmFeeLessThanOrEqual,
          ctmFeeEquals,
          ctmFeeNotEquals,
          ctmFeeSpecified,
          ctmFeeIn,
          ctmFeeNotIn,
          mtcFeeGreaterThan,
          mtcFeeLessThan,
          mtcFeeGreaterThanOrEqual,
          mtcFeeLessThanOrEqual,
          mtcFeeEquals,
          mtcFeeNotEquals,
          mtcFeeSpecified,
          mtcFeeIn,
          mtcFeeNotIn,
          ctmCapGreaterThan,
          ctmCapLessThan,
          ctmCapGreaterThanOrEqual,
          ctmCapLessThanOrEqual,
          ctmCapEquals,
          ctmCapNotEquals,
          ctmCapSpecified,
          ctmCapIn,
          ctmCapNotIn,
          mtcCapGreaterThan,
          mtcCapLessThan,
          mtcCapGreaterThanOrEqual,
          mtcCapLessThanOrEqual,
          mtcCapEquals,
          mtcCapNotEquals,
          mtcCapSpecified,
          mtcCapIn,
          mtcCapNotIn,
          allowCtmEquals,
          allowCtmNotEquals,
          allowCtmSpecified,
          allowCtmIn,
          allowCtmNotIn,
          personIdGreaterThan,
          personIdLessThan,
          personIdGreaterThanOrEqual,
          personIdLessThanOrEqual,
          personIdEquals,
          personIdNotEquals,
          personIdSpecified,
          personIdIn,
          personIdNotIn,
          distinct,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoanContract(id: number, options?: any): AxiosPromise<LoanContract> {
      return localVarFp
        .getLoanContract(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {LoanContract} loanContract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateLoanContract(
      id: number,
      loanContract: LoanContract,
      options?: any
    ): AxiosPromise<LoanContract> {
      return localVarFp
        .partialUpdateLoanContract(id, loanContract, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {LoanContract} loanContract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLoanContract(
      id: number,
      loanContract: LoanContract,
      options?: any
    ): AxiosPromise<LoanContract> {
      return localVarFp
        .updateLoanContract(id, loanContract, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * LoanContractResourceApi - object-oriented interface
 * @export
 * @class LoanContractResourceApi
 * @extends {BaseAPI}
 */
export class LoanContractResourceApi extends BaseAPI {
  /**
   *
   * @param {number} [idGreaterThan]
   * @param {number} [idLessThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idEquals]
   * @param {number} [idNotEquals]
   * @param {boolean} [idSpecified]
   * @param {Array<number>} [idIn]
   * @param {Array<number>} [idNotIn]
   * @param {number} [loanAmountGreaterThan]
   * @param {number} [loanAmountLessThan]
   * @param {number} [loanAmountGreaterThanOrEqual]
   * @param {number} [loanAmountLessThanOrEqual]
   * @param {number} [loanAmountEquals]
   * @param {number} [loanAmountNotEquals]
   * @param {boolean} [loanAmountSpecified]
   * @param {Array<number>} [loanAmountIn]
   * @param {Array<number>} [loanAmountNotIn]
   * @param {number} [ownMoneyGreaterThan]
   * @param {number} [ownMoneyLessThan]
   * @param {number} [ownMoneyGreaterThanOrEqual]
   * @param {number} [ownMoneyLessThanOrEqual]
   * @param {number} [ownMoneyEquals]
   * @param {number} [ownMoneyNotEquals]
   * @param {boolean} [ownMoneySpecified]
   * @param {Array<number>} [ownMoneyIn]
   * @param {Array<number>} [ownMoneyNotIn]
   * @param {boolean} [approvedEquals]
   * @param {boolean} [approvedNotEquals]
   * @param {boolean} [approvedSpecified]
   * @param {Array<boolean>} [approvedIn]
   * @param {Array<boolean>} [approvedNotIn]
   * @param {number} [contractDurationGreaterThan]
   * @param {number} [contractDurationLessThan]
   * @param {number} [contractDurationGreaterThanOrEqual]
   * @param {number} [contractDurationLessThanOrEqual]
   * @param {number} [contractDurationEquals]
   * @param {number} [contractDurationNotEquals]
   * @param {boolean} [contractDurationSpecified]
   * @param {Array<number>} [contractDurationIn]
   * @param {Array<number>} [contractDurationNotIn]
   * @param {string} [contractStartDateGreaterThan]
   * @param {string} [contractStartDateLessThan]
   * @param {string} [contractStartDateGreaterThanOrEqual]
   * @param {string} [contractStartDateLessThanOrEqual]
   * @param {string} [contractStartDateEquals]
   * @param {string} [contractStartDateNotEquals]
   * @param {boolean} [contractStartDateSpecified]
   * @param {Array<string>} [contractStartDateIn]
   * @param {Array<string>} [contractStartDateNotIn]
   * @param {string} [createdDateGreaterThan]
   * @param {string} [createdDateLessThan]
   * @param {string} [createdDateGreaterThanOrEqual]
   * @param {string} [createdDateLessThanOrEqual]
   * @param {string} [createdDateEquals]
   * @param {string} [createdDateNotEquals]
   * @param {boolean} [createdDateSpecified]
   * @param {Array<string>} [createdDateIn]
   * @param {Array<string>} [createdDateNotIn]
   * @param {string} [lastUpdateDateGreaterThan]
   * @param {string} [lastUpdateDateLessThan]
   * @param {string} [lastUpdateDateGreaterThanOrEqual]
   * @param {string} [lastUpdateDateLessThanOrEqual]
   * @param {string} [lastUpdateDateEquals]
   * @param {string} [lastUpdateDateNotEquals]
   * @param {boolean} [lastUpdateDateSpecified]
   * @param {Array<string>} [lastUpdateDateIn]
   * @param {Array<string>} [lastUpdateDateNotIn]
   * @param {number} [interestRateGreaterThan]
   * @param {number} [interestRateLessThan]
   * @param {number} [interestRateGreaterThanOrEqual]
   * @param {number} [interestRateLessThanOrEqual]
   * @param {number} [interestRateEquals]
   * @param {number} [interestRateNotEquals]
   * @param {boolean} [interestRateSpecified]
   * @param {Array<number>} [interestRateIn]
   * @param {Array<number>} [interestRateNotIn]
   * @param {number} [paybackRateGreaterThan]
   * @param {number} [paybackRateLessThan]
   * @param {number} [paybackRateGreaterThanOrEqual]
   * @param {number} [paybackRateLessThanOrEqual]
   * @param {number} [paybackRateEquals]
   * @param {number} [paybackRateNotEquals]
   * @param {boolean} [paybackRateSpecified]
   * @param {Array<number>} [paybackRateIn]
   * @param {Array<number>} [paybackRateNotIn]
   * @param {number} [ctmFeeGreaterThan]
   * @param {number} [ctmFeeLessThan]
   * @param {number} [ctmFeeGreaterThanOrEqual]
   * @param {number} [ctmFeeLessThanOrEqual]
   * @param {number} [ctmFeeEquals]
   * @param {number} [ctmFeeNotEquals]
   * @param {boolean} [ctmFeeSpecified]
   * @param {Array<number>} [ctmFeeIn]
   * @param {Array<number>} [ctmFeeNotIn]
   * @param {number} [mtcFeeGreaterThan]
   * @param {number} [mtcFeeLessThan]
   * @param {number} [mtcFeeGreaterThanOrEqual]
   * @param {number} [mtcFeeLessThanOrEqual]
   * @param {number} [mtcFeeEquals]
   * @param {number} [mtcFeeNotEquals]
   * @param {boolean} [mtcFeeSpecified]
   * @param {Array<number>} [mtcFeeIn]
   * @param {Array<number>} [mtcFeeNotIn]
   * @param {number} [ctmCapGreaterThan]
   * @param {number} [ctmCapLessThan]
   * @param {number} [ctmCapGreaterThanOrEqual]
   * @param {number} [ctmCapLessThanOrEqual]
   * @param {number} [ctmCapEquals]
   * @param {number} [ctmCapNotEquals]
   * @param {boolean} [ctmCapSpecified]
   * @param {Array<number>} [ctmCapIn]
   * @param {Array<number>} [ctmCapNotIn]
   * @param {number} [mtcCapGreaterThan]
   * @param {number} [mtcCapLessThan]
   * @param {number} [mtcCapGreaterThanOrEqual]
   * @param {number} [mtcCapLessThanOrEqual]
   * @param {number} [mtcCapEquals]
   * @param {number} [mtcCapNotEquals]
   * @param {boolean} [mtcCapSpecified]
   * @param {Array<number>} [mtcCapIn]
   * @param {Array<number>} [mtcCapNotIn]
   * @param {boolean} [allowCtmEquals]
   * @param {boolean} [allowCtmNotEquals]
   * @param {boolean} [allowCtmSpecified]
   * @param {Array<boolean>} [allowCtmIn]
   * @param {Array<boolean>} [allowCtmNotIn]
   * @param {number} [personIdGreaterThan]
   * @param {number} [personIdLessThan]
   * @param {number} [personIdGreaterThanOrEqual]
   * @param {number} [personIdLessThanOrEqual]
   * @param {number} [personIdEquals]
   * @param {number} [personIdNotEquals]
   * @param {boolean} [personIdSpecified]
   * @param {Array<number>} [personIdIn]
   * @param {Array<number>} [personIdNotIn]
   * @param {boolean} [distinct]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoanContractResourceApi
   */
  public countLoanContracts(
    idGreaterThan?: number,
    idLessThan?: number,
    idGreaterThanOrEqual?: number,
    idLessThanOrEqual?: number,
    idEquals?: number,
    idNotEquals?: number,
    idSpecified?: boolean,
    idIn?: Array<number>,
    idNotIn?: Array<number>,
    loanAmountGreaterThan?: number,
    loanAmountLessThan?: number,
    loanAmountGreaterThanOrEqual?: number,
    loanAmountLessThanOrEqual?: number,
    loanAmountEquals?: number,
    loanAmountNotEquals?: number,
    loanAmountSpecified?: boolean,
    loanAmountIn?: Array<number>,
    loanAmountNotIn?: Array<number>,
    ownMoneyGreaterThan?: number,
    ownMoneyLessThan?: number,
    ownMoneyGreaterThanOrEqual?: number,
    ownMoneyLessThanOrEqual?: number,
    ownMoneyEquals?: number,
    ownMoneyNotEquals?: number,
    ownMoneySpecified?: boolean,
    ownMoneyIn?: Array<number>,
    ownMoneyNotIn?: Array<number>,
    approvedEquals?: boolean,
    approvedNotEquals?: boolean,
    approvedSpecified?: boolean,
    approvedIn?: Array<boolean>,
    approvedNotIn?: Array<boolean>,
    contractDurationGreaterThan?: number,
    contractDurationLessThan?: number,
    contractDurationGreaterThanOrEqual?: number,
    contractDurationLessThanOrEqual?: number,
    contractDurationEquals?: number,
    contractDurationNotEquals?: number,
    contractDurationSpecified?: boolean,
    contractDurationIn?: Array<number>,
    contractDurationNotIn?: Array<number>,
    contractStartDateGreaterThan?: string,
    contractStartDateLessThan?: string,
    contractStartDateGreaterThanOrEqual?: string,
    contractStartDateLessThanOrEqual?: string,
    contractStartDateEquals?: string,
    contractStartDateNotEquals?: string,
    contractStartDateSpecified?: boolean,
    contractStartDateIn?: Array<string>,
    contractStartDateNotIn?: Array<string>,
    createdDateGreaterThan?: string,
    createdDateLessThan?: string,
    createdDateGreaterThanOrEqual?: string,
    createdDateLessThanOrEqual?: string,
    createdDateEquals?: string,
    createdDateNotEquals?: string,
    createdDateSpecified?: boolean,
    createdDateIn?: Array<string>,
    createdDateNotIn?: Array<string>,
    lastUpdateDateGreaterThan?: string,
    lastUpdateDateLessThan?: string,
    lastUpdateDateGreaterThanOrEqual?: string,
    lastUpdateDateLessThanOrEqual?: string,
    lastUpdateDateEquals?: string,
    lastUpdateDateNotEquals?: string,
    lastUpdateDateSpecified?: boolean,
    lastUpdateDateIn?: Array<string>,
    lastUpdateDateNotIn?: Array<string>,
    interestRateGreaterThan?: number,
    interestRateLessThan?: number,
    interestRateGreaterThanOrEqual?: number,
    interestRateLessThanOrEqual?: number,
    interestRateEquals?: number,
    interestRateNotEquals?: number,
    interestRateSpecified?: boolean,
    interestRateIn?: Array<number>,
    interestRateNotIn?: Array<number>,
    paybackRateGreaterThan?: number,
    paybackRateLessThan?: number,
    paybackRateGreaterThanOrEqual?: number,
    paybackRateLessThanOrEqual?: number,
    paybackRateEquals?: number,
    paybackRateNotEquals?: number,
    paybackRateSpecified?: boolean,
    paybackRateIn?: Array<number>,
    paybackRateNotIn?: Array<number>,
    ctmFeeGreaterThan?: number,
    ctmFeeLessThan?: number,
    ctmFeeGreaterThanOrEqual?: number,
    ctmFeeLessThanOrEqual?: number,
    ctmFeeEquals?: number,
    ctmFeeNotEquals?: number,
    ctmFeeSpecified?: boolean,
    ctmFeeIn?: Array<number>,
    ctmFeeNotIn?: Array<number>,
    mtcFeeGreaterThan?: number,
    mtcFeeLessThan?: number,
    mtcFeeGreaterThanOrEqual?: number,
    mtcFeeLessThanOrEqual?: number,
    mtcFeeEquals?: number,
    mtcFeeNotEquals?: number,
    mtcFeeSpecified?: boolean,
    mtcFeeIn?: Array<number>,
    mtcFeeNotIn?: Array<number>,
    ctmCapGreaterThan?: number,
    ctmCapLessThan?: number,
    ctmCapGreaterThanOrEqual?: number,
    ctmCapLessThanOrEqual?: number,
    ctmCapEquals?: number,
    ctmCapNotEquals?: number,
    ctmCapSpecified?: boolean,
    ctmCapIn?: Array<number>,
    ctmCapNotIn?: Array<number>,
    mtcCapGreaterThan?: number,
    mtcCapLessThan?: number,
    mtcCapGreaterThanOrEqual?: number,
    mtcCapLessThanOrEqual?: number,
    mtcCapEquals?: number,
    mtcCapNotEquals?: number,
    mtcCapSpecified?: boolean,
    mtcCapIn?: Array<number>,
    mtcCapNotIn?: Array<number>,
    allowCtmEquals?: boolean,
    allowCtmNotEquals?: boolean,
    allowCtmSpecified?: boolean,
    allowCtmIn?: Array<boolean>,
    allowCtmNotIn?: Array<boolean>,
    personIdGreaterThan?: number,
    personIdLessThan?: number,
    personIdGreaterThanOrEqual?: number,
    personIdLessThanOrEqual?: number,
    personIdEquals?: number,
    personIdNotEquals?: number,
    personIdSpecified?: boolean,
    personIdIn?: Array<number>,
    personIdNotIn?: Array<number>,
    distinct?: boolean,
    options?: AxiosRequestConfig
  ) {
    return LoanContractResourceApiFp(this.configuration)
      .countLoanContracts(
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        loanAmountGreaterThan,
        loanAmountLessThan,
        loanAmountGreaterThanOrEqual,
        loanAmountLessThanOrEqual,
        loanAmountEquals,
        loanAmountNotEquals,
        loanAmountSpecified,
        loanAmountIn,
        loanAmountNotIn,
        ownMoneyGreaterThan,
        ownMoneyLessThan,
        ownMoneyGreaterThanOrEqual,
        ownMoneyLessThanOrEqual,
        ownMoneyEquals,
        ownMoneyNotEquals,
        ownMoneySpecified,
        ownMoneyIn,
        ownMoneyNotIn,
        approvedEquals,
        approvedNotEquals,
        approvedSpecified,
        approvedIn,
        approvedNotIn,
        contractDurationGreaterThan,
        contractDurationLessThan,
        contractDurationGreaterThanOrEqual,
        contractDurationLessThanOrEqual,
        contractDurationEquals,
        contractDurationNotEquals,
        contractDurationSpecified,
        contractDurationIn,
        contractDurationNotIn,
        contractStartDateGreaterThan,
        contractStartDateLessThan,
        contractStartDateGreaterThanOrEqual,
        contractStartDateLessThanOrEqual,
        contractStartDateEquals,
        contractStartDateNotEquals,
        contractStartDateSpecified,
        contractStartDateIn,
        contractStartDateNotIn,
        createdDateGreaterThan,
        createdDateLessThan,
        createdDateGreaterThanOrEqual,
        createdDateLessThanOrEqual,
        createdDateEquals,
        createdDateNotEquals,
        createdDateSpecified,
        createdDateIn,
        createdDateNotIn,
        lastUpdateDateGreaterThan,
        lastUpdateDateLessThan,
        lastUpdateDateGreaterThanOrEqual,
        lastUpdateDateLessThanOrEqual,
        lastUpdateDateEquals,
        lastUpdateDateNotEquals,
        lastUpdateDateSpecified,
        lastUpdateDateIn,
        lastUpdateDateNotIn,
        interestRateGreaterThan,
        interestRateLessThan,
        interestRateGreaterThanOrEqual,
        interestRateLessThanOrEqual,
        interestRateEquals,
        interestRateNotEquals,
        interestRateSpecified,
        interestRateIn,
        interestRateNotIn,
        paybackRateGreaterThan,
        paybackRateLessThan,
        paybackRateGreaterThanOrEqual,
        paybackRateLessThanOrEqual,
        paybackRateEquals,
        paybackRateNotEquals,
        paybackRateSpecified,
        paybackRateIn,
        paybackRateNotIn,
        ctmFeeGreaterThan,
        ctmFeeLessThan,
        ctmFeeGreaterThanOrEqual,
        ctmFeeLessThanOrEqual,
        ctmFeeEquals,
        ctmFeeNotEquals,
        ctmFeeSpecified,
        ctmFeeIn,
        ctmFeeNotIn,
        mtcFeeGreaterThan,
        mtcFeeLessThan,
        mtcFeeGreaterThanOrEqual,
        mtcFeeLessThanOrEqual,
        mtcFeeEquals,
        mtcFeeNotEquals,
        mtcFeeSpecified,
        mtcFeeIn,
        mtcFeeNotIn,
        ctmCapGreaterThan,
        ctmCapLessThan,
        ctmCapGreaterThanOrEqual,
        ctmCapLessThanOrEqual,
        ctmCapEquals,
        ctmCapNotEquals,
        ctmCapSpecified,
        ctmCapIn,
        ctmCapNotIn,
        mtcCapGreaterThan,
        mtcCapLessThan,
        mtcCapGreaterThanOrEqual,
        mtcCapLessThanOrEqual,
        mtcCapEquals,
        mtcCapNotEquals,
        mtcCapSpecified,
        mtcCapIn,
        mtcCapNotIn,
        allowCtmEquals,
        allowCtmNotEquals,
        allowCtmSpecified,
        allowCtmIn,
        allowCtmNotIn,
        personIdGreaterThan,
        personIdLessThan,
        personIdGreaterThanOrEqual,
        personIdLessThanOrEqual,
        personIdEquals,
        personIdNotEquals,
        personIdSpecified,
        personIdIn,
        personIdNotIn,
        distinct,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LoanContract} loanContract
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoanContractResourceApi
   */
  public createLoanContract(
    loanContract: LoanContract,
    options?: AxiosRequestConfig
  ) {
    return LoanContractResourceApiFp(this.configuration)
      .createLoanContract(loanContract, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoanContractResourceApi
   */
  public deleteLoanContract(id: number, options?: AxiosRequestConfig) {
    return LoanContractResourceApiFp(this.configuration)
      .deleteLoanContract(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [idGreaterThan]
   * @param {number} [idLessThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idEquals]
   * @param {number} [idNotEquals]
   * @param {boolean} [idSpecified]
   * @param {Array<number>} [idIn]
   * @param {Array<number>} [idNotIn]
   * @param {number} [loanAmountGreaterThan]
   * @param {number} [loanAmountLessThan]
   * @param {number} [loanAmountGreaterThanOrEqual]
   * @param {number} [loanAmountLessThanOrEqual]
   * @param {number} [loanAmountEquals]
   * @param {number} [loanAmountNotEquals]
   * @param {boolean} [loanAmountSpecified]
   * @param {Array<number>} [loanAmountIn]
   * @param {Array<number>} [loanAmountNotIn]
   * @param {number} [ownMoneyGreaterThan]
   * @param {number} [ownMoneyLessThan]
   * @param {number} [ownMoneyGreaterThanOrEqual]
   * @param {number} [ownMoneyLessThanOrEqual]
   * @param {number} [ownMoneyEquals]
   * @param {number} [ownMoneyNotEquals]
   * @param {boolean} [ownMoneySpecified]
   * @param {Array<number>} [ownMoneyIn]
   * @param {Array<number>} [ownMoneyNotIn]
   * @param {boolean} [approvedEquals]
   * @param {boolean} [approvedNotEquals]
   * @param {boolean} [approvedSpecified]
   * @param {Array<boolean>} [approvedIn]
   * @param {Array<boolean>} [approvedNotIn]
   * @param {number} [contractDurationGreaterThan]
   * @param {number} [contractDurationLessThan]
   * @param {number} [contractDurationGreaterThanOrEqual]
   * @param {number} [contractDurationLessThanOrEqual]
   * @param {number} [contractDurationEquals]
   * @param {number} [contractDurationNotEquals]
   * @param {boolean} [contractDurationSpecified]
   * @param {Array<number>} [contractDurationIn]
   * @param {Array<number>} [contractDurationNotIn]
   * @param {string} [contractStartDateGreaterThan]
   * @param {string} [contractStartDateLessThan]
   * @param {string} [contractStartDateGreaterThanOrEqual]
   * @param {string} [contractStartDateLessThanOrEqual]
   * @param {string} [contractStartDateEquals]
   * @param {string} [contractStartDateNotEquals]
   * @param {boolean} [contractStartDateSpecified]
   * @param {Array<string>} [contractStartDateIn]
   * @param {Array<string>} [contractStartDateNotIn]
   * @param {string} [createdDateGreaterThan]
   * @param {string} [createdDateLessThan]
   * @param {string} [createdDateGreaterThanOrEqual]
   * @param {string} [createdDateLessThanOrEqual]
   * @param {string} [createdDateEquals]
   * @param {string} [createdDateNotEquals]
   * @param {boolean} [createdDateSpecified]
   * @param {Array<string>} [createdDateIn]
   * @param {Array<string>} [createdDateNotIn]
   * @param {string} [lastUpdateDateGreaterThan]
   * @param {string} [lastUpdateDateLessThan]
   * @param {string} [lastUpdateDateGreaterThanOrEqual]
   * @param {string} [lastUpdateDateLessThanOrEqual]
   * @param {string} [lastUpdateDateEquals]
   * @param {string} [lastUpdateDateNotEquals]
   * @param {boolean} [lastUpdateDateSpecified]
   * @param {Array<string>} [lastUpdateDateIn]
   * @param {Array<string>} [lastUpdateDateNotIn]
   * @param {number} [interestRateGreaterThan]
   * @param {number} [interestRateLessThan]
   * @param {number} [interestRateGreaterThanOrEqual]
   * @param {number} [interestRateLessThanOrEqual]
   * @param {number} [interestRateEquals]
   * @param {number} [interestRateNotEquals]
   * @param {boolean} [interestRateSpecified]
   * @param {Array<number>} [interestRateIn]
   * @param {Array<number>} [interestRateNotIn]
   * @param {number} [paybackRateGreaterThan]
   * @param {number} [paybackRateLessThan]
   * @param {number} [paybackRateGreaterThanOrEqual]
   * @param {number} [paybackRateLessThanOrEqual]
   * @param {number} [paybackRateEquals]
   * @param {number} [paybackRateNotEquals]
   * @param {boolean} [paybackRateSpecified]
   * @param {Array<number>} [paybackRateIn]
   * @param {Array<number>} [paybackRateNotIn]
   * @param {number} [ctmFeeGreaterThan]
   * @param {number} [ctmFeeLessThan]
   * @param {number} [ctmFeeGreaterThanOrEqual]
   * @param {number} [ctmFeeLessThanOrEqual]
   * @param {number} [ctmFeeEquals]
   * @param {number} [ctmFeeNotEquals]
   * @param {boolean} [ctmFeeSpecified]
   * @param {Array<number>} [ctmFeeIn]
   * @param {Array<number>} [ctmFeeNotIn]
   * @param {number} [mtcFeeGreaterThan]
   * @param {number} [mtcFeeLessThan]
   * @param {number} [mtcFeeGreaterThanOrEqual]
   * @param {number} [mtcFeeLessThanOrEqual]
   * @param {number} [mtcFeeEquals]
   * @param {number} [mtcFeeNotEquals]
   * @param {boolean} [mtcFeeSpecified]
   * @param {Array<number>} [mtcFeeIn]
   * @param {Array<number>} [mtcFeeNotIn]
   * @param {number} [ctmCapGreaterThan]
   * @param {number} [ctmCapLessThan]
   * @param {number} [ctmCapGreaterThanOrEqual]
   * @param {number} [ctmCapLessThanOrEqual]
   * @param {number} [ctmCapEquals]
   * @param {number} [ctmCapNotEquals]
   * @param {boolean} [ctmCapSpecified]
   * @param {Array<number>} [ctmCapIn]
   * @param {Array<number>} [ctmCapNotIn]
   * @param {number} [mtcCapGreaterThan]
   * @param {number} [mtcCapLessThan]
   * @param {number} [mtcCapGreaterThanOrEqual]
   * @param {number} [mtcCapLessThanOrEqual]
   * @param {number} [mtcCapEquals]
   * @param {number} [mtcCapNotEquals]
   * @param {boolean} [mtcCapSpecified]
   * @param {Array<number>} [mtcCapIn]
   * @param {Array<number>} [mtcCapNotIn]
   * @param {boolean} [allowCtmEquals]
   * @param {boolean} [allowCtmNotEquals]
   * @param {boolean} [allowCtmSpecified]
   * @param {Array<boolean>} [allowCtmIn]
   * @param {Array<boolean>} [allowCtmNotIn]
   * @param {number} [personIdGreaterThan]
   * @param {number} [personIdLessThan]
   * @param {number} [personIdGreaterThanOrEqual]
   * @param {number} [personIdLessThanOrEqual]
   * @param {number} [personIdEquals]
   * @param {number} [personIdNotEquals]
   * @param {boolean} [personIdSpecified]
   * @param {Array<number>} [personIdIn]
   * @param {Array<number>} [personIdNotIn]
   * @param {boolean} [distinct]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoanContractResourceApi
   */
  public getAllLoanContracts(
    idGreaterThan?: number,
    idLessThan?: number,
    idGreaterThanOrEqual?: number,
    idLessThanOrEqual?: number,
    idEquals?: number,
    idNotEquals?: number,
    idSpecified?: boolean,
    idIn?: Array<number>,
    idNotIn?: Array<number>,
    loanAmountGreaterThan?: number,
    loanAmountLessThan?: number,
    loanAmountGreaterThanOrEqual?: number,
    loanAmountLessThanOrEqual?: number,
    loanAmountEquals?: number,
    loanAmountNotEquals?: number,
    loanAmountSpecified?: boolean,
    loanAmountIn?: Array<number>,
    loanAmountNotIn?: Array<number>,
    ownMoneyGreaterThan?: number,
    ownMoneyLessThan?: number,
    ownMoneyGreaterThanOrEqual?: number,
    ownMoneyLessThanOrEqual?: number,
    ownMoneyEquals?: number,
    ownMoneyNotEquals?: number,
    ownMoneySpecified?: boolean,
    ownMoneyIn?: Array<number>,
    ownMoneyNotIn?: Array<number>,
    approvedEquals?: boolean,
    approvedNotEquals?: boolean,
    approvedSpecified?: boolean,
    approvedIn?: Array<boolean>,
    approvedNotIn?: Array<boolean>,
    contractDurationGreaterThan?: number,
    contractDurationLessThan?: number,
    contractDurationGreaterThanOrEqual?: number,
    contractDurationLessThanOrEqual?: number,
    contractDurationEquals?: number,
    contractDurationNotEquals?: number,
    contractDurationSpecified?: boolean,
    contractDurationIn?: Array<number>,
    contractDurationNotIn?: Array<number>,
    contractStartDateGreaterThan?: string,
    contractStartDateLessThan?: string,
    contractStartDateGreaterThanOrEqual?: string,
    contractStartDateLessThanOrEqual?: string,
    contractStartDateEquals?: string,
    contractStartDateNotEquals?: string,
    contractStartDateSpecified?: boolean,
    contractStartDateIn?: Array<string>,
    contractStartDateNotIn?: Array<string>,
    createdDateGreaterThan?: string,
    createdDateLessThan?: string,
    createdDateGreaterThanOrEqual?: string,
    createdDateLessThanOrEqual?: string,
    createdDateEquals?: string,
    createdDateNotEquals?: string,
    createdDateSpecified?: boolean,
    createdDateIn?: Array<string>,
    createdDateNotIn?: Array<string>,
    lastUpdateDateGreaterThan?: string,
    lastUpdateDateLessThan?: string,
    lastUpdateDateGreaterThanOrEqual?: string,
    lastUpdateDateLessThanOrEqual?: string,
    lastUpdateDateEquals?: string,
    lastUpdateDateNotEquals?: string,
    lastUpdateDateSpecified?: boolean,
    lastUpdateDateIn?: Array<string>,
    lastUpdateDateNotIn?: Array<string>,
    interestRateGreaterThan?: number,
    interestRateLessThan?: number,
    interestRateGreaterThanOrEqual?: number,
    interestRateLessThanOrEqual?: number,
    interestRateEquals?: number,
    interestRateNotEquals?: number,
    interestRateSpecified?: boolean,
    interestRateIn?: Array<number>,
    interestRateNotIn?: Array<number>,
    paybackRateGreaterThan?: number,
    paybackRateLessThan?: number,
    paybackRateGreaterThanOrEqual?: number,
    paybackRateLessThanOrEqual?: number,
    paybackRateEquals?: number,
    paybackRateNotEquals?: number,
    paybackRateSpecified?: boolean,
    paybackRateIn?: Array<number>,
    paybackRateNotIn?: Array<number>,
    ctmFeeGreaterThan?: number,
    ctmFeeLessThan?: number,
    ctmFeeGreaterThanOrEqual?: number,
    ctmFeeLessThanOrEqual?: number,
    ctmFeeEquals?: number,
    ctmFeeNotEquals?: number,
    ctmFeeSpecified?: boolean,
    ctmFeeIn?: Array<number>,
    ctmFeeNotIn?: Array<number>,
    mtcFeeGreaterThan?: number,
    mtcFeeLessThan?: number,
    mtcFeeGreaterThanOrEqual?: number,
    mtcFeeLessThanOrEqual?: number,
    mtcFeeEquals?: number,
    mtcFeeNotEquals?: number,
    mtcFeeSpecified?: boolean,
    mtcFeeIn?: Array<number>,
    mtcFeeNotIn?: Array<number>,
    ctmCapGreaterThan?: number,
    ctmCapLessThan?: number,
    ctmCapGreaterThanOrEqual?: number,
    ctmCapLessThanOrEqual?: number,
    ctmCapEquals?: number,
    ctmCapNotEquals?: number,
    ctmCapSpecified?: boolean,
    ctmCapIn?: Array<number>,
    ctmCapNotIn?: Array<number>,
    mtcCapGreaterThan?: number,
    mtcCapLessThan?: number,
    mtcCapGreaterThanOrEqual?: number,
    mtcCapLessThanOrEqual?: number,
    mtcCapEquals?: number,
    mtcCapNotEquals?: number,
    mtcCapSpecified?: boolean,
    mtcCapIn?: Array<number>,
    mtcCapNotIn?: Array<number>,
    allowCtmEquals?: boolean,
    allowCtmNotEquals?: boolean,
    allowCtmSpecified?: boolean,
    allowCtmIn?: Array<boolean>,
    allowCtmNotIn?: Array<boolean>,
    personIdGreaterThan?: number,
    personIdLessThan?: number,
    personIdGreaterThanOrEqual?: number,
    personIdLessThanOrEqual?: number,
    personIdEquals?: number,
    personIdNotEquals?: number,
    personIdSpecified?: boolean,
    personIdIn?: Array<number>,
    personIdNotIn?: Array<number>,
    distinct?: boolean,
    options?: AxiosRequestConfig
  ) {
    return LoanContractResourceApiFp(this.configuration)
      .getAllLoanContracts(
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        loanAmountGreaterThan,
        loanAmountLessThan,
        loanAmountGreaterThanOrEqual,
        loanAmountLessThanOrEqual,
        loanAmountEquals,
        loanAmountNotEquals,
        loanAmountSpecified,
        loanAmountIn,
        loanAmountNotIn,
        ownMoneyGreaterThan,
        ownMoneyLessThan,
        ownMoneyGreaterThanOrEqual,
        ownMoneyLessThanOrEqual,
        ownMoneyEquals,
        ownMoneyNotEquals,
        ownMoneySpecified,
        ownMoneyIn,
        ownMoneyNotIn,
        approvedEquals,
        approvedNotEquals,
        approvedSpecified,
        approvedIn,
        approvedNotIn,
        contractDurationGreaterThan,
        contractDurationLessThan,
        contractDurationGreaterThanOrEqual,
        contractDurationLessThanOrEqual,
        contractDurationEquals,
        contractDurationNotEquals,
        contractDurationSpecified,
        contractDurationIn,
        contractDurationNotIn,
        contractStartDateGreaterThan,
        contractStartDateLessThan,
        contractStartDateGreaterThanOrEqual,
        contractStartDateLessThanOrEqual,
        contractStartDateEquals,
        contractStartDateNotEquals,
        contractStartDateSpecified,
        contractStartDateIn,
        contractStartDateNotIn,
        createdDateGreaterThan,
        createdDateLessThan,
        createdDateGreaterThanOrEqual,
        createdDateLessThanOrEqual,
        createdDateEquals,
        createdDateNotEquals,
        createdDateSpecified,
        createdDateIn,
        createdDateNotIn,
        lastUpdateDateGreaterThan,
        lastUpdateDateLessThan,
        lastUpdateDateGreaterThanOrEqual,
        lastUpdateDateLessThanOrEqual,
        lastUpdateDateEquals,
        lastUpdateDateNotEquals,
        lastUpdateDateSpecified,
        lastUpdateDateIn,
        lastUpdateDateNotIn,
        interestRateGreaterThan,
        interestRateLessThan,
        interestRateGreaterThanOrEqual,
        interestRateLessThanOrEqual,
        interestRateEquals,
        interestRateNotEquals,
        interestRateSpecified,
        interestRateIn,
        interestRateNotIn,
        paybackRateGreaterThan,
        paybackRateLessThan,
        paybackRateGreaterThanOrEqual,
        paybackRateLessThanOrEqual,
        paybackRateEquals,
        paybackRateNotEquals,
        paybackRateSpecified,
        paybackRateIn,
        paybackRateNotIn,
        ctmFeeGreaterThan,
        ctmFeeLessThan,
        ctmFeeGreaterThanOrEqual,
        ctmFeeLessThanOrEqual,
        ctmFeeEquals,
        ctmFeeNotEquals,
        ctmFeeSpecified,
        ctmFeeIn,
        ctmFeeNotIn,
        mtcFeeGreaterThan,
        mtcFeeLessThan,
        mtcFeeGreaterThanOrEqual,
        mtcFeeLessThanOrEqual,
        mtcFeeEquals,
        mtcFeeNotEquals,
        mtcFeeSpecified,
        mtcFeeIn,
        mtcFeeNotIn,
        ctmCapGreaterThan,
        ctmCapLessThan,
        ctmCapGreaterThanOrEqual,
        ctmCapLessThanOrEqual,
        ctmCapEquals,
        ctmCapNotEquals,
        ctmCapSpecified,
        ctmCapIn,
        ctmCapNotIn,
        mtcCapGreaterThan,
        mtcCapLessThan,
        mtcCapGreaterThanOrEqual,
        mtcCapLessThanOrEqual,
        mtcCapEquals,
        mtcCapNotEquals,
        mtcCapSpecified,
        mtcCapIn,
        mtcCapNotIn,
        allowCtmEquals,
        allowCtmNotEquals,
        allowCtmSpecified,
        allowCtmIn,
        allowCtmNotIn,
        personIdGreaterThan,
        personIdLessThan,
        personIdGreaterThanOrEqual,
        personIdLessThanOrEqual,
        personIdEquals,
        personIdNotEquals,
        personIdSpecified,
        personIdIn,
        personIdNotIn,
        distinct,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoanContractResourceApi
   */
  public getLoanContract(id: number, options?: AxiosRequestConfig) {
    return LoanContractResourceApiFp(this.configuration)
      .getLoanContract(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {LoanContract} loanContract
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoanContractResourceApi
   */
  public partialUpdateLoanContract(
    id: number,
    loanContract: LoanContract,
    options?: AxiosRequestConfig
  ) {
    return LoanContractResourceApiFp(this.configuration)
      .partialUpdateLoanContract(id, loanContract, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {LoanContract} loanContract
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoanContractResourceApi
   */
  public updateLoanContract(
    id: number,
    loanContract: LoanContract,
    options?: AxiosRequestConfig
  ) {
    return LoanContractResourceApiFp(this.configuration)
      .updateLoanContract(id, loanContract, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * LocationResourceApi - axios parameter creator
 * @export
 */
export const LocationResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {Location} location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocation: async (
      location: Location,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'location' is not null or undefined
      assertParamExists("createLocation", "location", location);
      const localVarPath = `/api/locations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        location,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLocation: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteLocation", "id", id);
      const localVarPath = `/api/locations/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllLocations: async (
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/locations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocation: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getLocation", "id", id);
      const localVarPath = `/api/locations/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Location} location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateLocation: async (
      id: number,
      location: Location,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateLocation", "id", id);
      // verify required parameter 'location' is not null or undefined
      assertParamExists("partialUpdateLocation", "location", location);
      const localVarPath = `/api/locations/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        location,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Location} location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLocation: async (
      id: number,
      location: Location,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateLocation", "id", id);
      // verify required parameter 'location' is not null or undefined
      assertParamExists("updateLocation", "location", location);
      const localVarPath = `/api/locations/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        location,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LocationResourceApi - functional programming interface
 * @export
 */
export const LocationResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    LocationResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {Location} location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createLocation(
      location: Location,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createLocation(
        location,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteLocation(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLocation(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllLocations(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Location>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLocations(
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLocation(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLocation(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Location} location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateLocation(
      id: number,
      location: Location,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdateLocation(
          id,
          location,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Location} location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateLocation(
      id: number,
      location: Location,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocation(
        id,
        location,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * LocationResourceApi - factory interface
 * @export
 */
export const LocationResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LocationResourceApiFp(configuration);
  return {
    /**
     *
     * @param {Location} location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocation(location: Location, options?: any): AxiosPromise<Location> {
      return localVarFp
        .createLocation(location, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLocation(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteLocation(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllLocations(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<Array<Location>> {
      return localVarFp
        .getAllLocations(page, size, sort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocation(id: number, options?: any): AxiosPromise<Location> {
      return localVarFp
        .getLocation(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Location} location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateLocation(
      id: number,
      location: Location,
      options?: any
    ): AxiosPromise<Location> {
      return localVarFp
        .partialUpdateLocation(id, location, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Location} location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLocation(
      id: number,
      location: Location,
      options?: any
    ): AxiosPromise<Location> {
      return localVarFp
        .updateLocation(id, location, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * LocationResourceApi - object-oriented interface
 * @export
 * @class LocationResourceApi
 * @extends {BaseAPI}
 */
export class LocationResourceApi extends BaseAPI {
  /**
   *
   * @param {Location} location
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationResourceApi
   */
  public createLocation(location: Location, options?: AxiosRequestConfig) {
    return LocationResourceApiFp(this.configuration)
      .createLocation(location, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationResourceApi
   */
  public deleteLocation(id: number, options?: AxiosRequestConfig) {
    return LocationResourceApiFp(this.configuration)
      .deleteLocation(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationResourceApi
   */
  public getAllLocations(
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return LocationResourceApiFp(this.configuration)
      .getAllLocations(page, size, sort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationResourceApi
   */
  public getLocation(id: number, options?: AxiosRequestConfig) {
    return LocationResourceApiFp(this.configuration)
      .getLocation(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Location} location
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationResourceApi
   */
  public partialUpdateLocation(
    id: number,
    location: Location,
    options?: AxiosRequestConfig
  ) {
    return LocationResourceApiFp(this.configuration)
      .partialUpdateLocation(id, location, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Location} location
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationResourceApi
   */
  public updateLocation(
    id: number,
    location: Location,
    options?: AxiosRequestConfig
  ) {
    return LocationResourceApiFp(this.configuration)
      .updateLocation(id, location, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PaymentResourceApi - axios parameter creator
 * @export
 */
export const PaymentResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentRequestedDateGreaterThan]
     * @param {string} [paymentRequestedDateLessThan]
     * @param {string} [paymentRequestedDateGreaterThanOrEqual]
     * @param {string} [paymentRequestedDateLessThanOrEqual]
     * @param {string} [paymentRequestedDateEquals]
     * @param {string} [paymentRequestedDateNotEquals]
     * @param {boolean} [paymentRequestedDateSpecified]
     * @param {Array<string>} [paymentRequestedDateIn]
     * @param {Array<string>} [paymentRequestedDateNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [nonLoanMoneyReceivedGreaterThan]
     * @param {string} [nonLoanMoneyReceivedLessThan]
     * @param {string} [nonLoanMoneyReceivedGreaterThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedLessThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedEquals]
     * @param {string} [nonLoanMoneyReceivedNotEquals]
     * @param {boolean} [nonLoanMoneyReceivedSpecified]
     * @param {Array<string>} [nonLoanMoneyReceivedIn]
     * @param {Array<string>} [nonLoanMoneyReceivedNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {string} [coordinatesContains]
     * @param {string} [coordinatesDoesNotContain]
     * @param {string} [coordinatesEquals]
     * @param {string} [coordinatesNotEquals]
     * @param {boolean} [coordinatesSpecified]
     * @param {Array<string>} [coordinatesIn]
     * @param {Array<string>} [coordinatesNotIn]
     * @param {string} [remarkContains]
     * @param {string} [remarkDoesNotContain]
     * @param {string} [remarkEquals]
     * @param {string} [remarkNotEquals]
     * @param {boolean} [remarkSpecified]
     * @param {Array<string>} [remarkIn]
     * @param {Array<string>} [remarkNotIn]
     * @param {boolean} [deletedEquals]
     * @param {boolean} [deletedNotEquals]
     * @param {boolean} [deletedSpecified]
     * @param {Array<boolean>} [deletedIn]
     * @param {Array<boolean>} [deletedNotIn]
     * @param {number} [collateralGreaterThan]
     * @param {number} [collateralLessThan]
     * @param {number} [collateralGreaterThanOrEqual]
     * @param {number} [collateralLessThanOrEqual]
     * @param {number} [collateralEquals]
     * @param {number} [collateralNotEquals]
     * @param {boolean} [collateralSpecified]
     * @param {Array<number>} [collateralIn]
     * @param {Array<number>} [collateralNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkNotEquals]
     * @param {boolean} [networkSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkNotIn]
     * @param {string} [paymentExtidContains]
     * @param {string} [paymentExtidDoesNotContain]
     * @param {string} [paymentExtidEquals]
     * @param {string} [paymentExtidNotEquals]
     * @param {boolean} [paymentExtidSpecified]
     * @param {Array<string>} [paymentExtidIn]
     * @param {Array<string>} [paymentExtidNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [transactionIdGreaterThan]
     * @param {number} [transactionIdLessThan]
     * @param {number} [transactionIdGreaterThanOrEqual]
     * @param {number} [transactionIdLessThanOrEqual]
     * @param {number} [transactionIdEquals]
     * @param {number} [transactionIdNotEquals]
     * @param {boolean} [transactionIdSpecified]
     * @param {Array<number>} [transactionIdIn]
     * @param {Array<number>} [transactionIdNotIn]
     * @param {number} [saleIdGreaterThan]
     * @param {number} [saleIdLessThan]
     * @param {number} [saleIdGreaterThanOrEqual]
     * @param {number} [saleIdLessThanOrEqual]
     * @param {number} [saleIdEquals]
     * @param {number} [saleIdNotEquals]
     * @param {boolean} [saleIdSpecified]
     * @param {Array<number>} [saleIdIn]
     * @param {Array<number>} [saleIdNotIn]
     * @param {boolean} [distinct]
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countPayments: async (
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentRequestedDateGreaterThan?: string,
      paymentRequestedDateLessThan?: string,
      paymentRequestedDateGreaterThanOrEqual?: string,
      paymentRequestedDateLessThanOrEqual?: string,
      paymentRequestedDateEquals?: string,
      paymentRequestedDateNotEquals?: string,
      paymentRequestedDateSpecified?: boolean,
      paymentRequestedDateIn?: Array<string>,
      paymentRequestedDateNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      nonLoanMoneyReceivedGreaterThan?: string,
      nonLoanMoneyReceivedLessThan?: string,
      nonLoanMoneyReceivedGreaterThanOrEqual?: string,
      nonLoanMoneyReceivedLessThanOrEqual?: string,
      nonLoanMoneyReceivedEquals?: string,
      nonLoanMoneyReceivedNotEquals?: string,
      nonLoanMoneyReceivedSpecified?: boolean,
      nonLoanMoneyReceivedIn?: Array<string>,
      nonLoanMoneyReceivedNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      coordinatesContains?: string,
      coordinatesDoesNotContain?: string,
      coordinatesEquals?: string,
      coordinatesNotEquals?: string,
      coordinatesSpecified?: boolean,
      coordinatesIn?: Array<string>,
      coordinatesNotIn?: Array<string>,
      remarkContains?: string,
      remarkDoesNotContain?: string,
      remarkEquals?: string,
      remarkNotEquals?: string,
      remarkSpecified?: boolean,
      remarkIn?: Array<string>,
      remarkNotIn?: Array<string>,
      deletedEquals?: boolean,
      deletedNotEquals?: boolean,
      deletedSpecified?: boolean,
      deletedIn?: Array<boolean>,
      deletedNotIn?: Array<boolean>,
      collateralGreaterThan?: number,
      collateralLessThan?: number,
      collateralGreaterThanOrEqual?: number,
      collateralLessThanOrEqual?: number,
      collateralEquals?: number,
      collateralNotEquals?: number,
      collateralSpecified?: boolean,
      collateralIn?: Array<number>,
      collateralNotIn?: Array<number>,
      networkEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkSpecified?: boolean,
      networkIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentExtidContains?: string,
      paymentExtidDoesNotContain?: string,
      paymentExtidEquals?: string,
      paymentExtidNotEquals?: string,
      paymentExtidSpecified?: boolean,
      paymentExtidIn?: Array<string>,
      paymentExtidNotIn?: Array<string>,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      transactionIdGreaterThan?: number,
      transactionIdLessThan?: number,
      transactionIdGreaterThanOrEqual?: number,
      transactionIdLessThanOrEqual?: number,
      transactionIdEquals?: number,
      transactionIdNotEquals?: number,
      transactionIdSpecified?: boolean,
      transactionIdIn?: Array<number>,
      transactionIdNotIn?: Array<number>,
      saleIdGreaterThan?: number,
      saleIdLessThan?: number,
      saleIdGreaterThanOrEqual?: number,
      saleIdLessThanOrEqual?: number,
      saleIdEquals?: number,
      saleIdNotEquals?: number,
      saleIdSpecified?: boolean,
      saleIdIn?: Array<number>,
      saleIdNotIn?: Array<number>,
      distinct?: boolean,
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/payments/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (idGreaterThan !== undefined) {
        localVarQueryParameter["id.greaterThan"] = idGreaterThan;
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter["id.lessThan"] = idLessThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["id.greaterThanOrEqual"] = idGreaterThanOrEqual;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter["id.lessThanOrEqual"] = idLessThanOrEqual;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter["id.equals"] = idEquals;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter["id.notEquals"] = idNotEquals;
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter["id.specified"] = idSpecified;
      }

      if (idIn) {
        localVarQueryParameter["id.in"] = idIn;
      }

      if (idNotIn) {
        localVarQueryParameter["id.notIn"] = idNotIn;
      }

      if (paymentRequestedDateGreaterThan !== undefined) {
        localVarQueryParameter["paymentRequestedDate.greaterThan"] =
          (paymentRequestedDateGreaterThan as any) instanceof Date
            ? (paymentRequestedDateGreaterThan as any).toISOString()
            : paymentRequestedDateGreaterThan;
      }

      if (paymentRequestedDateLessThan !== undefined) {
        localVarQueryParameter["paymentRequestedDate.lessThan"] =
          (paymentRequestedDateLessThan as any) instanceof Date
            ? (paymentRequestedDateLessThan as any).toISOString()
            : paymentRequestedDateLessThan;
      }

      if (paymentRequestedDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paymentRequestedDate.greaterThanOrEqual"] =
          (paymentRequestedDateGreaterThanOrEqual as any) instanceof Date
            ? (paymentRequestedDateGreaterThanOrEqual as any).toISOString()
            : paymentRequestedDateGreaterThanOrEqual;
      }

      if (paymentRequestedDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["paymentRequestedDate.lessThanOrEqual"] =
          (paymentRequestedDateLessThanOrEqual as any) instanceof Date
            ? (paymentRequestedDateLessThanOrEqual as any).toISOString()
            : paymentRequestedDateLessThanOrEqual;
      }

      if (paymentRequestedDateEquals !== undefined) {
        localVarQueryParameter["paymentRequestedDate.equals"] =
          (paymentRequestedDateEquals as any) instanceof Date
            ? (paymentRequestedDateEquals as any).toISOString()
            : paymentRequestedDateEquals;
      }

      if (paymentRequestedDateNotEquals !== undefined) {
        localVarQueryParameter["paymentRequestedDate.notEquals"] =
          (paymentRequestedDateNotEquals as any) instanceof Date
            ? (paymentRequestedDateNotEquals as any).toISOString()
            : paymentRequestedDateNotEquals;
      }

      if (paymentRequestedDateSpecified !== undefined) {
        localVarQueryParameter["paymentRequestedDate.specified"] =
          paymentRequestedDateSpecified;
      }

      if (paymentRequestedDateIn) {
        localVarQueryParameter["paymentRequestedDate.in"] =
          paymentRequestedDateIn;
      }

      if (paymentRequestedDateNotIn) {
        localVarQueryParameter["paymentRequestedDate.notIn"] =
          paymentRequestedDateNotIn;
      }

      if (paymentDateGreaterThan !== undefined) {
        localVarQueryParameter["paymentDate.greaterThan"] =
          (paymentDateGreaterThan as any) instanceof Date
            ? (paymentDateGreaterThan as any).toISOString()
            : paymentDateGreaterThan;
      }

      if (paymentDateLessThan !== undefined) {
        localVarQueryParameter["paymentDate.lessThan"] =
          (paymentDateLessThan as any) instanceof Date
            ? (paymentDateLessThan as any).toISOString()
            : paymentDateLessThan;
      }

      if (paymentDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paymentDate.greaterThanOrEqual"] =
          (paymentDateGreaterThanOrEqual as any) instanceof Date
            ? (paymentDateGreaterThanOrEqual as any).toISOString()
            : paymentDateGreaterThanOrEqual;
      }

      if (paymentDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["paymentDate.lessThanOrEqual"] =
          (paymentDateLessThanOrEqual as any) instanceof Date
            ? (paymentDateLessThanOrEqual as any).toISOString()
            : paymentDateLessThanOrEqual;
      }

      if (paymentDateEquals !== undefined) {
        localVarQueryParameter["paymentDate.equals"] =
          (paymentDateEquals as any) instanceof Date
            ? (paymentDateEquals as any).toISOString()
            : paymentDateEquals;
      }

      if (paymentDateNotEquals !== undefined) {
        localVarQueryParameter["paymentDate.notEquals"] =
          (paymentDateNotEquals as any) instanceof Date
            ? (paymentDateNotEquals as any).toISOString()
            : paymentDateNotEquals;
      }

      if (paymentDateSpecified !== undefined) {
        localVarQueryParameter["paymentDate.specified"] = paymentDateSpecified;
      }

      if (paymentDateIn) {
        localVarQueryParameter["paymentDate.in"] = paymentDateIn;
      }

      if (paymentDateNotIn) {
        localVarQueryParameter["paymentDate.notIn"] = paymentDateNotIn;
      }

      if (nonLoanMoneyReceivedGreaterThan !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.greaterThan"] =
          (nonLoanMoneyReceivedGreaterThan as any) instanceof Date
            ? (nonLoanMoneyReceivedGreaterThan as any).toISOString()
            : nonLoanMoneyReceivedGreaterThan;
      }

      if (nonLoanMoneyReceivedLessThan !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.lessThan"] =
          (nonLoanMoneyReceivedLessThan as any) instanceof Date
            ? (nonLoanMoneyReceivedLessThan as any).toISOString()
            : nonLoanMoneyReceivedLessThan;
      }

      if (nonLoanMoneyReceivedGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.greaterThanOrEqual"] =
          (nonLoanMoneyReceivedGreaterThanOrEqual as any) instanceof Date
            ? (nonLoanMoneyReceivedGreaterThanOrEqual as any).toISOString()
            : nonLoanMoneyReceivedGreaterThanOrEqual;
      }

      if (nonLoanMoneyReceivedLessThanOrEqual !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.lessThanOrEqual"] =
          (nonLoanMoneyReceivedLessThanOrEqual as any) instanceof Date
            ? (nonLoanMoneyReceivedLessThanOrEqual as any).toISOString()
            : nonLoanMoneyReceivedLessThanOrEqual;
      }

      if (nonLoanMoneyReceivedEquals !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.equals"] =
          (nonLoanMoneyReceivedEquals as any) instanceof Date
            ? (nonLoanMoneyReceivedEquals as any).toISOString()
            : nonLoanMoneyReceivedEquals;
      }

      if (nonLoanMoneyReceivedNotEquals !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.notEquals"] =
          (nonLoanMoneyReceivedNotEquals as any) instanceof Date
            ? (nonLoanMoneyReceivedNotEquals as any).toISOString()
            : nonLoanMoneyReceivedNotEquals;
      }

      if (nonLoanMoneyReceivedSpecified !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.specified"] =
          nonLoanMoneyReceivedSpecified;
      }

      if (nonLoanMoneyReceivedIn) {
        localVarQueryParameter["nonLoanMoneyReceived.in"] =
          nonLoanMoneyReceivedIn;
      }

      if (nonLoanMoneyReceivedNotIn) {
        localVarQueryParameter["nonLoanMoneyReceived.notIn"] =
          nonLoanMoneyReceivedNotIn;
      }

      if (priceGreaterThan !== undefined) {
        localVarQueryParameter["price.greaterThan"] = priceGreaterThan;
      }

      if (priceLessThan !== undefined) {
        localVarQueryParameter["price.lessThan"] = priceLessThan;
      }

      if (priceGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["price.greaterThanOrEqual"] =
          priceGreaterThanOrEqual;
      }

      if (priceLessThanOrEqual !== undefined) {
        localVarQueryParameter["price.lessThanOrEqual"] = priceLessThanOrEqual;
      }

      if (priceEquals !== undefined) {
        localVarQueryParameter["price.equals"] = priceEquals;
      }

      if (priceNotEquals !== undefined) {
        localVarQueryParameter["price.notEquals"] = priceNotEquals;
      }

      if (priceSpecified !== undefined) {
        localVarQueryParameter["price.specified"] = priceSpecified;
      }

      if (priceIn) {
        localVarQueryParameter["price.in"] = priceIn;
      }

      if (priceNotIn) {
        localVarQueryParameter["price.notIn"] = priceNotIn;
      }

      if (paymentFromNameContains !== undefined) {
        localVarQueryParameter["paymentFromName.contains"] =
          paymentFromNameContains;
      }

      if (paymentFromNameDoesNotContain !== undefined) {
        localVarQueryParameter["paymentFromName.doesNotContain"] =
          paymentFromNameDoesNotContain;
      }

      if (paymentFromNameEquals !== undefined) {
        localVarQueryParameter["paymentFromName.equals"] =
          paymentFromNameEquals;
      }

      if (paymentFromNameNotEquals !== undefined) {
        localVarQueryParameter["paymentFromName.notEquals"] =
          paymentFromNameNotEquals;
      }

      if (paymentFromNameSpecified !== undefined) {
        localVarQueryParameter["paymentFromName.specified"] =
          paymentFromNameSpecified;
      }

      if (paymentFromNameIn) {
        localVarQueryParameter["paymentFromName.in"] = paymentFromNameIn;
      }

      if (paymentFromNameNotIn) {
        localVarQueryParameter["paymentFromName.notIn"] = paymentFromNameNotIn;
      }

      if (paymentToNameContains !== undefined) {
        localVarQueryParameter["paymentToName.contains"] =
          paymentToNameContains;
      }

      if (paymentToNameDoesNotContain !== undefined) {
        localVarQueryParameter["paymentToName.doesNotContain"] =
          paymentToNameDoesNotContain;
      }

      if (paymentToNameEquals !== undefined) {
        localVarQueryParameter["paymentToName.equals"] = paymentToNameEquals;
      }

      if (paymentToNameNotEquals !== undefined) {
        localVarQueryParameter["paymentToName.notEquals"] =
          paymentToNameNotEquals;
      }

      if (paymentToNameSpecified !== undefined) {
        localVarQueryParameter["paymentToName.specified"] =
          paymentToNameSpecified;
      }

      if (paymentToNameIn) {
        localVarQueryParameter["paymentToName.in"] = paymentToNameIn;
      }

      if (paymentToNameNotIn) {
        localVarQueryParameter["paymentToName.notIn"] = paymentToNameNotIn;
      }

      if (paymentFromMobileContains !== undefined) {
        localVarQueryParameter["paymentFromMobile.contains"] =
          paymentFromMobileContains;
      }

      if (paymentFromMobileDoesNotContain !== undefined) {
        localVarQueryParameter["paymentFromMobile.doesNotContain"] =
          paymentFromMobileDoesNotContain;
      }

      if (paymentFromMobileEquals !== undefined) {
        localVarQueryParameter["paymentFromMobile.equals"] =
          paymentFromMobileEquals;
      }

      if (paymentFromMobileNotEquals !== undefined) {
        localVarQueryParameter["paymentFromMobile.notEquals"] =
          paymentFromMobileNotEquals;
      }

      if (paymentFromMobileSpecified !== undefined) {
        localVarQueryParameter["paymentFromMobile.specified"] =
          paymentFromMobileSpecified;
      }

      if (paymentFromMobileIn) {
        localVarQueryParameter["paymentFromMobile.in"] = paymentFromMobileIn;
      }

      if (paymentFromMobileNotIn) {
        localVarQueryParameter["paymentFromMobile.notIn"] =
          paymentFromMobileNotIn;
      }

      if (paymentToMobileContains !== undefined) {
        localVarQueryParameter["paymentToMobile.contains"] =
          paymentToMobileContains;
      }

      if (paymentToMobileDoesNotContain !== undefined) {
        localVarQueryParameter["paymentToMobile.doesNotContain"] =
          paymentToMobileDoesNotContain;
      }

      if (paymentToMobileEquals !== undefined) {
        localVarQueryParameter["paymentToMobile.equals"] =
          paymentToMobileEquals;
      }

      if (paymentToMobileNotEquals !== undefined) {
        localVarQueryParameter["paymentToMobile.notEquals"] =
          paymentToMobileNotEquals;
      }

      if (paymentToMobileSpecified !== undefined) {
        localVarQueryParameter["paymentToMobile.specified"] =
          paymentToMobileSpecified;
      }

      if (paymentToMobileIn) {
        localVarQueryParameter["paymentToMobile.in"] = paymentToMobileIn;
      }

      if (paymentToMobileNotIn) {
        localVarQueryParameter["paymentToMobile.notIn"] = paymentToMobileNotIn;
      }

      if (coordinatesContains !== undefined) {
        localVarQueryParameter["coordinates.contains"] = coordinatesContains;
      }

      if (coordinatesDoesNotContain !== undefined) {
        localVarQueryParameter["coordinates.doesNotContain"] =
          coordinatesDoesNotContain;
      }

      if (coordinatesEquals !== undefined) {
        localVarQueryParameter["coordinates.equals"] = coordinatesEquals;
      }

      if (coordinatesNotEquals !== undefined) {
        localVarQueryParameter["coordinates.notEquals"] = coordinatesNotEquals;
      }

      if (coordinatesSpecified !== undefined) {
        localVarQueryParameter["coordinates.specified"] = coordinatesSpecified;
      }

      if (coordinatesIn) {
        localVarQueryParameter["coordinates.in"] = coordinatesIn;
      }

      if (coordinatesNotIn) {
        localVarQueryParameter["coordinates.notIn"] = coordinatesNotIn;
      }

      if (remarkContains !== undefined) {
        localVarQueryParameter["remark.contains"] = remarkContains;
      }

      if (remarkDoesNotContain !== undefined) {
        localVarQueryParameter["remark.doesNotContain"] = remarkDoesNotContain;
      }

      if (remarkEquals !== undefined) {
        localVarQueryParameter["remark.equals"] = remarkEquals;
      }

      if (remarkNotEquals !== undefined) {
        localVarQueryParameter["remark.notEquals"] = remarkNotEquals;
      }

      if (remarkSpecified !== undefined) {
        localVarQueryParameter["remark.specified"] = remarkSpecified;
      }

      if (remarkIn) {
        localVarQueryParameter["remark.in"] = remarkIn;
      }

      if (remarkNotIn) {
        localVarQueryParameter["remark.notIn"] = remarkNotIn;
      }

      if (deletedEquals !== undefined) {
        localVarQueryParameter["deleted.equals"] = deletedEquals;
      }

      if (deletedNotEquals !== undefined) {
        localVarQueryParameter["deleted.notEquals"] = deletedNotEquals;
      }

      if (deletedSpecified !== undefined) {
        localVarQueryParameter["deleted.specified"] = deletedSpecified;
      }

      if (deletedIn) {
        localVarQueryParameter["deleted.in"] = deletedIn;
      }

      if (deletedNotIn) {
        localVarQueryParameter["deleted.notIn"] = deletedNotIn;
      }

      if (collateralGreaterThan !== undefined) {
        localVarQueryParameter["collateral.greaterThan"] =
          collateralGreaterThan;
      }

      if (collateralLessThan !== undefined) {
        localVarQueryParameter["collateral.lessThan"] = collateralLessThan;
      }

      if (collateralGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["collateral.greaterThanOrEqual"] =
          collateralGreaterThanOrEqual;
      }

      if (collateralLessThanOrEqual !== undefined) {
        localVarQueryParameter["collateral.lessThanOrEqual"] =
          collateralLessThanOrEqual;
      }

      if (collateralEquals !== undefined) {
        localVarQueryParameter["collateral.equals"] = collateralEquals;
      }

      if (collateralNotEquals !== undefined) {
        localVarQueryParameter["collateral.notEquals"] = collateralNotEquals;
      }

      if (collateralSpecified !== undefined) {
        localVarQueryParameter["collateral.specified"] = collateralSpecified;
      }

      if (collateralIn) {
        localVarQueryParameter["collateral.in"] = collateralIn;
      }

      if (collateralNotIn) {
        localVarQueryParameter["collateral.notIn"] = collateralNotIn;
      }

      if (networkEquals !== undefined) {
        localVarQueryParameter["network.equals"] = networkEquals;
      }

      if (networkNotEquals !== undefined) {
        localVarQueryParameter["network.notEquals"] = networkNotEquals;
      }

      if (networkSpecified !== undefined) {
        localVarQueryParameter["network.specified"] = networkSpecified;
      }

      if (networkIn) {
        localVarQueryParameter["network.in"] = networkIn;
      }

      if (networkNotIn) {
        localVarQueryParameter["network.notIn"] = networkNotIn;
      }

      if (paymentExtidContains !== undefined) {
        localVarQueryParameter["paymentExtid.contains"] = paymentExtidContains;
      }

      if (paymentExtidDoesNotContain !== undefined) {
        localVarQueryParameter["paymentExtid.doesNotContain"] =
          paymentExtidDoesNotContain;
      }

      if (paymentExtidEquals !== undefined) {
        localVarQueryParameter["paymentExtid.equals"] = paymentExtidEquals;
      }

      if (paymentExtidNotEquals !== undefined) {
        localVarQueryParameter["paymentExtid.notEquals"] =
          paymentExtidNotEquals;
      }

      if (paymentExtidSpecified !== undefined) {
        localVarQueryParameter["paymentExtid.specified"] =
          paymentExtidSpecified;
      }

      if (paymentExtidIn) {
        localVarQueryParameter["paymentExtid.in"] = paymentExtidIn;
      }

      if (paymentExtidNotIn) {
        localVarQueryParameter["paymentExtid.notIn"] = paymentExtidNotIn;
      }

      if (paymentErroneousEquals !== undefined) {
        localVarQueryParameter["paymentErroneous.equals"] =
          paymentErroneousEquals;
      }

      if (paymentErroneousNotEquals !== undefined) {
        localVarQueryParameter["paymentErroneous.notEquals"] =
          paymentErroneousNotEquals;
      }

      if (paymentErroneousSpecified !== undefined) {
        localVarQueryParameter["paymentErroneous.specified"] =
          paymentErroneousSpecified;
      }

      if (paymentErroneousIn) {
        localVarQueryParameter["paymentErroneous.in"] = paymentErroneousIn;
      }

      if (paymentErroneousNotIn) {
        localVarQueryParameter["paymentErroneous.notIn"] =
          paymentErroneousNotIn;
      }

      if (paymentStatusMessageContains !== undefined) {
        localVarQueryParameter["paymentStatusMessage.contains"] =
          paymentStatusMessageContains;
      }

      if (paymentStatusMessageDoesNotContain !== undefined) {
        localVarQueryParameter["paymentStatusMessage.doesNotContain"] =
          paymentStatusMessageDoesNotContain;
      }

      if (paymentStatusMessageEquals !== undefined) {
        localVarQueryParameter["paymentStatusMessage.equals"] =
          paymentStatusMessageEquals;
      }

      if (paymentStatusMessageNotEquals !== undefined) {
        localVarQueryParameter["paymentStatusMessage.notEquals"] =
          paymentStatusMessageNotEquals;
      }

      if (paymentStatusMessageSpecified !== undefined) {
        localVarQueryParameter["paymentStatusMessage.specified"] =
          paymentStatusMessageSpecified;
      }

      if (paymentStatusMessageIn) {
        localVarQueryParameter["paymentStatusMessage.in"] =
          paymentStatusMessageIn;
      }

      if (paymentStatusMessageNotIn) {
        localVarQueryParameter["paymentStatusMessage.notIn"] =
          paymentStatusMessageNotIn;
      }

      if (paymentResponseContains !== undefined) {
        localVarQueryParameter["paymentResponse.contains"] =
          paymentResponseContains;
      }

      if (paymentResponseDoesNotContain !== undefined) {
        localVarQueryParameter["paymentResponse.doesNotContain"] =
          paymentResponseDoesNotContain;
      }

      if (paymentResponseEquals !== undefined) {
        localVarQueryParameter["paymentResponse.equals"] =
          paymentResponseEquals;
      }

      if (paymentResponseNotEquals !== undefined) {
        localVarQueryParameter["paymentResponse.notEquals"] =
          paymentResponseNotEquals;
      }

      if (paymentResponseSpecified !== undefined) {
        localVarQueryParameter["paymentResponse.specified"] =
          paymentResponseSpecified;
      }

      if (paymentResponseIn) {
        localVarQueryParameter["paymentResponse.in"] = paymentResponseIn;
      }

      if (paymentResponseNotIn) {
        localVarQueryParameter["paymentResponse.notIn"] = paymentResponseNotIn;
      }

      if (transactionIdGreaterThan !== undefined) {
        localVarQueryParameter["transactionId.greaterThan"] =
          transactionIdGreaterThan;
      }

      if (transactionIdLessThan !== undefined) {
        localVarQueryParameter["transactionId.lessThan"] =
          transactionIdLessThan;
      }

      if (transactionIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["transactionId.greaterThanOrEqual"] =
          transactionIdGreaterThanOrEqual;
      }

      if (transactionIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["transactionId.lessThanOrEqual"] =
          transactionIdLessThanOrEqual;
      }

      if (transactionIdEquals !== undefined) {
        localVarQueryParameter["transactionId.equals"] = transactionIdEquals;
      }

      if (transactionIdNotEquals !== undefined) {
        localVarQueryParameter["transactionId.notEquals"] =
          transactionIdNotEquals;
      }

      if (transactionIdSpecified !== undefined) {
        localVarQueryParameter["transactionId.specified"] =
          transactionIdSpecified;
      }

      if (transactionIdIn) {
        localVarQueryParameter["transactionId.in"] = transactionIdIn;
      }

      if (transactionIdNotIn) {
        localVarQueryParameter["transactionId.notIn"] = transactionIdNotIn;
      }

      if (saleIdGreaterThan !== undefined) {
        localVarQueryParameter["saleId.greaterThan"] = saleIdGreaterThan;
      }

      if (saleIdLessThan !== undefined) {
        localVarQueryParameter["saleId.lessThan"] = saleIdLessThan;
      }

      if (saleIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["saleId.greaterThanOrEqual"] =
          saleIdGreaterThanOrEqual;
      }

      if (saleIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["saleId.lessThanOrEqual"] =
          saleIdLessThanOrEqual;
      }

      if (saleIdEquals !== undefined) {
        localVarQueryParameter["saleId.equals"] = saleIdEquals;
      }

      if (saleIdNotEquals !== undefined) {
        localVarQueryParameter["saleId.notEquals"] = saleIdNotEquals;
      }

      if (saleIdSpecified !== undefined) {
        localVarQueryParameter["saleId.specified"] = saleIdSpecified;
      }

      if (saleIdIn) {
        localVarQueryParameter["saleId.in"] = saleIdIn;
      }

      if (saleIdNotIn) {
        localVarQueryParameter["saleId.notIn"] = saleIdNotIn;
      }

      if (distinct !== undefined) {
        localVarQueryParameter["distinct"] = distinct;
      }

      if (customerIdGreaterThan !== undefined) {
        localVarQueryParameter["customerId.greaterThan"] =
          customerIdGreaterThan;
      }

      if (customerIdLessThan !== undefined) {
        localVarQueryParameter["customerId.lessThan"] = customerIdLessThan;
      }

      if (customerIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["customerId.greaterThanOrEqual"] =
          customerIdGreaterThanOrEqual;
      }

      if (customerIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["customerId.lessThanOrEqual"] =
          customerIdLessThanOrEqual;
      }

      if (customerIdEquals !== undefined) {
        localVarQueryParameter["customerId.equals"] = customerIdEquals;
      }

      if (customerIdNotEquals !== undefined) {
        localVarQueryParameter["customerId.notEquals"] = customerIdNotEquals;
      }

      if (customerIdSpecified !== undefined) {
        localVarQueryParameter["customerId.specified"] = customerIdSpecified;
      }

      if (customerIdIn) {
        localVarQueryParameter["customerId.in"] = customerIdIn;
      }

      if (customerIdNotIn) {
        localVarQueryParameter["customerId.notIn"] = customerIdNotIn;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PaymentDTO} paymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayment: async (
      paymentDTO: PaymentDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'paymentDTO' is not null or undefined
      assertParamExists("createPayment", "paymentDTO", paymentDTO);
      const localVarPath = `/api/payments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        paymentDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentRequestedDateGreaterThan]
     * @param {string} [paymentRequestedDateLessThan]
     * @param {string} [paymentRequestedDateGreaterThanOrEqual]
     * @param {string} [paymentRequestedDateLessThanOrEqual]
     * @param {string} [paymentRequestedDateEquals]
     * @param {string} [paymentRequestedDateNotEquals]
     * @param {boolean} [paymentRequestedDateSpecified]
     * @param {Array<string>} [paymentRequestedDateIn]
     * @param {Array<string>} [paymentRequestedDateNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [nonLoanMoneyReceivedGreaterThan]
     * @param {string} [nonLoanMoneyReceivedLessThan]
     * @param {string} [nonLoanMoneyReceivedGreaterThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedLessThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedEquals]
     * @param {string} [nonLoanMoneyReceivedNotEquals]
     * @param {boolean} [nonLoanMoneyReceivedSpecified]
     * @param {Array<string>} [nonLoanMoneyReceivedIn]
     * @param {Array<string>} [nonLoanMoneyReceivedNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {string} [coordinatesContains]
     * @param {string} [coordinatesDoesNotContain]
     * @param {string} [coordinatesEquals]
     * @param {string} [coordinatesNotEquals]
     * @param {boolean} [coordinatesSpecified]
     * @param {Array<string>} [coordinatesIn]
     * @param {Array<string>} [coordinatesNotIn]
     * @param {string} [remarkContains]
     * @param {string} [remarkDoesNotContain]
     * @param {string} [remarkEquals]
     * @param {string} [remarkNotEquals]
     * @param {boolean} [remarkSpecified]
     * @param {Array<string>} [remarkIn]
     * @param {Array<string>} [remarkNotIn]
     * @param {boolean} [deletedEquals]
     * @param {boolean} [deletedNotEquals]
     * @param {boolean} [deletedSpecified]
     * @param {Array<boolean>} [deletedIn]
     * @param {Array<boolean>} [deletedNotIn]
     * @param {number} [collateralGreaterThan]
     * @param {number} [collateralLessThan]
     * @param {number} [collateralGreaterThanOrEqual]
     * @param {number} [collateralLessThanOrEqual]
     * @param {number} [collateralEquals]
     * @param {number} [collateralNotEquals]
     * @param {boolean} [collateralSpecified]
     * @param {Array<number>} [collateralIn]
     * @param {Array<number>} [collateralNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkNotEquals]
     * @param {boolean} [networkSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkNotIn]
     * @param {string} [paymentExtidContains]
     * @param {string} [paymentExtidDoesNotContain]
     * @param {string} [paymentExtidEquals]
     * @param {string} [paymentExtidNotEquals]
     * @param {boolean} [paymentExtidSpecified]
     * @param {Array<string>} [paymentExtidIn]
     * @param {Array<string>} [paymentExtidNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [transactionIdGreaterThan]
     * @param {number} [transactionIdLessThan]
     * @param {number} [transactionIdGreaterThanOrEqual]
     * @param {number} [transactionIdLessThanOrEqual]
     * @param {number} [transactionIdEquals]
     * @param {number} [transactionIdNotEquals]
     * @param {boolean} [transactionIdSpecified]
     * @param {Array<number>} [transactionIdIn]
     * @param {Array<number>} [transactionIdNotIn]
     * @param {number} [saleIdGreaterThan]
     * @param {number} [saleIdLessThan]
     * @param {number} [saleIdGreaterThanOrEqual]
     * @param {number} [saleIdLessThanOrEqual]
     * @param {number} [saleIdEquals]
     * @param {number} [saleIdNotEquals]
     * @param {boolean} [saleIdSpecified]
     * @param {Array<number>} [saleIdIn]
     * @param {Array<number>} [saleIdNotIn]
     * @param {boolean} [distinct]
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPayments: async (
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentRequestedDateGreaterThan?: string,
      paymentRequestedDateLessThan?: string,
      paymentRequestedDateGreaterThanOrEqual?: string,
      paymentRequestedDateLessThanOrEqual?: string,
      paymentRequestedDateEquals?: string,
      paymentRequestedDateNotEquals?: string,
      paymentRequestedDateSpecified?: boolean,
      paymentRequestedDateIn?: Array<string>,
      paymentRequestedDateNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      nonLoanMoneyReceivedGreaterThan?: string,
      nonLoanMoneyReceivedLessThan?: string,
      nonLoanMoneyReceivedGreaterThanOrEqual?: string,
      nonLoanMoneyReceivedLessThanOrEqual?: string,
      nonLoanMoneyReceivedEquals?: string,
      nonLoanMoneyReceivedNotEquals?: string,
      nonLoanMoneyReceivedSpecified?: boolean,
      nonLoanMoneyReceivedIn?: Array<string>,
      nonLoanMoneyReceivedNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      coordinatesContains?: string,
      coordinatesDoesNotContain?: string,
      coordinatesEquals?: string,
      coordinatesNotEquals?: string,
      coordinatesSpecified?: boolean,
      coordinatesIn?: Array<string>,
      coordinatesNotIn?: Array<string>,
      remarkContains?: string,
      remarkDoesNotContain?: string,
      remarkEquals?: string,
      remarkNotEquals?: string,
      remarkSpecified?: boolean,
      remarkIn?: Array<string>,
      remarkNotIn?: Array<string>,
      deletedEquals?: boolean,
      deletedNotEquals?: boolean,
      deletedSpecified?: boolean,
      deletedIn?: Array<boolean>,
      deletedNotIn?: Array<boolean>,
      collateralGreaterThan?: number,
      collateralLessThan?: number,
      collateralGreaterThanOrEqual?: number,
      collateralLessThanOrEqual?: number,
      collateralEquals?: number,
      collateralNotEquals?: number,
      collateralSpecified?: boolean,
      collateralIn?: Array<number>,
      collateralNotIn?: Array<number>,
      networkEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkSpecified?: boolean,
      networkIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentExtidContains?: string,
      paymentExtidDoesNotContain?: string,
      paymentExtidEquals?: string,
      paymentExtidNotEquals?: string,
      paymentExtidSpecified?: boolean,
      paymentExtidIn?: Array<string>,
      paymentExtidNotIn?: Array<string>,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      transactionIdGreaterThan?: number,
      transactionIdLessThan?: number,
      transactionIdGreaterThanOrEqual?: number,
      transactionIdLessThanOrEqual?: number,
      transactionIdEquals?: number,
      transactionIdNotEquals?: number,
      transactionIdSpecified?: boolean,
      transactionIdIn?: Array<number>,
      transactionIdNotIn?: Array<number>,
      saleIdGreaterThan?: number,
      saleIdLessThan?: number,
      saleIdGreaterThanOrEqual?: number,
      saleIdLessThanOrEqual?: number,
      saleIdEquals?: number,
      saleIdNotEquals?: number,
      saleIdSpecified?: boolean,
      saleIdIn?: Array<number>,
      saleIdNotIn?: Array<number>,
      distinct?: boolean,
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/payments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (idGreaterThan !== undefined) {
        localVarQueryParameter["id.greaterThan"] = idGreaterThan;
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter["id.lessThan"] = idLessThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["id.greaterThanOrEqual"] = idGreaterThanOrEqual;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter["id.lessThanOrEqual"] = idLessThanOrEqual;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter["id.equals"] = idEquals;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter["id.notEquals"] = idNotEquals;
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter["id.specified"] = idSpecified;
      }

      if (idIn) {
        localVarQueryParameter["id.in"] = idIn;
      }

      if (idNotIn) {
        localVarQueryParameter["id.notIn"] = idNotIn;
      }

      if (paymentRequestedDateGreaterThan !== undefined) {
        localVarQueryParameter["paymentRequestedDate.greaterThan"] =
          (paymentRequestedDateGreaterThan as any) instanceof Date
            ? (paymentRequestedDateGreaterThan as any).toISOString()
            : paymentRequestedDateGreaterThan;
      }

      if (paymentRequestedDateLessThan !== undefined) {
        localVarQueryParameter["paymentRequestedDate.lessThan"] =
          (paymentRequestedDateLessThan as any) instanceof Date
            ? (paymentRequestedDateLessThan as any).toISOString()
            : paymentRequestedDateLessThan;
      }

      if (paymentRequestedDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paymentRequestedDate.greaterThanOrEqual"] =
          (paymentRequestedDateGreaterThanOrEqual as any) instanceof Date
            ? (paymentRequestedDateGreaterThanOrEqual as any).toISOString()
            : paymentRequestedDateGreaterThanOrEqual;
      }

      if (paymentRequestedDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["paymentRequestedDate.lessThanOrEqual"] =
          (paymentRequestedDateLessThanOrEqual as any) instanceof Date
            ? (paymentRequestedDateLessThanOrEqual as any).toISOString()
            : paymentRequestedDateLessThanOrEqual;
      }

      if (paymentRequestedDateEquals !== undefined) {
        localVarQueryParameter["paymentRequestedDate.equals"] =
          (paymentRequestedDateEquals as any) instanceof Date
            ? (paymentRequestedDateEquals as any).toISOString()
            : paymentRequestedDateEquals;
      }

      if (paymentRequestedDateNotEquals !== undefined) {
        localVarQueryParameter["paymentRequestedDate.notEquals"] =
          (paymentRequestedDateNotEquals as any) instanceof Date
            ? (paymentRequestedDateNotEquals as any).toISOString()
            : paymentRequestedDateNotEquals;
      }

      if (paymentRequestedDateSpecified !== undefined) {
        localVarQueryParameter["paymentRequestedDate.specified"] =
          paymentRequestedDateSpecified;
      }

      if (paymentRequestedDateIn) {
        localVarQueryParameter["paymentRequestedDate.in"] =
          paymentRequestedDateIn;
      }

      if (paymentRequestedDateNotIn) {
        localVarQueryParameter["paymentRequestedDate.notIn"] =
          paymentRequestedDateNotIn;
      }

      if (paymentDateGreaterThan !== undefined) {
        localVarQueryParameter["paymentDate.greaterThan"] =
          (paymentDateGreaterThan as any) instanceof Date
            ? (paymentDateGreaterThan as any).toISOString()
            : paymentDateGreaterThan;
      }

      if (paymentDateLessThan !== undefined) {
        localVarQueryParameter["paymentDate.lessThan"] =
          (paymentDateLessThan as any) instanceof Date
            ? (paymentDateLessThan as any).toISOString()
            : paymentDateLessThan;
      }

      if (paymentDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paymentDate.greaterThanOrEqual"] =
          (paymentDateGreaterThanOrEqual as any) instanceof Date
            ? (paymentDateGreaterThanOrEqual as any).toISOString()
            : paymentDateGreaterThanOrEqual;
      }

      if (paymentDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["paymentDate.lessThanOrEqual"] =
          (paymentDateLessThanOrEqual as any) instanceof Date
            ? (paymentDateLessThanOrEqual as any).toISOString()
            : paymentDateLessThanOrEqual;
      }

      if (paymentDateEquals !== undefined) {
        localVarQueryParameter["paymentDate.equals"] =
          (paymentDateEquals as any) instanceof Date
            ? (paymentDateEquals as any).toISOString()
            : paymentDateEquals;
      }

      if (paymentDateNotEquals !== undefined) {
        localVarQueryParameter["paymentDate.notEquals"] =
          (paymentDateNotEquals as any) instanceof Date
            ? (paymentDateNotEquals as any).toISOString()
            : paymentDateNotEquals;
      }

      if (paymentDateSpecified !== undefined) {
        localVarQueryParameter["paymentDate.specified"] = paymentDateSpecified;
      }

      if (paymentDateIn) {
        localVarQueryParameter["paymentDate.in"] = paymentDateIn;
      }

      if (paymentDateNotIn) {
        localVarQueryParameter["paymentDate.notIn"] = paymentDateNotIn;
      }

      if (nonLoanMoneyReceivedGreaterThan !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.greaterThan"] =
          (nonLoanMoneyReceivedGreaterThan as any) instanceof Date
            ? (nonLoanMoneyReceivedGreaterThan as any).toISOString()
            : nonLoanMoneyReceivedGreaterThan;
      }

      if (nonLoanMoneyReceivedLessThan !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.lessThan"] =
          (nonLoanMoneyReceivedLessThan as any) instanceof Date
            ? (nonLoanMoneyReceivedLessThan as any).toISOString()
            : nonLoanMoneyReceivedLessThan;
      }

      if (nonLoanMoneyReceivedGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.greaterThanOrEqual"] =
          (nonLoanMoneyReceivedGreaterThanOrEqual as any) instanceof Date
            ? (nonLoanMoneyReceivedGreaterThanOrEqual as any).toISOString()
            : nonLoanMoneyReceivedGreaterThanOrEqual;
      }

      if (nonLoanMoneyReceivedLessThanOrEqual !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.lessThanOrEqual"] =
          (nonLoanMoneyReceivedLessThanOrEqual as any) instanceof Date
            ? (nonLoanMoneyReceivedLessThanOrEqual as any).toISOString()
            : nonLoanMoneyReceivedLessThanOrEqual;
      }

      if (nonLoanMoneyReceivedEquals !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.equals"] =
          (nonLoanMoneyReceivedEquals as any) instanceof Date
            ? (nonLoanMoneyReceivedEquals as any).toISOString()
            : nonLoanMoneyReceivedEquals;
      }

      if (nonLoanMoneyReceivedNotEquals !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.notEquals"] =
          (nonLoanMoneyReceivedNotEquals as any) instanceof Date
            ? (nonLoanMoneyReceivedNotEquals as any).toISOString()
            : nonLoanMoneyReceivedNotEquals;
      }

      if (nonLoanMoneyReceivedSpecified !== undefined) {
        localVarQueryParameter["nonLoanMoneyReceived.specified"] =
          nonLoanMoneyReceivedSpecified;
      }

      if (nonLoanMoneyReceivedIn) {
        localVarQueryParameter["nonLoanMoneyReceived.in"] =
          nonLoanMoneyReceivedIn;
      }

      if (nonLoanMoneyReceivedNotIn) {
        localVarQueryParameter["nonLoanMoneyReceived.notIn"] =
          nonLoanMoneyReceivedNotIn;
      }

      if (priceGreaterThan !== undefined) {
        localVarQueryParameter["price.greaterThan"] = priceGreaterThan;
      }

      if (priceLessThan !== undefined) {
        localVarQueryParameter["price.lessThan"] = priceLessThan;
      }

      if (priceGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["price.greaterThanOrEqual"] =
          priceGreaterThanOrEqual;
      }

      if (priceLessThanOrEqual !== undefined) {
        localVarQueryParameter["price.lessThanOrEqual"] = priceLessThanOrEqual;
      }

      if (priceEquals !== undefined) {
        localVarQueryParameter["price.equals"] = priceEquals;
      }

      if (priceNotEquals !== undefined) {
        localVarQueryParameter["price.notEquals"] = priceNotEquals;
      }

      if (priceSpecified !== undefined) {
        localVarQueryParameter["price.specified"] = priceSpecified;
      }

      if (priceIn) {
        localVarQueryParameter["price.in"] = priceIn;
      }

      if (priceNotIn) {
        localVarQueryParameter["price.notIn"] = priceNotIn;
      }

      if (paymentFromNameContains !== undefined) {
        localVarQueryParameter["paymentFromName.contains"] =
          paymentFromNameContains;
      }

      if (paymentFromNameDoesNotContain !== undefined) {
        localVarQueryParameter["paymentFromName.doesNotContain"] =
          paymentFromNameDoesNotContain;
      }

      if (paymentFromNameEquals !== undefined) {
        localVarQueryParameter["paymentFromName.equals"] =
          paymentFromNameEquals;
      }

      if (paymentFromNameNotEquals !== undefined) {
        localVarQueryParameter["paymentFromName.notEquals"] =
          paymentFromNameNotEquals;
      }

      if (paymentFromNameSpecified !== undefined) {
        localVarQueryParameter["paymentFromName.specified"] =
          paymentFromNameSpecified;
      }

      if (paymentFromNameIn) {
        localVarQueryParameter["paymentFromName.in"] = paymentFromNameIn;
      }

      if (paymentFromNameNotIn) {
        localVarQueryParameter["paymentFromName.notIn"] = paymentFromNameNotIn;
      }

      if (paymentToNameContains !== undefined) {
        localVarQueryParameter["paymentToName.contains"] =
          paymentToNameContains;
      }

      if (paymentToNameDoesNotContain !== undefined) {
        localVarQueryParameter["paymentToName.doesNotContain"] =
          paymentToNameDoesNotContain;
      }

      if (paymentToNameEquals !== undefined) {
        localVarQueryParameter["paymentToName.equals"] = paymentToNameEquals;
      }

      if (paymentToNameNotEquals !== undefined) {
        localVarQueryParameter["paymentToName.notEquals"] =
          paymentToNameNotEquals;
      }

      if (paymentToNameSpecified !== undefined) {
        localVarQueryParameter["paymentToName.specified"] =
          paymentToNameSpecified;
      }

      if (paymentToNameIn) {
        localVarQueryParameter["paymentToName.in"] = paymentToNameIn;
      }

      if (paymentToNameNotIn) {
        localVarQueryParameter["paymentToName.notIn"] = paymentToNameNotIn;
      }

      if (paymentFromMobileContains !== undefined) {
        localVarQueryParameter["paymentFromMobile.contains"] =
          paymentFromMobileContains;
      }

      if (paymentFromMobileDoesNotContain !== undefined) {
        localVarQueryParameter["paymentFromMobile.doesNotContain"] =
          paymentFromMobileDoesNotContain;
      }

      if (paymentFromMobileEquals !== undefined) {
        localVarQueryParameter["paymentFromMobile.equals"] =
          paymentFromMobileEquals;
      }

      if (paymentFromMobileNotEquals !== undefined) {
        localVarQueryParameter["paymentFromMobile.notEquals"] =
          paymentFromMobileNotEquals;
      }

      if (paymentFromMobileSpecified !== undefined) {
        localVarQueryParameter["paymentFromMobile.specified"] =
          paymentFromMobileSpecified;
      }

      if (paymentFromMobileIn) {
        localVarQueryParameter["paymentFromMobile.in"] = paymentFromMobileIn;
      }

      if (paymentFromMobileNotIn) {
        localVarQueryParameter["paymentFromMobile.notIn"] =
          paymentFromMobileNotIn;
      }

      if (paymentToMobileContains !== undefined) {
        localVarQueryParameter["paymentToMobile.contains"] =
          paymentToMobileContains;
      }

      if (paymentToMobileDoesNotContain !== undefined) {
        localVarQueryParameter["paymentToMobile.doesNotContain"] =
          paymentToMobileDoesNotContain;
      }

      if (paymentToMobileEquals !== undefined) {
        localVarQueryParameter["paymentToMobile.equals"] =
          paymentToMobileEquals;
      }

      if (paymentToMobileNotEquals !== undefined) {
        localVarQueryParameter["paymentToMobile.notEquals"] =
          paymentToMobileNotEquals;
      }

      if (paymentToMobileSpecified !== undefined) {
        localVarQueryParameter["paymentToMobile.specified"] =
          paymentToMobileSpecified;
      }

      if (paymentToMobileIn) {
        localVarQueryParameter["paymentToMobile.in"] = paymentToMobileIn;
      }

      if (paymentToMobileNotIn) {
        localVarQueryParameter["paymentToMobile.notIn"] = paymentToMobileNotIn;
      }

      if (coordinatesContains !== undefined) {
        localVarQueryParameter["coordinates.contains"] = coordinatesContains;
      }

      if (coordinatesDoesNotContain !== undefined) {
        localVarQueryParameter["coordinates.doesNotContain"] =
          coordinatesDoesNotContain;
      }

      if (coordinatesEquals !== undefined) {
        localVarQueryParameter["coordinates.equals"] = coordinatesEquals;
      }

      if (coordinatesNotEquals !== undefined) {
        localVarQueryParameter["coordinates.notEquals"] = coordinatesNotEquals;
      }

      if (coordinatesSpecified !== undefined) {
        localVarQueryParameter["coordinates.specified"] = coordinatesSpecified;
      }

      if (coordinatesIn) {
        localVarQueryParameter["coordinates.in"] = coordinatesIn;
      }

      if (coordinatesNotIn) {
        localVarQueryParameter["coordinates.notIn"] = coordinatesNotIn;
      }

      if (remarkContains !== undefined) {
        localVarQueryParameter["remark.contains"] = remarkContains;
      }

      if (remarkDoesNotContain !== undefined) {
        localVarQueryParameter["remark.doesNotContain"] = remarkDoesNotContain;
      }

      if (remarkEquals !== undefined) {
        localVarQueryParameter["remark.equals"] = remarkEquals;
      }

      if (remarkNotEquals !== undefined) {
        localVarQueryParameter["remark.notEquals"] = remarkNotEquals;
      }

      if (remarkSpecified !== undefined) {
        localVarQueryParameter["remark.specified"] = remarkSpecified;
      }

      if (remarkIn) {
        localVarQueryParameter["remark.in"] = remarkIn;
      }

      if (remarkNotIn) {
        localVarQueryParameter["remark.notIn"] = remarkNotIn;
      }

      if (deletedEquals !== undefined) {
        localVarQueryParameter["deleted.equals"] = deletedEquals;
      }

      if (deletedNotEquals !== undefined) {
        localVarQueryParameter["deleted.notEquals"] = deletedNotEquals;
      }

      if (deletedSpecified !== undefined) {
        localVarQueryParameter["deleted.specified"] = deletedSpecified;
      }

      if (deletedIn) {
        localVarQueryParameter["deleted.in"] = deletedIn;
      }

      if (deletedNotIn) {
        localVarQueryParameter["deleted.notIn"] = deletedNotIn;
      }

      if (collateralGreaterThan !== undefined) {
        localVarQueryParameter["collateral.greaterThan"] =
          collateralGreaterThan;
      }

      if (collateralLessThan !== undefined) {
        localVarQueryParameter["collateral.lessThan"] = collateralLessThan;
      }

      if (collateralGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["collateral.greaterThanOrEqual"] =
          collateralGreaterThanOrEqual;
      }

      if (collateralLessThanOrEqual !== undefined) {
        localVarQueryParameter["collateral.lessThanOrEqual"] =
          collateralLessThanOrEqual;
      }

      if (collateralEquals !== undefined) {
        localVarQueryParameter["collateral.equals"] = collateralEquals;
      }

      if (collateralNotEquals !== undefined) {
        localVarQueryParameter["collateral.notEquals"] = collateralNotEquals;
      }

      if (collateralSpecified !== undefined) {
        localVarQueryParameter["collateral.specified"] = collateralSpecified;
      }

      if (collateralIn) {
        localVarQueryParameter["collateral.in"] = collateralIn;
      }

      if (collateralNotIn) {
        localVarQueryParameter["collateral.notIn"] = collateralNotIn;
      }

      if (networkEquals !== undefined) {
        localVarQueryParameter["network.equals"] = networkEquals;
      }

      if (networkNotEquals !== undefined) {
        localVarQueryParameter["network.notEquals"] = networkNotEquals;
      }

      if (networkSpecified !== undefined) {
        localVarQueryParameter["network.specified"] = networkSpecified;
      }

      if (networkIn) {
        localVarQueryParameter["network.in"] = networkIn;
      }

      if (networkNotIn) {
        localVarQueryParameter["network.notIn"] = networkNotIn;
      }

      if (paymentExtidContains !== undefined) {
        localVarQueryParameter["paymentExtid.contains"] = paymentExtidContains;
      }

      if (paymentExtidDoesNotContain !== undefined) {
        localVarQueryParameter["paymentExtid.doesNotContain"] =
          paymentExtidDoesNotContain;
      }

      if (paymentExtidEquals !== undefined) {
        localVarQueryParameter["paymentExtid.equals"] = paymentExtidEquals;
      }

      if (paymentExtidNotEquals !== undefined) {
        localVarQueryParameter["paymentExtid.notEquals"] =
          paymentExtidNotEquals;
      }

      if (paymentExtidSpecified !== undefined) {
        localVarQueryParameter["paymentExtid.specified"] =
          paymentExtidSpecified;
      }

      if (paymentExtidIn) {
        localVarQueryParameter["paymentExtid.in"] = paymentExtidIn;
      }

      if (paymentExtidNotIn) {
        localVarQueryParameter["paymentExtid.notIn"] = paymentExtidNotIn;
      }

      if (paymentErroneousEquals !== undefined) {
        localVarQueryParameter["paymentErroneous.equals"] =
          paymentErroneousEquals;
      }

      if (paymentErroneousNotEquals !== undefined) {
        localVarQueryParameter["paymentErroneous.notEquals"] =
          paymentErroneousNotEquals;
      }

      if (paymentErroneousSpecified !== undefined) {
        localVarQueryParameter["paymentErroneous.specified"] =
          paymentErroneousSpecified;
      }

      if (paymentErroneousIn) {
        localVarQueryParameter["paymentErroneous.in"] = paymentErroneousIn;
      }

      if (paymentErroneousNotIn) {
        localVarQueryParameter["paymentErroneous.notIn"] =
          paymentErroneousNotIn;
      }

      if (paymentStatusMessageContains !== undefined) {
        localVarQueryParameter["paymentStatusMessage.contains"] =
          paymentStatusMessageContains;
      }

      if (paymentStatusMessageDoesNotContain !== undefined) {
        localVarQueryParameter["paymentStatusMessage.doesNotContain"] =
          paymentStatusMessageDoesNotContain;
      }

      if (paymentStatusMessageEquals !== undefined) {
        localVarQueryParameter["paymentStatusMessage.equals"] =
          paymentStatusMessageEquals;
      }

      if (paymentStatusMessageNotEquals !== undefined) {
        localVarQueryParameter["paymentStatusMessage.notEquals"] =
          paymentStatusMessageNotEquals;
      }

      if (paymentStatusMessageSpecified !== undefined) {
        localVarQueryParameter["paymentStatusMessage.specified"] =
          paymentStatusMessageSpecified;
      }

      if (paymentStatusMessageIn) {
        localVarQueryParameter["paymentStatusMessage.in"] =
          paymentStatusMessageIn;
      }

      if (paymentStatusMessageNotIn) {
        localVarQueryParameter["paymentStatusMessage.notIn"] =
          paymentStatusMessageNotIn;
      }

      if (paymentResponseContains !== undefined) {
        localVarQueryParameter["paymentResponse.contains"] =
          paymentResponseContains;
      }

      if (paymentResponseDoesNotContain !== undefined) {
        localVarQueryParameter["paymentResponse.doesNotContain"] =
          paymentResponseDoesNotContain;
      }

      if (paymentResponseEquals !== undefined) {
        localVarQueryParameter["paymentResponse.equals"] =
          paymentResponseEquals;
      }

      if (paymentResponseNotEquals !== undefined) {
        localVarQueryParameter["paymentResponse.notEquals"] =
          paymentResponseNotEquals;
      }

      if (paymentResponseSpecified !== undefined) {
        localVarQueryParameter["paymentResponse.specified"] =
          paymentResponseSpecified;
      }

      if (paymentResponseIn) {
        localVarQueryParameter["paymentResponse.in"] = paymentResponseIn;
      }

      if (paymentResponseNotIn) {
        localVarQueryParameter["paymentResponse.notIn"] = paymentResponseNotIn;
      }

      if (transactionIdGreaterThan !== undefined) {
        localVarQueryParameter["transactionId.greaterThan"] =
          transactionIdGreaterThan;
      }

      if (transactionIdLessThan !== undefined) {
        localVarQueryParameter["transactionId.lessThan"] =
          transactionIdLessThan;
      }

      if (transactionIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["transactionId.greaterThanOrEqual"] =
          transactionIdGreaterThanOrEqual;
      }

      if (transactionIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["transactionId.lessThanOrEqual"] =
          transactionIdLessThanOrEqual;
      }

      if (transactionIdEquals !== undefined) {
        localVarQueryParameter["transactionId.equals"] = transactionIdEquals;
      }

      if (transactionIdNotEquals !== undefined) {
        localVarQueryParameter["transactionId.notEquals"] =
          transactionIdNotEquals;
      }

      if (transactionIdSpecified !== undefined) {
        localVarQueryParameter["transactionId.specified"] =
          transactionIdSpecified;
      }

      if (transactionIdIn) {
        localVarQueryParameter["transactionId.in"] = transactionIdIn;
      }

      if (transactionIdNotIn) {
        localVarQueryParameter["transactionId.notIn"] = transactionIdNotIn;
      }

      if (saleIdGreaterThan !== undefined) {
        localVarQueryParameter["saleId.greaterThan"] = saleIdGreaterThan;
      }

      if (saleIdLessThan !== undefined) {
        localVarQueryParameter["saleId.lessThan"] = saleIdLessThan;
      }

      if (saleIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["saleId.greaterThanOrEqual"] =
          saleIdGreaterThanOrEqual;
      }

      if (saleIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["saleId.lessThanOrEqual"] =
          saleIdLessThanOrEqual;
      }

      if (saleIdEquals !== undefined) {
        localVarQueryParameter["saleId.equals"] = saleIdEquals;
      }

      if (saleIdNotEquals !== undefined) {
        localVarQueryParameter["saleId.notEquals"] = saleIdNotEquals;
      }

      if (saleIdSpecified !== undefined) {
        localVarQueryParameter["saleId.specified"] = saleIdSpecified;
      }

      if (saleIdIn) {
        localVarQueryParameter["saleId.in"] = saleIdIn;
      }

      if (saleIdNotIn) {
        localVarQueryParameter["saleId.notIn"] = saleIdNotIn;
      }

      if (distinct !== undefined) {
        localVarQueryParameter["distinct"] = distinct;
      }

      if (customerIdGreaterThan !== undefined) {
        localVarQueryParameter["customerId.greaterThan"] =
          customerIdGreaterThan;
      }

      if (customerIdLessThan !== undefined) {
        localVarQueryParameter["customerId.lessThan"] = customerIdLessThan;
      }

      if (customerIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["customerId.greaterThanOrEqual"] =
          customerIdGreaterThanOrEqual;
      }

      if (customerIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["customerId.lessThanOrEqual"] =
          customerIdLessThanOrEqual;
      }

      if (customerIdEquals !== undefined) {
        localVarQueryParameter["customerId.equals"] = customerIdEquals;
      }

      if (customerIdNotEquals !== undefined) {
        localVarQueryParameter["customerId.notEquals"] = customerIdNotEquals;
      }

      if (customerIdSpecified !== undefined) {
        localVarQueryParameter["customerId.specified"] = customerIdSpecified;
      }

      if (customerIdIn) {
        localVarQueryParameter["customerId.in"] = customerIdIn;
      }

      if (customerIdNotIn) {
        localVarQueryParameter["customerId.notIn"] = customerIdNotIn;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPayment", "id", id);
      const localVarPath = `/api/payments/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {PaymentDTO} paymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdatePayment: async (
      id: number,
      paymentDTO: PaymentDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdatePayment", "id", id);
      // verify required parameter 'paymentDTO' is not null or undefined
      assertParamExists("partialUpdatePayment", "paymentDTO", paymentDTO);
      const localVarPath = `/api/payments/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        paymentDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {PaymentDTO} paymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePayment: async (
      id: number,
      paymentDTO: PaymentDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updatePayment", "id", id);
      // verify required parameter 'paymentDTO' is not null or undefined
      assertParamExists("updatePayment", "paymentDTO", paymentDTO);
      const localVarPath = `/api/payments/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        paymentDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PaymentResourceApi - functional programming interface
 * @export
 */
export const PaymentResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PaymentResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentRequestedDateGreaterThan]
     * @param {string} [paymentRequestedDateLessThan]
     * @param {string} [paymentRequestedDateGreaterThanOrEqual]
     * @param {string} [paymentRequestedDateLessThanOrEqual]
     * @param {string} [paymentRequestedDateEquals]
     * @param {string} [paymentRequestedDateNotEquals]
     * @param {boolean} [paymentRequestedDateSpecified]
     * @param {Array<string>} [paymentRequestedDateIn]
     * @param {Array<string>} [paymentRequestedDateNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [nonLoanMoneyReceivedGreaterThan]
     * @param {string} [nonLoanMoneyReceivedLessThan]
     * @param {string} [nonLoanMoneyReceivedGreaterThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedLessThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedEquals]
     * @param {string} [nonLoanMoneyReceivedNotEquals]
     * @param {boolean} [nonLoanMoneyReceivedSpecified]
     * @param {Array<string>} [nonLoanMoneyReceivedIn]
     * @param {Array<string>} [nonLoanMoneyReceivedNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {string} [coordinatesContains]
     * @param {string} [coordinatesDoesNotContain]
     * @param {string} [coordinatesEquals]
     * @param {string} [coordinatesNotEquals]
     * @param {boolean} [coordinatesSpecified]
     * @param {Array<string>} [coordinatesIn]
     * @param {Array<string>} [coordinatesNotIn]
     * @param {string} [remarkContains]
     * @param {string} [remarkDoesNotContain]
     * @param {string} [remarkEquals]
     * @param {string} [remarkNotEquals]
     * @param {boolean} [remarkSpecified]
     * @param {Array<string>} [remarkIn]
     * @param {Array<string>} [remarkNotIn]
     * @param {boolean} [deletedEquals]
     * @param {boolean} [deletedNotEquals]
     * @param {boolean} [deletedSpecified]
     * @param {Array<boolean>} [deletedIn]
     * @param {Array<boolean>} [deletedNotIn]
     * @param {number} [collateralGreaterThan]
     * @param {number} [collateralLessThan]
     * @param {number} [collateralGreaterThanOrEqual]
     * @param {number} [collateralLessThanOrEqual]
     * @param {number} [collateralEquals]
     * @param {number} [collateralNotEquals]
     * @param {boolean} [collateralSpecified]
     * @param {Array<number>} [collateralIn]
     * @param {Array<number>} [collateralNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkNotEquals]
     * @param {boolean} [networkSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkNotIn]
     * @param {string} [paymentExtidContains]
     * @param {string} [paymentExtidDoesNotContain]
     * @param {string} [paymentExtidEquals]
     * @param {string} [paymentExtidNotEquals]
     * @param {boolean} [paymentExtidSpecified]
     * @param {Array<string>} [paymentExtidIn]
     * @param {Array<string>} [paymentExtidNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [transactionIdGreaterThan]
     * @param {number} [transactionIdLessThan]
     * @param {number} [transactionIdGreaterThanOrEqual]
     * @param {number} [transactionIdLessThanOrEqual]
     * @param {number} [transactionIdEquals]
     * @param {number} [transactionIdNotEquals]
     * @param {boolean} [transactionIdSpecified]
     * @param {Array<number>} [transactionIdIn]
     * @param {Array<number>} [transactionIdNotIn]
     * @param {number} [saleIdGreaterThan]
     * @param {number} [saleIdLessThan]
     * @param {number} [saleIdGreaterThanOrEqual]
     * @param {number} [saleIdLessThanOrEqual]
     * @param {number} [saleIdEquals]
     * @param {number} [saleIdNotEquals]
     * @param {boolean} [saleIdSpecified]
     * @param {Array<number>} [saleIdIn]
     * @param {Array<number>} [saleIdNotIn]
     * @param {boolean} [distinct]
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countPayments(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentRequestedDateGreaterThan?: string,
      paymentRequestedDateLessThan?: string,
      paymentRequestedDateGreaterThanOrEqual?: string,
      paymentRequestedDateLessThanOrEqual?: string,
      paymentRequestedDateEquals?: string,
      paymentRequestedDateNotEquals?: string,
      paymentRequestedDateSpecified?: boolean,
      paymentRequestedDateIn?: Array<string>,
      paymentRequestedDateNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      nonLoanMoneyReceivedGreaterThan?: string,
      nonLoanMoneyReceivedLessThan?: string,
      nonLoanMoneyReceivedGreaterThanOrEqual?: string,
      nonLoanMoneyReceivedLessThanOrEqual?: string,
      nonLoanMoneyReceivedEquals?: string,
      nonLoanMoneyReceivedNotEquals?: string,
      nonLoanMoneyReceivedSpecified?: boolean,
      nonLoanMoneyReceivedIn?: Array<string>,
      nonLoanMoneyReceivedNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      coordinatesContains?: string,
      coordinatesDoesNotContain?: string,
      coordinatesEquals?: string,
      coordinatesNotEquals?: string,
      coordinatesSpecified?: boolean,
      coordinatesIn?: Array<string>,
      coordinatesNotIn?: Array<string>,
      remarkContains?: string,
      remarkDoesNotContain?: string,
      remarkEquals?: string,
      remarkNotEquals?: string,
      remarkSpecified?: boolean,
      remarkIn?: Array<string>,
      remarkNotIn?: Array<string>,
      deletedEquals?: boolean,
      deletedNotEquals?: boolean,
      deletedSpecified?: boolean,
      deletedIn?: Array<boolean>,
      deletedNotIn?: Array<boolean>,
      collateralGreaterThan?: number,
      collateralLessThan?: number,
      collateralGreaterThanOrEqual?: number,
      collateralLessThanOrEqual?: number,
      collateralEquals?: number,
      collateralNotEquals?: number,
      collateralSpecified?: boolean,
      collateralIn?: Array<number>,
      collateralNotIn?: Array<number>,
      networkEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkSpecified?: boolean,
      networkIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentExtidContains?: string,
      paymentExtidDoesNotContain?: string,
      paymentExtidEquals?: string,
      paymentExtidNotEquals?: string,
      paymentExtidSpecified?: boolean,
      paymentExtidIn?: Array<string>,
      paymentExtidNotIn?: Array<string>,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      transactionIdGreaterThan?: number,
      transactionIdLessThan?: number,
      transactionIdGreaterThanOrEqual?: number,
      transactionIdLessThanOrEqual?: number,
      transactionIdEquals?: number,
      transactionIdNotEquals?: number,
      transactionIdSpecified?: boolean,
      transactionIdIn?: Array<number>,
      transactionIdNotIn?: Array<number>,
      saleIdGreaterThan?: number,
      saleIdLessThan?: number,
      saleIdGreaterThanOrEqual?: number,
      saleIdLessThanOrEqual?: number,
      saleIdEquals?: number,
      saleIdNotEquals?: number,
      saleIdSpecified?: boolean,
      saleIdIn?: Array<number>,
      saleIdNotIn?: Array<number>,
      distinct?: boolean,
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.countPayments(
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        paymentRequestedDateGreaterThan,
        paymentRequestedDateLessThan,
        paymentRequestedDateGreaterThanOrEqual,
        paymentRequestedDateLessThanOrEqual,
        paymentRequestedDateEquals,
        paymentRequestedDateNotEquals,
        paymentRequestedDateSpecified,
        paymentRequestedDateIn,
        paymentRequestedDateNotIn,
        paymentDateGreaterThan,
        paymentDateLessThan,
        paymentDateGreaterThanOrEqual,
        paymentDateLessThanOrEqual,
        paymentDateEquals,
        paymentDateNotEquals,
        paymentDateSpecified,
        paymentDateIn,
        paymentDateNotIn,
        nonLoanMoneyReceivedGreaterThan,
        nonLoanMoneyReceivedLessThan,
        nonLoanMoneyReceivedGreaterThanOrEqual,
        nonLoanMoneyReceivedLessThanOrEqual,
        nonLoanMoneyReceivedEquals,
        nonLoanMoneyReceivedNotEquals,
        nonLoanMoneyReceivedSpecified,
        nonLoanMoneyReceivedIn,
        nonLoanMoneyReceivedNotIn,
        priceGreaterThan,
        priceLessThan,
        priceGreaterThanOrEqual,
        priceLessThanOrEqual,
        priceEquals,
        priceNotEquals,
        priceSpecified,
        priceIn,
        priceNotIn,
        paymentFromNameContains,
        paymentFromNameDoesNotContain,
        paymentFromNameEquals,
        paymentFromNameNotEquals,
        paymentFromNameSpecified,
        paymentFromNameIn,
        paymentFromNameNotIn,
        paymentToNameContains,
        paymentToNameDoesNotContain,
        paymentToNameEquals,
        paymentToNameNotEquals,
        paymentToNameSpecified,
        paymentToNameIn,
        paymentToNameNotIn,
        paymentFromMobileContains,
        paymentFromMobileDoesNotContain,
        paymentFromMobileEquals,
        paymentFromMobileNotEquals,
        paymentFromMobileSpecified,
        paymentFromMobileIn,
        paymentFromMobileNotIn,
        paymentToMobileContains,
        paymentToMobileDoesNotContain,
        paymentToMobileEquals,
        paymentToMobileNotEquals,
        paymentToMobileSpecified,
        paymentToMobileIn,
        paymentToMobileNotIn,
        coordinatesContains,
        coordinatesDoesNotContain,
        coordinatesEquals,
        coordinatesNotEquals,
        coordinatesSpecified,
        coordinatesIn,
        coordinatesNotIn,
        remarkContains,
        remarkDoesNotContain,
        remarkEquals,
        remarkNotEquals,
        remarkSpecified,
        remarkIn,
        remarkNotIn,
        deletedEquals,
        deletedNotEquals,
        deletedSpecified,
        deletedIn,
        deletedNotIn,
        collateralGreaterThan,
        collateralLessThan,
        collateralGreaterThanOrEqual,
        collateralLessThanOrEqual,
        collateralEquals,
        collateralNotEquals,
        collateralSpecified,
        collateralIn,
        collateralNotIn,
        networkEquals,
        networkNotEquals,
        networkSpecified,
        networkIn,
        networkNotIn,
        paymentExtidContains,
        paymentExtidDoesNotContain,
        paymentExtidEquals,
        paymentExtidNotEquals,
        paymentExtidSpecified,
        paymentExtidIn,
        paymentExtidNotIn,
        paymentErroneousEquals,
        paymentErroneousNotEquals,
        paymentErroneousSpecified,
        paymentErroneousIn,
        paymentErroneousNotIn,
        paymentStatusMessageContains,
        paymentStatusMessageDoesNotContain,
        paymentStatusMessageEquals,
        paymentStatusMessageNotEquals,
        paymentStatusMessageSpecified,
        paymentStatusMessageIn,
        paymentStatusMessageNotIn,
        paymentResponseContains,
        paymentResponseDoesNotContain,
        paymentResponseEquals,
        paymentResponseNotEquals,
        paymentResponseSpecified,
        paymentResponseIn,
        paymentResponseNotIn,
        transactionIdGreaterThan,
        transactionIdLessThan,
        transactionIdGreaterThanOrEqual,
        transactionIdLessThanOrEqual,
        transactionIdEquals,
        transactionIdNotEquals,
        transactionIdSpecified,
        transactionIdIn,
        transactionIdNotIn,
        saleIdGreaterThan,
        saleIdLessThan,
        saleIdGreaterThanOrEqual,
        saleIdLessThanOrEqual,
        saleIdEquals,
        saleIdNotEquals,
        saleIdSpecified,
        saleIdIn,
        saleIdNotIn,
        distinct,
        customerIdGreaterThan,
        customerIdLessThan,
        customerIdGreaterThanOrEqual,
        customerIdLessThanOrEqual,
        customerIdEquals,
        customerIdNotEquals,
        customerIdSpecified,
        customerIdIn,
        customerIdNotIn,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {PaymentDTO} paymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPayment(
      paymentDTO: PaymentDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPayment(
        paymentDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentRequestedDateGreaterThan]
     * @param {string} [paymentRequestedDateLessThan]
     * @param {string} [paymentRequestedDateGreaterThanOrEqual]
     * @param {string} [paymentRequestedDateLessThanOrEqual]
     * @param {string} [paymentRequestedDateEquals]
     * @param {string} [paymentRequestedDateNotEquals]
     * @param {boolean} [paymentRequestedDateSpecified]
     * @param {Array<string>} [paymentRequestedDateIn]
     * @param {Array<string>} [paymentRequestedDateNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [nonLoanMoneyReceivedGreaterThan]
     * @param {string} [nonLoanMoneyReceivedLessThan]
     * @param {string} [nonLoanMoneyReceivedGreaterThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedLessThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedEquals]
     * @param {string} [nonLoanMoneyReceivedNotEquals]
     * @param {boolean} [nonLoanMoneyReceivedSpecified]
     * @param {Array<string>} [nonLoanMoneyReceivedIn]
     * @param {Array<string>} [nonLoanMoneyReceivedNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {string} [coordinatesContains]
     * @param {string} [coordinatesDoesNotContain]
     * @param {string} [coordinatesEquals]
     * @param {string} [coordinatesNotEquals]
     * @param {boolean} [coordinatesSpecified]
     * @param {Array<string>} [coordinatesIn]
     * @param {Array<string>} [coordinatesNotIn]
     * @param {string} [remarkContains]
     * @param {string} [remarkDoesNotContain]
     * @param {string} [remarkEquals]
     * @param {string} [remarkNotEquals]
     * @param {boolean} [remarkSpecified]
     * @param {Array<string>} [remarkIn]
     * @param {Array<string>} [remarkNotIn]
     * @param {boolean} [deletedEquals]
     * @param {boolean} [deletedNotEquals]
     * @param {boolean} [deletedSpecified]
     * @param {Array<boolean>} [deletedIn]
     * @param {Array<boolean>} [deletedNotIn]
     * @param {number} [collateralGreaterThan]
     * @param {number} [collateralLessThan]
     * @param {number} [collateralGreaterThanOrEqual]
     * @param {number} [collateralLessThanOrEqual]
     * @param {number} [collateralEquals]
     * @param {number} [collateralNotEquals]
     * @param {boolean} [collateralSpecified]
     * @param {Array<number>} [collateralIn]
     * @param {Array<number>} [collateralNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkNotEquals]
     * @param {boolean} [networkSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkNotIn]
     * @param {string} [paymentExtidContains]
     * @param {string} [paymentExtidDoesNotContain]
     * @param {string} [paymentExtidEquals]
     * @param {string} [paymentExtidNotEquals]
     * @param {boolean} [paymentExtidSpecified]
     * @param {Array<string>} [paymentExtidIn]
     * @param {Array<string>} [paymentExtidNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [transactionIdGreaterThan]
     * @param {number} [transactionIdLessThan]
     * @param {number} [transactionIdGreaterThanOrEqual]
     * @param {number} [transactionIdLessThanOrEqual]
     * @param {number} [transactionIdEquals]
     * @param {number} [transactionIdNotEquals]
     * @param {boolean} [transactionIdSpecified]
     * @param {Array<number>} [transactionIdIn]
     * @param {Array<number>} [transactionIdNotIn]
     * @param {number} [saleIdGreaterThan]
     * @param {number} [saleIdLessThan]
     * @param {number} [saleIdGreaterThanOrEqual]
     * @param {number} [saleIdLessThanOrEqual]
     * @param {number} [saleIdEquals]
     * @param {number} [saleIdNotEquals]
     * @param {boolean} [saleIdSpecified]
     * @param {Array<number>} [saleIdIn]
     * @param {Array<number>} [saleIdNotIn]
     * @param {boolean} [distinct]
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllPayments(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentRequestedDateGreaterThan?: string,
      paymentRequestedDateLessThan?: string,
      paymentRequestedDateGreaterThanOrEqual?: string,
      paymentRequestedDateLessThanOrEqual?: string,
      paymentRequestedDateEquals?: string,
      paymentRequestedDateNotEquals?: string,
      paymentRequestedDateSpecified?: boolean,
      paymentRequestedDateIn?: Array<string>,
      paymentRequestedDateNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      nonLoanMoneyReceivedGreaterThan?: string,
      nonLoanMoneyReceivedLessThan?: string,
      nonLoanMoneyReceivedGreaterThanOrEqual?: string,
      nonLoanMoneyReceivedLessThanOrEqual?: string,
      nonLoanMoneyReceivedEquals?: string,
      nonLoanMoneyReceivedNotEquals?: string,
      nonLoanMoneyReceivedSpecified?: boolean,
      nonLoanMoneyReceivedIn?: Array<string>,
      nonLoanMoneyReceivedNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      coordinatesContains?: string,
      coordinatesDoesNotContain?: string,
      coordinatesEquals?: string,
      coordinatesNotEquals?: string,
      coordinatesSpecified?: boolean,
      coordinatesIn?: Array<string>,
      coordinatesNotIn?: Array<string>,
      remarkContains?: string,
      remarkDoesNotContain?: string,
      remarkEquals?: string,
      remarkNotEquals?: string,
      remarkSpecified?: boolean,
      remarkIn?: Array<string>,
      remarkNotIn?: Array<string>,
      deletedEquals?: boolean,
      deletedNotEquals?: boolean,
      deletedSpecified?: boolean,
      deletedIn?: Array<boolean>,
      deletedNotIn?: Array<boolean>,
      collateralGreaterThan?: number,
      collateralLessThan?: number,
      collateralGreaterThanOrEqual?: number,
      collateralLessThanOrEqual?: number,
      collateralEquals?: number,
      collateralNotEquals?: number,
      collateralSpecified?: boolean,
      collateralIn?: Array<number>,
      collateralNotIn?: Array<number>,
      networkEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkSpecified?: boolean,
      networkIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentExtidContains?: string,
      paymentExtidDoesNotContain?: string,
      paymentExtidEquals?: string,
      paymentExtidNotEquals?: string,
      paymentExtidSpecified?: boolean,
      paymentExtidIn?: Array<string>,
      paymentExtidNotIn?: Array<string>,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      transactionIdGreaterThan?: number,
      transactionIdLessThan?: number,
      transactionIdGreaterThanOrEqual?: number,
      transactionIdLessThanOrEqual?: number,
      transactionIdEquals?: number,
      transactionIdNotEquals?: number,
      transactionIdSpecified?: boolean,
      transactionIdIn?: Array<number>,
      transactionIdNotIn?: Array<number>,
      saleIdGreaterThan?: number,
      saleIdLessThan?: number,
      saleIdGreaterThanOrEqual?: number,
      saleIdLessThanOrEqual?: number,
      saleIdEquals?: number,
      saleIdNotEquals?: number,
      saleIdSpecified?: boolean,
      saleIdIn?: Array<number>,
      saleIdNotIn?: Array<number>,
      distinct?: boolean,
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<PaymentDTO>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPayments(
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        paymentRequestedDateGreaterThan,
        paymentRequestedDateLessThan,
        paymentRequestedDateGreaterThanOrEqual,
        paymentRequestedDateLessThanOrEqual,
        paymentRequestedDateEquals,
        paymentRequestedDateNotEquals,
        paymentRequestedDateSpecified,
        paymentRequestedDateIn,
        paymentRequestedDateNotIn,
        paymentDateGreaterThan,
        paymentDateLessThan,
        paymentDateGreaterThanOrEqual,
        paymentDateLessThanOrEqual,
        paymentDateEquals,
        paymentDateNotEquals,
        paymentDateSpecified,
        paymentDateIn,
        paymentDateNotIn,
        nonLoanMoneyReceivedGreaterThan,
        nonLoanMoneyReceivedLessThan,
        nonLoanMoneyReceivedGreaterThanOrEqual,
        nonLoanMoneyReceivedLessThanOrEqual,
        nonLoanMoneyReceivedEquals,
        nonLoanMoneyReceivedNotEquals,
        nonLoanMoneyReceivedSpecified,
        nonLoanMoneyReceivedIn,
        nonLoanMoneyReceivedNotIn,
        priceGreaterThan,
        priceLessThan,
        priceGreaterThanOrEqual,
        priceLessThanOrEqual,
        priceEquals,
        priceNotEquals,
        priceSpecified,
        priceIn,
        priceNotIn,
        paymentFromNameContains,
        paymentFromNameDoesNotContain,
        paymentFromNameEquals,
        paymentFromNameNotEquals,
        paymentFromNameSpecified,
        paymentFromNameIn,
        paymentFromNameNotIn,
        paymentToNameContains,
        paymentToNameDoesNotContain,
        paymentToNameEquals,
        paymentToNameNotEquals,
        paymentToNameSpecified,
        paymentToNameIn,
        paymentToNameNotIn,
        paymentFromMobileContains,
        paymentFromMobileDoesNotContain,
        paymentFromMobileEquals,
        paymentFromMobileNotEquals,
        paymentFromMobileSpecified,
        paymentFromMobileIn,
        paymentFromMobileNotIn,
        paymentToMobileContains,
        paymentToMobileDoesNotContain,
        paymentToMobileEquals,
        paymentToMobileNotEquals,
        paymentToMobileSpecified,
        paymentToMobileIn,
        paymentToMobileNotIn,
        coordinatesContains,
        coordinatesDoesNotContain,
        coordinatesEquals,
        coordinatesNotEquals,
        coordinatesSpecified,
        coordinatesIn,
        coordinatesNotIn,
        remarkContains,
        remarkDoesNotContain,
        remarkEquals,
        remarkNotEquals,
        remarkSpecified,
        remarkIn,
        remarkNotIn,
        deletedEquals,
        deletedNotEquals,
        deletedSpecified,
        deletedIn,
        deletedNotIn,
        collateralGreaterThan,
        collateralLessThan,
        collateralGreaterThanOrEqual,
        collateralLessThanOrEqual,
        collateralEquals,
        collateralNotEquals,
        collateralSpecified,
        collateralIn,
        collateralNotIn,
        networkEquals,
        networkNotEquals,
        networkSpecified,
        networkIn,
        networkNotIn,
        paymentExtidContains,
        paymentExtidDoesNotContain,
        paymentExtidEquals,
        paymentExtidNotEquals,
        paymentExtidSpecified,
        paymentExtidIn,
        paymentExtidNotIn,
        paymentErroneousEquals,
        paymentErroneousNotEquals,
        paymentErroneousSpecified,
        paymentErroneousIn,
        paymentErroneousNotIn,
        paymentStatusMessageContains,
        paymentStatusMessageDoesNotContain,
        paymentStatusMessageEquals,
        paymentStatusMessageNotEquals,
        paymentStatusMessageSpecified,
        paymentStatusMessageIn,
        paymentStatusMessageNotIn,
        paymentResponseContains,
        paymentResponseDoesNotContain,
        paymentResponseEquals,
        paymentResponseNotEquals,
        paymentResponseSpecified,
        paymentResponseIn,
        paymentResponseNotIn,
        transactionIdGreaterThan,
        transactionIdLessThan,
        transactionIdGreaterThanOrEqual,
        transactionIdLessThanOrEqual,
        transactionIdEquals,
        transactionIdNotEquals,
        transactionIdSpecified,
        transactionIdIn,
        transactionIdNotIn,
        saleIdGreaterThan,
        saleIdLessThan,
        saleIdGreaterThanOrEqual,
        saleIdLessThanOrEqual,
        saleIdEquals,
        saleIdNotEquals,
        saleIdSpecified,
        saleIdIn,
        saleIdNotIn,
        distinct,
        customerIdGreaterThan,
        customerIdLessThan,
        customerIdGreaterThanOrEqual,
        customerIdLessThanOrEqual,
        customerIdEquals,
        customerIdNotEquals,
        customerIdSpecified,
        customerIdIn,
        customerIdNotIn,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPayment(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPayment(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {PaymentDTO} paymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdatePayment(
      id: number,
      paymentDTO: PaymentDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdatePayment(
          id,
          paymentDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {PaymentDTO} paymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePayment(
      id: number,
      paymentDTO: PaymentDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayment(
        id,
        paymentDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PaymentResourceApi - factory interface
 * @export
 */
export const PaymentResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PaymentResourceApiFp(configuration);
  return {
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentRequestedDateGreaterThan]
     * @param {string} [paymentRequestedDateLessThan]
     * @param {string} [paymentRequestedDateGreaterThanOrEqual]
     * @param {string} [paymentRequestedDateLessThanOrEqual]
     * @param {string} [paymentRequestedDateEquals]
     * @param {string} [paymentRequestedDateNotEquals]
     * @param {boolean} [paymentRequestedDateSpecified]
     * @param {Array<string>} [paymentRequestedDateIn]
     * @param {Array<string>} [paymentRequestedDateNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [nonLoanMoneyReceivedGreaterThan]
     * @param {string} [nonLoanMoneyReceivedLessThan]
     * @param {string} [nonLoanMoneyReceivedGreaterThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedLessThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedEquals]
     * @param {string} [nonLoanMoneyReceivedNotEquals]
     * @param {boolean} [nonLoanMoneyReceivedSpecified]
     * @param {Array<string>} [nonLoanMoneyReceivedIn]
     * @param {Array<string>} [nonLoanMoneyReceivedNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {string} [coordinatesContains]
     * @param {string} [coordinatesDoesNotContain]
     * @param {string} [coordinatesEquals]
     * @param {string} [coordinatesNotEquals]
     * @param {boolean} [coordinatesSpecified]
     * @param {Array<string>} [coordinatesIn]
     * @param {Array<string>} [coordinatesNotIn]
     * @param {string} [remarkContains]
     * @param {string} [remarkDoesNotContain]
     * @param {string} [remarkEquals]
     * @param {string} [remarkNotEquals]
     * @param {boolean} [remarkSpecified]
     * @param {Array<string>} [remarkIn]
     * @param {Array<string>} [remarkNotIn]
     * @param {boolean} [deletedEquals]
     * @param {boolean} [deletedNotEquals]
     * @param {boolean} [deletedSpecified]
     * @param {Array<boolean>} [deletedIn]
     * @param {Array<boolean>} [deletedNotIn]
     * @param {number} [collateralGreaterThan]
     * @param {number} [collateralLessThan]
     * @param {number} [collateralGreaterThanOrEqual]
     * @param {number} [collateralLessThanOrEqual]
     * @param {number} [collateralEquals]
     * @param {number} [collateralNotEquals]
     * @param {boolean} [collateralSpecified]
     * @param {Array<number>} [collateralIn]
     * @param {Array<number>} [collateralNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkNotEquals]
     * @param {boolean} [networkSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkNotIn]
     * @param {string} [paymentExtidContains]
     * @param {string} [paymentExtidDoesNotContain]
     * @param {string} [paymentExtidEquals]
     * @param {string} [paymentExtidNotEquals]
     * @param {boolean} [paymentExtidSpecified]
     * @param {Array<string>} [paymentExtidIn]
     * @param {Array<string>} [paymentExtidNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [transactionIdGreaterThan]
     * @param {number} [transactionIdLessThan]
     * @param {number} [transactionIdGreaterThanOrEqual]
     * @param {number} [transactionIdLessThanOrEqual]
     * @param {number} [transactionIdEquals]
     * @param {number} [transactionIdNotEquals]
     * @param {boolean} [transactionIdSpecified]
     * @param {Array<number>} [transactionIdIn]
     * @param {Array<number>} [transactionIdNotIn]
     * @param {number} [saleIdGreaterThan]
     * @param {number} [saleIdLessThan]
     * @param {number} [saleIdGreaterThanOrEqual]
     * @param {number} [saleIdLessThanOrEqual]
     * @param {number} [saleIdEquals]
     * @param {number} [saleIdNotEquals]
     * @param {boolean} [saleIdSpecified]
     * @param {Array<number>} [saleIdIn]
     * @param {Array<number>} [saleIdNotIn]
     * @param {boolean} [distinct]
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countPayments(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentRequestedDateGreaterThan?: string,
      paymentRequestedDateLessThan?: string,
      paymentRequestedDateGreaterThanOrEqual?: string,
      paymentRequestedDateLessThanOrEqual?: string,
      paymentRequestedDateEquals?: string,
      paymentRequestedDateNotEquals?: string,
      paymentRequestedDateSpecified?: boolean,
      paymentRequestedDateIn?: Array<string>,
      paymentRequestedDateNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      nonLoanMoneyReceivedGreaterThan?: string,
      nonLoanMoneyReceivedLessThan?: string,
      nonLoanMoneyReceivedGreaterThanOrEqual?: string,
      nonLoanMoneyReceivedLessThanOrEqual?: string,
      nonLoanMoneyReceivedEquals?: string,
      nonLoanMoneyReceivedNotEquals?: string,
      nonLoanMoneyReceivedSpecified?: boolean,
      nonLoanMoneyReceivedIn?: Array<string>,
      nonLoanMoneyReceivedNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      coordinatesContains?: string,
      coordinatesDoesNotContain?: string,
      coordinatesEquals?: string,
      coordinatesNotEquals?: string,
      coordinatesSpecified?: boolean,
      coordinatesIn?: Array<string>,
      coordinatesNotIn?: Array<string>,
      remarkContains?: string,
      remarkDoesNotContain?: string,
      remarkEquals?: string,
      remarkNotEquals?: string,
      remarkSpecified?: boolean,
      remarkIn?: Array<string>,
      remarkNotIn?: Array<string>,
      deletedEquals?: boolean,
      deletedNotEquals?: boolean,
      deletedSpecified?: boolean,
      deletedIn?: Array<boolean>,
      deletedNotIn?: Array<boolean>,
      collateralGreaterThan?: number,
      collateralLessThan?: number,
      collateralGreaterThanOrEqual?: number,
      collateralLessThanOrEqual?: number,
      collateralEquals?: number,
      collateralNotEquals?: number,
      collateralSpecified?: boolean,
      collateralIn?: Array<number>,
      collateralNotIn?: Array<number>,
      networkEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkSpecified?: boolean,
      networkIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentExtidContains?: string,
      paymentExtidDoesNotContain?: string,
      paymentExtidEquals?: string,
      paymentExtidNotEquals?: string,
      paymentExtidSpecified?: boolean,
      paymentExtidIn?: Array<string>,
      paymentExtidNotIn?: Array<string>,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      transactionIdGreaterThan?: number,
      transactionIdLessThan?: number,
      transactionIdGreaterThanOrEqual?: number,
      transactionIdLessThanOrEqual?: number,
      transactionIdEquals?: number,
      transactionIdNotEquals?: number,
      transactionIdSpecified?: boolean,
      transactionIdIn?: Array<number>,
      transactionIdNotIn?: Array<number>,
      saleIdGreaterThan?: number,
      saleIdLessThan?: number,
      saleIdGreaterThanOrEqual?: number,
      saleIdLessThanOrEqual?: number,
      saleIdEquals?: number,
      saleIdNotEquals?: number,
      saleIdSpecified?: boolean,
      saleIdIn?: Array<number>,
      saleIdNotIn?: Array<number>,
      distinct?: boolean,
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .countPayments(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          paymentRequestedDateGreaterThan,
          paymentRequestedDateLessThan,
          paymentRequestedDateGreaterThanOrEqual,
          paymentRequestedDateLessThanOrEqual,
          paymentRequestedDateEquals,
          paymentRequestedDateNotEquals,
          paymentRequestedDateSpecified,
          paymentRequestedDateIn,
          paymentRequestedDateNotIn,
          paymentDateGreaterThan,
          paymentDateLessThan,
          paymentDateGreaterThanOrEqual,
          paymentDateLessThanOrEqual,
          paymentDateEquals,
          paymentDateNotEquals,
          paymentDateSpecified,
          paymentDateIn,
          paymentDateNotIn,
          nonLoanMoneyReceivedGreaterThan,
          nonLoanMoneyReceivedLessThan,
          nonLoanMoneyReceivedGreaterThanOrEqual,
          nonLoanMoneyReceivedLessThanOrEqual,
          nonLoanMoneyReceivedEquals,
          nonLoanMoneyReceivedNotEquals,
          nonLoanMoneyReceivedSpecified,
          nonLoanMoneyReceivedIn,
          nonLoanMoneyReceivedNotIn,
          priceGreaterThan,
          priceLessThan,
          priceGreaterThanOrEqual,
          priceLessThanOrEqual,
          priceEquals,
          priceNotEquals,
          priceSpecified,
          priceIn,
          priceNotIn,
          paymentFromNameContains,
          paymentFromNameDoesNotContain,
          paymentFromNameEquals,
          paymentFromNameNotEquals,
          paymentFromNameSpecified,
          paymentFromNameIn,
          paymentFromNameNotIn,
          paymentToNameContains,
          paymentToNameDoesNotContain,
          paymentToNameEquals,
          paymentToNameNotEquals,
          paymentToNameSpecified,
          paymentToNameIn,
          paymentToNameNotIn,
          paymentFromMobileContains,
          paymentFromMobileDoesNotContain,
          paymentFromMobileEquals,
          paymentFromMobileNotEquals,
          paymentFromMobileSpecified,
          paymentFromMobileIn,
          paymentFromMobileNotIn,
          paymentToMobileContains,
          paymentToMobileDoesNotContain,
          paymentToMobileEquals,
          paymentToMobileNotEquals,
          paymentToMobileSpecified,
          paymentToMobileIn,
          paymentToMobileNotIn,
          coordinatesContains,
          coordinatesDoesNotContain,
          coordinatesEquals,
          coordinatesNotEquals,
          coordinatesSpecified,
          coordinatesIn,
          coordinatesNotIn,
          remarkContains,
          remarkDoesNotContain,
          remarkEquals,
          remarkNotEquals,
          remarkSpecified,
          remarkIn,
          remarkNotIn,
          deletedEquals,
          deletedNotEquals,
          deletedSpecified,
          deletedIn,
          deletedNotIn,
          collateralGreaterThan,
          collateralLessThan,
          collateralGreaterThanOrEqual,
          collateralLessThanOrEqual,
          collateralEquals,
          collateralNotEquals,
          collateralSpecified,
          collateralIn,
          collateralNotIn,
          networkEquals,
          networkNotEquals,
          networkSpecified,
          networkIn,
          networkNotIn,
          paymentExtidContains,
          paymentExtidDoesNotContain,
          paymentExtidEquals,
          paymentExtidNotEquals,
          paymentExtidSpecified,
          paymentExtidIn,
          paymentExtidNotIn,
          paymentErroneousEquals,
          paymentErroneousNotEquals,
          paymentErroneousSpecified,
          paymentErroneousIn,
          paymentErroneousNotIn,
          paymentStatusMessageContains,
          paymentStatusMessageDoesNotContain,
          paymentStatusMessageEquals,
          paymentStatusMessageNotEquals,
          paymentStatusMessageSpecified,
          paymentStatusMessageIn,
          paymentStatusMessageNotIn,
          paymentResponseContains,
          paymentResponseDoesNotContain,
          paymentResponseEquals,
          paymentResponseNotEquals,
          paymentResponseSpecified,
          paymentResponseIn,
          paymentResponseNotIn,
          transactionIdGreaterThan,
          transactionIdLessThan,
          transactionIdGreaterThanOrEqual,
          transactionIdLessThanOrEqual,
          transactionIdEquals,
          transactionIdNotEquals,
          transactionIdSpecified,
          transactionIdIn,
          transactionIdNotIn,
          saleIdGreaterThan,
          saleIdLessThan,
          saleIdGreaterThanOrEqual,
          saleIdLessThanOrEqual,
          saleIdEquals,
          saleIdNotEquals,
          saleIdSpecified,
          saleIdIn,
          saleIdNotIn,
          distinct,
          customerIdGreaterThan,
          customerIdLessThan,
          customerIdGreaterThanOrEqual,
          customerIdLessThanOrEqual,
          customerIdEquals,
          customerIdNotEquals,
          customerIdSpecified,
          customerIdIn,
          customerIdNotIn,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PaymentDTO} paymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayment(
      paymentDTO: PaymentDTO,
      options?: any
    ): AxiosPromise<PaymentDTO> {
      return localVarFp
        .createPayment(paymentDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentRequestedDateGreaterThan]
     * @param {string} [paymentRequestedDateLessThan]
     * @param {string} [paymentRequestedDateGreaterThanOrEqual]
     * @param {string} [paymentRequestedDateLessThanOrEqual]
     * @param {string} [paymentRequestedDateEquals]
     * @param {string} [paymentRequestedDateNotEquals]
     * @param {boolean} [paymentRequestedDateSpecified]
     * @param {Array<string>} [paymentRequestedDateIn]
     * @param {Array<string>} [paymentRequestedDateNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [nonLoanMoneyReceivedGreaterThan]
     * @param {string} [nonLoanMoneyReceivedLessThan]
     * @param {string} [nonLoanMoneyReceivedGreaterThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedLessThanOrEqual]
     * @param {string} [nonLoanMoneyReceivedEquals]
     * @param {string} [nonLoanMoneyReceivedNotEquals]
     * @param {boolean} [nonLoanMoneyReceivedSpecified]
     * @param {Array<string>} [nonLoanMoneyReceivedIn]
     * @param {Array<string>} [nonLoanMoneyReceivedNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {string} [coordinatesContains]
     * @param {string} [coordinatesDoesNotContain]
     * @param {string} [coordinatesEquals]
     * @param {string} [coordinatesNotEquals]
     * @param {boolean} [coordinatesSpecified]
     * @param {Array<string>} [coordinatesIn]
     * @param {Array<string>} [coordinatesNotIn]
     * @param {string} [remarkContains]
     * @param {string} [remarkDoesNotContain]
     * @param {string} [remarkEquals]
     * @param {string} [remarkNotEquals]
     * @param {boolean} [remarkSpecified]
     * @param {Array<string>} [remarkIn]
     * @param {Array<string>} [remarkNotIn]
     * @param {boolean} [deletedEquals]
     * @param {boolean} [deletedNotEquals]
     * @param {boolean} [deletedSpecified]
     * @param {Array<boolean>} [deletedIn]
     * @param {Array<boolean>} [deletedNotIn]
     * @param {number} [collateralGreaterThan]
     * @param {number} [collateralLessThan]
     * @param {number} [collateralGreaterThanOrEqual]
     * @param {number} [collateralLessThanOrEqual]
     * @param {number} [collateralEquals]
     * @param {number} [collateralNotEquals]
     * @param {boolean} [collateralSpecified]
     * @param {Array<number>} [collateralIn]
     * @param {Array<number>} [collateralNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkNotEquals]
     * @param {boolean} [networkSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkNotIn]
     * @param {string} [paymentExtidContains]
     * @param {string} [paymentExtidDoesNotContain]
     * @param {string} [paymentExtidEquals]
     * @param {string} [paymentExtidNotEquals]
     * @param {boolean} [paymentExtidSpecified]
     * @param {Array<string>} [paymentExtidIn]
     * @param {Array<string>} [paymentExtidNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [transactionIdGreaterThan]
     * @param {number} [transactionIdLessThan]
     * @param {number} [transactionIdGreaterThanOrEqual]
     * @param {number} [transactionIdLessThanOrEqual]
     * @param {number} [transactionIdEquals]
     * @param {number} [transactionIdNotEquals]
     * @param {boolean} [transactionIdSpecified]
     * @param {Array<number>} [transactionIdIn]
     * @param {Array<number>} [transactionIdNotIn]
     * @param {number} [saleIdGreaterThan]
     * @param {number} [saleIdLessThan]
     * @param {number} [saleIdGreaterThanOrEqual]
     * @param {number} [saleIdLessThanOrEqual]
     * @param {number} [saleIdEquals]
     * @param {number} [saleIdNotEquals]
     * @param {boolean} [saleIdSpecified]
     * @param {Array<number>} [saleIdIn]
     * @param {Array<number>} [saleIdNotIn]
     * @param {boolean} [distinct]
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPayments(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentRequestedDateGreaterThan?: string,
      paymentRequestedDateLessThan?: string,
      paymentRequestedDateGreaterThanOrEqual?: string,
      paymentRequestedDateLessThanOrEqual?: string,
      paymentRequestedDateEquals?: string,
      paymentRequestedDateNotEquals?: string,
      paymentRequestedDateSpecified?: boolean,
      paymentRequestedDateIn?: Array<string>,
      paymentRequestedDateNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      nonLoanMoneyReceivedGreaterThan?: string,
      nonLoanMoneyReceivedLessThan?: string,
      nonLoanMoneyReceivedGreaterThanOrEqual?: string,
      nonLoanMoneyReceivedLessThanOrEqual?: string,
      nonLoanMoneyReceivedEquals?: string,
      nonLoanMoneyReceivedNotEquals?: string,
      nonLoanMoneyReceivedSpecified?: boolean,
      nonLoanMoneyReceivedIn?: Array<string>,
      nonLoanMoneyReceivedNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      coordinatesContains?: string,
      coordinatesDoesNotContain?: string,
      coordinatesEquals?: string,
      coordinatesNotEquals?: string,
      coordinatesSpecified?: boolean,
      coordinatesIn?: Array<string>,
      coordinatesNotIn?: Array<string>,
      remarkContains?: string,
      remarkDoesNotContain?: string,
      remarkEquals?: string,
      remarkNotEquals?: string,
      remarkSpecified?: boolean,
      remarkIn?: Array<string>,
      remarkNotIn?: Array<string>,
      deletedEquals?: boolean,
      deletedNotEquals?: boolean,
      deletedSpecified?: boolean,
      deletedIn?: Array<boolean>,
      deletedNotIn?: Array<boolean>,
      collateralGreaterThan?: number,
      collateralLessThan?: number,
      collateralGreaterThanOrEqual?: number,
      collateralLessThanOrEqual?: number,
      collateralEquals?: number,
      collateralNotEquals?: number,
      collateralSpecified?: boolean,
      collateralIn?: Array<number>,
      collateralNotIn?: Array<number>,
      networkEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkSpecified?: boolean,
      networkIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentExtidContains?: string,
      paymentExtidDoesNotContain?: string,
      paymentExtidEquals?: string,
      paymentExtidNotEquals?: string,
      paymentExtidSpecified?: boolean,
      paymentExtidIn?: Array<string>,
      paymentExtidNotIn?: Array<string>,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      transactionIdGreaterThan?: number,
      transactionIdLessThan?: number,
      transactionIdGreaterThanOrEqual?: number,
      transactionIdLessThanOrEqual?: number,
      transactionIdEquals?: number,
      transactionIdNotEquals?: number,
      transactionIdSpecified?: boolean,
      transactionIdIn?: Array<number>,
      transactionIdNotIn?: Array<number>,
      saleIdGreaterThan?: number,
      saleIdLessThan?: number,
      saleIdGreaterThanOrEqual?: number,
      saleIdLessThanOrEqual?: number,
      saleIdEquals?: number,
      saleIdNotEquals?: number,
      saleIdSpecified?: boolean,
      saleIdIn?: Array<number>,
      saleIdNotIn?: Array<number>,
      distinct?: boolean,
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<Array<PaymentDTO>> {
      return localVarFp
        .getAllPayments(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          paymentRequestedDateGreaterThan,
          paymentRequestedDateLessThan,
          paymentRequestedDateGreaterThanOrEqual,
          paymentRequestedDateLessThanOrEqual,
          paymentRequestedDateEquals,
          paymentRequestedDateNotEquals,
          paymentRequestedDateSpecified,
          paymentRequestedDateIn,
          paymentRequestedDateNotIn,
          paymentDateGreaterThan,
          paymentDateLessThan,
          paymentDateGreaterThanOrEqual,
          paymentDateLessThanOrEqual,
          paymentDateEquals,
          paymentDateNotEquals,
          paymentDateSpecified,
          paymentDateIn,
          paymentDateNotIn,
          nonLoanMoneyReceivedGreaterThan,
          nonLoanMoneyReceivedLessThan,
          nonLoanMoneyReceivedGreaterThanOrEqual,
          nonLoanMoneyReceivedLessThanOrEqual,
          nonLoanMoneyReceivedEquals,
          nonLoanMoneyReceivedNotEquals,
          nonLoanMoneyReceivedSpecified,
          nonLoanMoneyReceivedIn,
          nonLoanMoneyReceivedNotIn,
          priceGreaterThan,
          priceLessThan,
          priceGreaterThanOrEqual,
          priceLessThanOrEqual,
          priceEquals,
          priceNotEquals,
          priceSpecified,
          priceIn,
          priceNotIn,
          paymentFromNameContains,
          paymentFromNameDoesNotContain,
          paymentFromNameEquals,
          paymentFromNameNotEquals,
          paymentFromNameSpecified,
          paymentFromNameIn,
          paymentFromNameNotIn,
          paymentToNameContains,
          paymentToNameDoesNotContain,
          paymentToNameEquals,
          paymentToNameNotEquals,
          paymentToNameSpecified,
          paymentToNameIn,
          paymentToNameNotIn,
          paymentFromMobileContains,
          paymentFromMobileDoesNotContain,
          paymentFromMobileEquals,
          paymentFromMobileNotEquals,
          paymentFromMobileSpecified,
          paymentFromMobileIn,
          paymentFromMobileNotIn,
          paymentToMobileContains,
          paymentToMobileDoesNotContain,
          paymentToMobileEquals,
          paymentToMobileNotEquals,
          paymentToMobileSpecified,
          paymentToMobileIn,
          paymentToMobileNotIn,
          coordinatesContains,
          coordinatesDoesNotContain,
          coordinatesEquals,
          coordinatesNotEquals,
          coordinatesSpecified,
          coordinatesIn,
          coordinatesNotIn,
          remarkContains,
          remarkDoesNotContain,
          remarkEquals,
          remarkNotEquals,
          remarkSpecified,
          remarkIn,
          remarkNotIn,
          deletedEquals,
          deletedNotEquals,
          deletedSpecified,
          deletedIn,
          deletedNotIn,
          collateralGreaterThan,
          collateralLessThan,
          collateralGreaterThanOrEqual,
          collateralLessThanOrEqual,
          collateralEquals,
          collateralNotEquals,
          collateralSpecified,
          collateralIn,
          collateralNotIn,
          networkEquals,
          networkNotEquals,
          networkSpecified,
          networkIn,
          networkNotIn,
          paymentExtidContains,
          paymentExtidDoesNotContain,
          paymentExtidEquals,
          paymentExtidNotEquals,
          paymentExtidSpecified,
          paymentExtidIn,
          paymentExtidNotIn,
          paymentErroneousEquals,
          paymentErroneousNotEquals,
          paymentErroneousSpecified,
          paymentErroneousIn,
          paymentErroneousNotIn,
          paymentStatusMessageContains,
          paymentStatusMessageDoesNotContain,
          paymentStatusMessageEquals,
          paymentStatusMessageNotEquals,
          paymentStatusMessageSpecified,
          paymentStatusMessageIn,
          paymentStatusMessageNotIn,
          paymentResponseContains,
          paymentResponseDoesNotContain,
          paymentResponseEquals,
          paymentResponseNotEquals,
          paymentResponseSpecified,
          paymentResponseIn,
          paymentResponseNotIn,
          transactionIdGreaterThan,
          transactionIdLessThan,
          transactionIdGreaterThanOrEqual,
          transactionIdLessThanOrEqual,
          transactionIdEquals,
          transactionIdNotEquals,
          transactionIdSpecified,
          transactionIdIn,
          transactionIdNotIn,
          saleIdGreaterThan,
          saleIdLessThan,
          saleIdGreaterThanOrEqual,
          saleIdLessThanOrEqual,
          saleIdEquals,
          saleIdNotEquals,
          saleIdSpecified,
          saleIdIn,
          saleIdNotIn,
          distinct,
          customerIdGreaterThan,
          customerIdLessThan,
          customerIdGreaterThanOrEqual,
          customerIdLessThanOrEqual,
          customerIdEquals,
          customerIdNotEquals,
          customerIdSpecified,
          customerIdIn,
          customerIdNotIn,
          page,
          size,
          sort,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment(id: number, options?: any): AxiosPromise<PaymentDTO> {
      return localVarFp
        .getPayment(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {PaymentDTO} paymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdatePayment(
      id: number,
      paymentDTO: PaymentDTO,
      options?: any
    ): AxiosPromise<PaymentDTO> {
      return localVarFp
        .partialUpdatePayment(id, paymentDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {PaymentDTO} paymentDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePayment(
      id: number,
      paymentDTO: PaymentDTO,
      options?: any
    ): AxiosPromise<PaymentDTO> {
      return localVarFp
        .updatePayment(id, paymentDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PaymentResourceApi - object-oriented interface
 * @export
 * @class PaymentResourceApi
 * @extends {BaseAPI}
 */
export class PaymentResourceApi extends BaseAPI {
  /**
   *
   * @param {number} [idGreaterThan]
   * @param {number} [idLessThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idEquals]
   * @param {number} [idNotEquals]
   * @param {boolean} [idSpecified]
   * @param {Array<number>} [idIn]
   * @param {Array<number>} [idNotIn]
   * @param {string} [paymentRequestedDateGreaterThan]
   * @param {string} [paymentRequestedDateLessThan]
   * @param {string} [paymentRequestedDateGreaterThanOrEqual]
   * @param {string} [paymentRequestedDateLessThanOrEqual]
   * @param {string} [paymentRequestedDateEquals]
   * @param {string} [paymentRequestedDateNotEquals]
   * @param {boolean} [paymentRequestedDateSpecified]
   * @param {Array<string>} [paymentRequestedDateIn]
   * @param {Array<string>} [paymentRequestedDateNotIn]
   * @param {string} [paymentDateGreaterThan]
   * @param {string} [paymentDateLessThan]
   * @param {string} [paymentDateGreaterThanOrEqual]
   * @param {string} [paymentDateLessThanOrEqual]
   * @param {string} [paymentDateEquals]
   * @param {string} [paymentDateNotEquals]
   * @param {boolean} [paymentDateSpecified]
   * @param {Array<string>} [paymentDateIn]
   * @param {Array<string>} [paymentDateNotIn]
   * @param {string} [nonLoanMoneyReceivedGreaterThan]
   * @param {string} [nonLoanMoneyReceivedLessThan]
   * @param {string} [nonLoanMoneyReceivedGreaterThanOrEqual]
   * @param {string} [nonLoanMoneyReceivedLessThanOrEqual]
   * @param {string} [nonLoanMoneyReceivedEquals]
   * @param {string} [nonLoanMoneyReceivedNotEquals]
   * @param {boolean} [nonLoanMoneyReceivedSpecified]
   * @param {Array<string>} [nonLoanMoneyReceivedIn]
   * @param {Array<string>} [nonLoanMoneyReceivedNotIn]
   * @param {number} [priceGreaterThan]
   * @param {number} [priceLessThan]
   * @param {number} [priceGreaterThanOrEqual]
   * @param {number} [priceLessThanOrEqual]
   * @param {number} [priceEquals]
   * @param {number} [priceNotEquals]
   * @param {boolean} [priceSpecified]
   * @param {Array<number>} [priceIn]
   * @param {Array<number>} [priceNotIn]
   * @param {string} [paymentFromNameContains]
   * @param {string} [paymentFromNameDoesNotContain]
   * @param {string} [paymentFromNameEquals]
   * @param {string} [paymentFromNameNotEquals]
   * @param {boolean} [paymentFromNameSpecified]
   * @param {Array<string>} [paymentFromNameIn]
   * @param {Array<string>} [paymentFromNameNotIn]
   * @param {string} [paymentToNameContains]
   * @param {string} [paymentToNameDoesNotContain]
   * @param {string} [paymentToNameEquals]
   * @param {string} [paymentToNameNotEquals]
   * @param {boolean} [paymentToNameSpecified]
   * @param {Array<string>} [paymentToNameIn]
   * @param {Array<string>} [paymentToNameNotIn]
   * @param {string} [paymentFromMobileContains]
   * @param {string} [paymentFromMobileDoesNotContain]
   * @param {string} [paymentFromMobileEquals]
   * @param {string} [paymentFromMobileNotEquals]
   * @param {boolean} [paymentFromMobileSpecified]
   * @param {Array<string>} [paymentFromMobileIn]
   * @param {Array<string>} [paymentFromMobileNotIn]
   * @param {string} [paymentToMobileContains]
   * @param {string} [paymentToMobileDoesNotContain]
   * @param {string} [paymentToMobileEquals]
   * @param {string} [paymentToMobileNotEquals]
   * @param {boolean} [paymentToMobileSpecified]
   * @param {Array<string>} [paymentToMobileIn]
   * @param {Array<string>} [paymentToMobileNotIn]
   * @param {string} [coordinatesContains]
   * @param {string} [coordinatesDoesNotContain]
   * @param {string} [coordinatesEquals]
   * @param {string} [coordinatesNotEquals]
   * @param {boolean} [coordinatesSpecified]
   * @param {Array<string>} [coordinatesIn]
   * @param {Array<string>} [coordinatesNotIn]
   * @param {string} [remarkContains]
   * @param {string} [remarkDoesNotContain]
   * @param {string} [remarkEquals]
   * @param {string} [remarkNotEquals]
   * @param {boolean} [remarkSpecified]
   * @param {Array<string>} [remarkIn]
   * @param {Array<string>} [remarkNotIn]
   * @param {boolean} [deletedEquals]
   * @param {boolean} [deletedNotEquals]
   * @param {boolean} [deletedSpecified]
   * @param {Array<boolean>} [deletedIn]
   * @param {Array<boolean>} [deletedNotIn]
   * @param {number} [collateralGreaterThan]
   * @param {number} [collateralLessThan]
   * @param {number} [collateralGreaterThanOrEqual]
   * @param {number} [collateralLessThanOrEqual]
   * @param {number} [collateralEquals]
   * @param {number} [collateralNotEquals]
   * @param {boolean} [collateralSpecified]
   * @param {Array<number>} [collateralIn]
   * @param {Array<number>} [collateralNotIn]
   * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkEquals]
   * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkNotEquals]
   * @param {boolean} [networkSpecified]
   * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkIn]
   * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkNotIn]
   * @param {string} [paymentExtidContains]
   * @param {string} [paymentExtidDoesNotContain]
   * @param {string} [paymentExtidEquals]
   * @param {string} [paymentExtidNotEquals]
   * @param {boolean} [paymentExtidSpecified]
   * @param {Array<string>} [paymentExtidIn]
   * @param {Array<string>} [paymentExtidNotIn]
   * @param {boolean} [paymentErroneousEquals]
   * @param {boolean} [paymentErroneousNotEquals]
   * @param {boolean} [paymentErroneousSpecified]
   * @param {Array<boolean>} [paymentErroneousIn]
   * @param {Array<boolean>} [paymentErroneousNotIn]
   * @param {string} [paymentStatusMessageContains]
   * @param {string} [paymentStatusMessageDoesNotContain]
   * @param {string} [paymentStatusMessageEquals]
   * @param {string} [paymentStatusMessageNotEquals]
   * @param {boolean} [paymentStatusMessageSpecified]
   * @param {Array<string>} [paymentStatusMessageIn]
   * @param {Array<string>} [paymentStatusMessageNotIn]
   * @param {string} [paymentResponseContains]
   * @param {string} [paymentResponseDoesNotContain]
   * @param {string} [paymentResponseEquals]
   * @param {string} [paymentResponseNotEquals]
   * @param {boolean} [paymentResponseSpecified]
   * @param {Array<string>} [paymentResponseIn]
   * @param {Array<string>} [paymentResponseNotIn]
   * @param {number} [transactionIdGreaterThan]
   * @param {number} [transactionIdLessThan]
   * @param {number} [transactionIdGreaterThanOrEqual]
   * @param {number} [transactionIdLessThanOrEqual]
   * @param {number} [transactionIdEquals]
   * @param {number} [transactionIdNotEquals]
   * @param {boolean} [transactionIdSpecified]
   * @param {Array<number>} [transactionIdIn]
   * @param {Array<number>} [transactionIdNotIn]
   * @param {number} [saleIdGreaterThan]
   * @param {number} [saleIdLessThan]
   * @param {number} [saleIdGreaterThanOrEqual]
   * @param {number} [saleIdLessThanOrEqual]
   * @param {number} [saleIdEquals]
   * @param {number} [saleIdNotEquals]
   * @param {boolean} [saleIdSpecified]
   * @param {Array<number>} [saleIdIn]
   * @param {Array<number>} [saleIdNotIn]
   * @param {boolean} [distinct]
   * @param {number} [customerIdGreaterThan]
   * @param {number} [customerIdLessThan]
   * @param {number} [customerIdGreaterThanOrEqual]
   * @param {number} [customerIdLessThanOrEqual]
   * @param {number} [customerIdEquals]
   * @param {number} [customerIdNotEquals]
   * @param {boolean} [customerIdSpecified]
   * @param {Array<number>} [customerIdIn]
   * @param {Array<number>} [customerIdNotIn]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentResourceApi
   */
  public countPayments(
    idGreaterThan?: number,
    idLessThan?: number,
    idGreaterThanOrEqual?: number,
    idLessThanOrEqual?: number,
    idEquals?: number,
    idNotEquals?: number,
    idSpecified?: boolean,
    idIn?: Array<number>,
    idNotIn?: Array<number>,
    paymentRequestedDateGreaterThan?: string,
    paymentRequestedDateLessThan?: string,
    paymentRequestedDateGreaterThanOrEqual?: string,
    paymentRequestedDateLessThanOrEqual?: string,
    paymentRequestedDateEquals?: string,
    paymentRequestedDateNotEquals?: string,
    paymentRequestedDateSpecified?: boolean,
    paymentRequestedDateIn?: Array<string>,
    paymentRequestedDateNotIn?: Array<string>,
    paymentDateGreaterThan?: string,
    paymentDateLessThan?: string,
    paymentDateGreaterThanOrEqual?: string,
    paymentDateLessThanOrEqual?: string,
    paymentDateEquals?: string,
    paymentDateNotEquals?: string,
    paymentDateSpecified?: boolean,
    paymentDateIn?: Array<string>,
    paymentDateNotIn?: Array<string>,
    nonLoanMoneyReceivedGreaterThan?: string,
    nonLoanMoneyReceivedLessThan?: string,
    nonLoanMoneyReceivedGreaterThanOrEqual?: string,
    nonLoanMoneyReceivedLessThanOrEqual?: string,
    nonLoanMoneyReceivedEquals?: string,
    nonLoanMoneyReceivedNotEquals?: string,
    nonLoanMoneyReceivedSpecified?: boolean,
    nonLoanMoneyReceivedIn?: Array<string>,
    nonLoanMoneyReceivedNotIn?: Array<string>,
    priceGreaterThan?: number,
    priceLessThan?: number,
    priceGreaterThanOrEqual?: number,
    priceLessThanOrEqual?: number,
    priceEquals?: number,
    priceNotEquals?: number,
    priceSpecified?: boolean,
    priceIn?: Array<number>,
    priceNotIn?: Array<number>,
    paymentFromNameContains?: string,
    paymentFromNameDoesNotContain?: string,
    paymentFromNameEquals?: string,
    paymentFromNameNotEquals?: string,
    paymentFromNameSpecified?: boolean,
    paymentFromNameIn?: Array<string>,
    paymentFromNameNotIn?: Array<string>,
    paymentToNameContains?: string,
    paymentToNameDoesNotContain?: string,
    paymentToNameEquals?: string,
    paymentToNameNotEquals?: string,
    paymentToNameSpecified?: boolean,
    paymentToNameIn?: Array<string>,
    paymentToNameNotIn?: Array<string>,
    paymentFromMobileContains?: string,
    paymentFromMobileDoesNotContain?: string,
    paymentFromMobileEquals?: string,
    paymentFromMobileNotEquals?: string,
    paymentFromMobileSpecified?: boolean,
    paymentFromMobileIn?: Array<string>,
    paymentFromMobileNotIn?: Array<string>,
    paymentToMobileContains?: string,
    paymentToMobileDoesNotContain?: string,
    paymentToMobileEquals?: string,
    paymentToMobileNotEquals?: string,
    paymentToMobileSpecified?: boolean,
    paymentToMobileIn?: Array<string>,
    paymentToMobileNotIn?: Array<string>,
    coordinatesContains?: string,
    coordinatesDoesNotContain?: string,
    coordinatesEquals?: string,
    coordinatesNotEquals?: string,
    coordinatesSpecified?: boolean,
    coordinatesIn?: Array<string>,
    coordinatesNotIn?: Array<string>,
    remarkContains?: string,
    remarkDoesNotContain?: string,
    remarkEquals?: string,
    remarkNotEquals?: string,
    remarkSpecified?: boolean,
    remarkIn?: Array<string>,
    remarkNotIn?: Array<string>,
    deletedEquals?: boolean,
    deletedNotEquals?: boolean,
    deletedSpecified?: boolean,
    deletedIn?: Array<boolean>,
    deletedNotIn?: Array<boolean>,
    collateralGreaterThan?: number,
    collateralLessThan?: number,
    collateralGreaterThanOrEqual?: number,
    collateralLessThanOrEqual?: number,
    collateralEquals?: number,
    collateralNotEquals?: number,
    collateralSpecified?: boolean,
    collateralIn?: Array<number>,
    collateralNotIn?: Array<number>,
    networkEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
    networkNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
    networkSpecified?: boolean,
    networkIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
    networkNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
    paymentExtidContains?: string,
    paymentExtidDoesNotContain?: string,
    paymentExtidEquals?: string,
    paymentExtidNotEquals?: string,
    paymentExtidSpecified?: boolean,
    paymentExtidIn?: Array<string>,
    paymentExtidNotIn?: Array<string>,
    paymentErroneousEquals?: boolean,
    paymentErroneousNotEquals?: boolean,
    paymentErroneousSpecified?: boolean,
    paymentErroneousIn?: Array<boolean>,
    paymentErroneousNotIn?: Array<boolean>,
    paymentStatusMessageContains?: string,
    paymentStatusMessageDoesNotContain?: string,
    paymentStatusMessageEquals?: string,
    paymentStatusMessageNotEquals?: string,
    paymentStatusMessageSpecified?: boolean,
    paymentStatusMessageIn?: Array<string>,
    paymentStatusMessageNotIn?: Array<string>,
    paymentResponseContains?: string,
    paymentResponseDoesNotContain?: string,
    paymentResponseEquals?: string,
    paymentResponseNotEquals?: string,
    paymentResponseSpecified?: boolean,
    paymentResponseIn?: Array<string>,
    paymentResponseNotIn?: Array<string>,
    transactionIdGreaterThan?: number,
    transactionIdLessThan?: number,
    transactionIdGreaterThanOrEqual?: number,
    transactionIdLessThanOrEqual?: number,
    transactionIdEquals?: number,
    transactionIdNotEquals?: number,
    transactionIdSpecified?: boolean,
    transactionIdIn?: Array<number>,
    transactionIdNotIn?: Array<number>,
    saleIdGreaterThan?: number,
    saleIdLessThan?: number,
    saleIdGreaterThanOrEqual?: number,
    saleIdLessThanOrEqual?: number,
    saleIdEquals?: number,
    saleIdNotEquals?: number,
    saleIdSpecified?: boolean,
    saleIdIn?: Array<number>,
    saleIdNotIn?: Array<number>,
    distinct?: boolean,
    customerIdGreaterThan?: number,
    customerIdLessThan?: number,
    customerIdGreaterThanOrEqual?: number,
    customerIdLessThanOrEqual?: number,
    customerIdEquals?: number,
    customerIdNotEquals?: number,
    customerIdSpecified?: boolean,
    customerIdIn?: Array<number>,
    customerIdNotIn?: Array<number>,
    options?: AxiosRequestConfig
  ) {
    return PaymentResourceApiFp(this.configuration)
      .countPayments(
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        paymentRequestedDateGreaterThan,
        paymentRequestedDateLessThan,
        paymentRequestedDateGreaterThanOrEqual,
        paymentRequestedDateLessThanOrEqual,
        paymentRequestedDateEquals,
        paymentRequestedDateNotEquals,
        paymentRequestedDateSpecified,
        paymentRequestedDateIn,
        paymentRequestedDateNotIn,
        paymentDateGreaterThan,
        paymentDateLessThan,
        paymentDateGreaterThanOrEqual,
        paymentDateLessThanOrEqual,
        paymentDateEquals,
        paymentDateNotEquals,
        paymentDateSpecified,
        paymentDateIn,
        paymentDateNotIn,
        nonLoanMoneyReceivedGreaterThan,
        nonLoanMoneyReceivedLessThan,
        nonLoanMoneyReceivedGreaterThanOrEqual,
        nonLoanMoneyReceivedLessThanOrEqual,
        nonLoanMoneyReceivedEquals,
        nonLoanMoneyReceivedNotEquals,
        nonLoanMoneyReceivedSpecified,
        nonLoanMoneyReceivedIn,
        nonLoanMoneyReceivedNotIn,
        priceGreaterThan,
        priceLessThan,
        priceGreaterThanOrEqual,
        priceLessThanOrEqual,
        priceEquals,
        priceNotEquals,
        priceSpecified,
        priceIn,
        priceNotIn,
        paymentFromNameContains,
        paymentFromNameDoesNotContain,
        paymentFromNameEquals,
        paymentFromNameNotEquals,
        paymentFromNameSpecified,
        paymentFromNameIn,
        paymentFromNameNotIn,
        paymentToNameContains,
        paymentToNameDoesNotContain,
        paymentToNameEquals,
        paymentToNameNotEquals,
        paymentToNameSpecified,
        paymentToNameIn,
        paymentToNameNotIn,
        paymentFromMobileContains,
        paymentFromMobileDoesNotContain,
        paymentFromMobileEquals,
        paymentFromMobileNotEquals,
        paymentFromMobileSpecified,
        paymentFromMobileIn,
        paymentFromMobileNotIn,
        paymentToMobileContains,
        paymentToMobileDoesNotContain,
        paymentToMobileEquals,
        paymentToMobileNotEquals,
        paymentToMobileSpecified,
        paymentToMobileIn,
        paymentToMobileNotIn,
        coordinatesContains,
        coordinatesDoesNotContain,
        coordinatesEquals,
        coordinatesNotEquals,
        coordinatesSpecified,
        coordinatesIn,
        coordinatesNotIn,
        remarkContains,
        remarkDoesNotContain,
        remarkEquals,
        remarkNotEquals,
        remarkSpecified,
        remarkIn,
        remarkNotIn,
        deletedEquals,
        deletedNotEquals,
        deletedSpecified,
        deletedIn,
        deletedNotIn,
        collateralGreaterThan,
        collateralLessThan,
        collateralGreaterThanOrEqual,
        collateralLessThanOrEqual,
        collateralEquals,
        collateralNotEquals,
        collateralSpecified,
        collateralIn,
        collateralNotIn,
        networkEquals,
        networkNotEquals,
        networkSpecified,
        networkIn,
        networkNotIn,
        paymentExtidContains,
        paymentExtidDoesNotContain,
        paymentExtidEquals,
        paymentExtidNotEquals,
        paymentExtidSpecified,
        paymentExtidIn,
        paymentExtidNotIn,
        paymentErroneousEquals,
        paymentErroneousNotEquals,
        paymentErroneousSpecified,
        paymentErroneousIn,
        paymentErroneousNotIn,
        paymentStatusMessageContains,
        paymentStatusMessageDoesNotContain,
        paymentStatusMessageEquals,
        paymentStatusMessageNotEquals,
        paymentStatusMessageSpecified,
        paymentStatusMessageIn,
        paymentStatusMessageNotIn,
        paymentResponseContains,
        paymentResponseDoesNotContain,
        paymentResponseEquals,
        paymentResponseNotEquals,
        paymentResponseSpecified,
        paymentResponseIn,
        paymentResponseNotIn,
        transactionIdGreaterThan,
        transactionIdLessThan,
        transactionIdGreaterThanOrEqual,
        transactionIdLessThanOrEqual,
        transactionIdEquals,
        transactionIdNotEquals,
        transactionIdSpecified,
        transactionIdIn,
        transactionIdNotIn,
        saleIdGreaterThan,
        saleIdLessThan,
        saleIdGreaterThanOrEqual,
        saleIdLessThanOrEqual,
        saleIdEquals,
        saleIdNotEquals,
        saleIdSpecified,
        saleIdIn,
        saleIdNotIn,
        distinct,
        customerIdGreaterThan,
        customerIdLessThan,
        customerIdGreaterThanOrEqual,
        customerIdLessThanOrEqual,
        customerIdEquals,
        customerIdNotEquals,
        customerIdSpecified,
        customerIdIn,
        customerIdNotIn,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PaymentDTO} paymentDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentResourceApi
   */
  public createPayment(paymentDTO: PaymentDTO, options?: AxiosRequestConfig) {
    return PaymentResourceApiFp(this.configuration)
      .createPayment(paymentDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [idGreaterThan]
   * @param {number} [idLessThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idEquals]
   * @param {number} [idNotEquals]
   * @param {boolean} [idSpecified]
   * @param {Array<number>} [idIn]
   * @param {Array<number>} [idNotIn]
   * @param {string} [paymentRequestedDateGreaterThan]
   * @param {string} [paymentRequestedDateLessThan]
   * @param {string} [paymentRequestedDateGreaterThanOrEqual]
   * @param {string} [paymentRequestedDateLessThanOrEqual]
   * @param {string} [paymentRequestedDateEquals]
   * @param {string} [paymentRequestedDateNotEquals]
   * @param {boolean} [paymentRequestedDateSpecified]
   * @param {Array<string>} [paymentRequestedDateIn]
   * @param {Array<string>} [paymentRequestedDateNotIn]
   * @param {string} [paymentDateGreaterThan]
   * @param {string} [paymentDateLessThan]
   * @param {string} [paymentDateGreaterThanOrEqual]
   * @param {string} [paymentDateLessThanOrEqual]
   * @param {string} [paymentDateEquals]
   * @param {string} [paymentDateNotEquals]
   * @param {boolean} [paymentDateSpecified]
   * @param {Array<string>} [paymentDateIn]
   * @param {Array<string>} [paymentDateNotIn]
   * @param {string} [nonLoanMoneyReceivedGreaterThan]
   * @param {string} [nonLoanMoneyReceivedLessThan]
   * @param {string} [nonLoanMoneyReceivedGreaterThanOrEqual]
   * @param {string} [nonLoanMoneyReceivedLessThanOrEqual]
   * @param {string} [nonLoanMoneyReceivedEquals]
   * @param {string} [nonLoanMoneyReceivedNotEquals]
   * @param {boolean} [nonLoanMoneyReceivedSpecified]
   * @param {Array<string>} [nonLoanMoneyReceivedIn]
   * @param {Array<string>} [nonLoanMoneyReceivedNotIn]
   * @param {number} [priceGreaterThan]
   * @param {number} [priceLessThan]
   * @param {number} [priceGreaterThanOrEqual]
   * @param {number} [priceLessThanOrEqual]
   * @param {number} [priceEquals]
   * @param {number} [priceNotEquals]
   * @param {boolean} [priceSpecified]
   * @param {Array<number>} [priceIn]
   * @param {Array<number>} [priceNotIn]
   * @param {string} [paymentFromNameContains]
   * @param {string} [paymentFromNameDoesNotContain]
   * @param {string} [paymentFromNameEquals]
   * @param {string} [paymentFromNameNotEquals]
   * @param {boolean} [paymentFromNameSpecified]
   * @param {Array<string>} [paymentFromNameIn]
   * @param {Array<string>} [paymentFromNameNotIn]
   * @param {string} [paymentToNameContains]
   * @param {string} [paymentToNameDoesNotContain]
   * @param {string} [paymentToNameEquals]
   * @param {string} [paymentToNameNotEquals]
   * @param {boolean} [paymentToNameSpecified]
   * @param {Array<string>} [paymentToNameIn]
   * @param {Array<string>} [paymentToNameNotIn]
   * @param {string} [paymentFromMobileContains]
   * @param {string} [paymentFromMobileDoesNotContain]
   * @param {string} [paymentFromMobileEquals]
   * @param {string} [paymentFromMobileNotEquals]
   * @param {boolean} [paymentFromMobileSpecified]
   * @param {Array<string>} [paymentFromMobileIn]
   * @param {Array<string>} [paymentFromMobileNotIn]
   * @param {string} [paymentToMobileContains]
   * @param {string} [paymentToMobileDoesNotContain]
   * @param {string} [paymentToMobileEquals]
   * @param {string} [paymentToMobileNotEquals]
   * @param {boolean} [paymentToMobileSpecified]
   * @param {Array<string>} [paymentToMobileIn]
   * @param {Array<string>} [paymentToMobileNotIn]
   * @param {string} [coordinatesContains]
   * @param {string} [coordinatesDoesNotContain]
   * @param {string} [coordinatesEquals]
   * @param {string} [coordinatesNotEquals]
   * @param {boolean} [coordinatesSpecified]
   * @param {Array<string>} [coordinatesIn]
   * @param {Array<string>} [coordinatesNotIn]
   * @param {string} [remarkContains]
   * @param {string} [remarkDoesNotContain]
   * @param {string} [remarkEquals]
   * @param {string} [remarkNotEquals]
   * @param {boolean} [remarkSpecified]
   * @param {Array<string>} [remarkIn]
   * @param {Array<string>} [remarkNotIn]
   * @param {boolean} [deletedEquals]
   * @param {boolean} [deletedNotEquals]
   * @param {boolean} [deletedSpecified]
   * @param {Array<boolean>} [deletedIn]
   * @param {Array<boolean>} [deletedNotIn]
   * @param {number} [collateralGreaterThan]
   * @param {number} [collateralLessThan]
   * @param {number} [collateralGreaterThanOrEqual]
   * @param {number} [collateralLessThanOrEqual]
   * @param {number} [collateralEquals]
   * @param {number} [collateralNotEquals]
   * @param {boolean} [collateralSpecified]
   * @param {Array<number>} [collateralIn]
   * @param {Array<number>} [collateralNotIn]
   * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkEquals]
   * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkNotEquals]
   * @param {boolean} [networkSpecified]
   * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkIn]
   * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkNotIn]
   * @param {string} [paymentExtidContains]
   * @param {string} [paymentExtidDoesNotContain]
   * @param {string} [paymentExtidEquals]
   * @param {string} [paymentExtidNotEquals]
   * @param {boolean} [paymentExtidSpecified]
   * @param {Array<string>} [paymentExtidIn]
   * @param {Array<string>} [paymentExtidNotIn]
   * @param {boolean} [paymentErroneousEquals]
   * @param {boolean} [paymentErroneousNotEquals]
   * @param {boolean} [paymentErroneousSpecified]
   * @param {Array<boolean>} [paymentErroneousIn]
   * @param {Array<boolean>} [paymentErroneousNotIn]
   * @param {string} [paymentStatusMessageContains]
   * @param {string} [paymentStatusMessageDoesNotContain]
   * @param {string} [paymentStatusMessageEquals]
   * @param {string} [paymentStatusMessageNotEquals]
   * @param {boolean} [paymentStatusMessageSpecified]
   * @param {Array<string>} [paymentStatusMessageIn]
   * @param {Array<string>} [paymentStatusMessageNotIn]
   * @param {string} [paymentResponseContains]
   * @param {string} [paymentResponseDoesNotContain]
   * @param {string} [paymentResponseEquals]
   * @param {string} [paymentResponseNotEquals]
   * @param {boolean} [paymentResponseSpecified]
   * @param {Array<string>} [paymentResponseIn]
   * @param {Array<string>} [paymentResponseNotIn]
   * @param {number} [transactionIdGreaterThan]
   * @param {number} [transactionIdLessThan]
   * @param {number} [transactionIdGreaterThanOrEqual]
   * @param {number} [transactionIdLessThanOrEqual]
   * @param {number} [transactionIdEquals]
   * @param {number} [transactionIdNotEquals]
   * @param {boolean} [transactionIdSpecified]
   * @param {Array<number>} [transactionIdIn]
   * @param {Array<number>} [transactionIdNotIn]
   * @param {number} [saleIdGreaterThan]
   * @param {number} [saleIdLessThan]
   * @param {number} [saleIdGreaterThanOrEqual]
   * @param {number} [saleIdLessThanOrEqual]
   * @param {number} [saleIdEquals]
   * @param {number} [saleIdNotEquals]
   * @param {boolean} [saleIdSpecified]
   * @param {Array<number>} [saleIdIn]
   * @param {Array<number>} [saleIdNotIn]
   * @param {boolean} [distinct]
   * @param {number} [customerIdGreaterThan]
   * @param {number} [customerIdLessThan]
   * @param {number} [customerIdGreaterThanOrEqual]
   * @param {number} [customerIdLessThanOrEqual]
   * @param {number} [customerIdEquals]
   * @param {number} [customerIdNotEquals]
   * @param {boolean} [customerIdSpecified]
   * @param {Array<number>} [customerIdIn]
   * @param {Array<number>} [customerIdNotIn]
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentResourceApi
   */
  public getAllPayments(
    idGreaterThan?: number,
    idLessThan?: number,
    idGreaterThanOrEqual?: number,
    idLessThanOrEqual?: number,
    idEquals?: number,
    idNotEquals?: number,
    idSpecified?: boolean,
    idIn?: Array<number>,
    idNotIn?: Array<number>,
    paymentRequestedDateGreaterThan?: string,
    paymentRequestedDateLessThan?: string,
    paymentRequestedDateGreaterThanOrEqual?: string,
    paymentRequestedDateLessThanOrEqual?: string,
    paymentRequestedDateEquals?: string,
    paymentRequestedDateNotEquals?: string,
    paymentRequestedDateSpecified?: boolean,
    paymentRequestedDateIn?: Array<string>,
    paymentRequestedDateNotIn?: Array<string>,
    paymentDateGreaterThan?: string,
    paymentDateLessThan?: string,
    paymentDateGreaterThanOrEqual?: string,
    paymentDateLessThanOrEqual?: string,
    paymentDateEquals?: string,
    paymentDateNotEquals?: string,
    paymentDateSpecified?: boolean,
    paymentDateIn?: Array<string>,
    paymentDateNotIn?: Array<string>,
    nonLoanMoneyReceivedGreaterThan?: string,
    nonLoanMoneyReceivedLessThan?: string,
    nonLoanMoneyReceivedGreaterThanOrEqual?: string,
    nonLoanMoneyReceivedLessThanOrEqual?: string,
    nonLoanMoneyReceivedEquals?: string,
    nonLoanMoneyReceivedNotEquals?: string,
    nonLoanMoneyReceivedSpecified?: boolean,
    nonLoanMoneyReceivedIn?: Array<string>,
    nonLoanMoneyReceivedNotIn?: Array<string>,
    priceGreaterThan?: number,
    priceLessThan?: number,
    priceGreaterThanOrEqual?: number,
    priceLessThanOrEqual?: number,
    priceEquals?: number,
    priceNotEquals?: number,
    priceSpecified?: boolean,
    priceIn?: Array<number>,
    priceNotIn?: Array<number>,
    paymentFromNameContains?: string,
    paymentFromNameDoesNotContain?: string,
    paymentFromNameEquals?: string,
    paymentFromNameNotEquals?: string,
    paymentFromNameSpecified?: boolean,
    paymentFromNameIn?: Array<string>,
    paymentFromNameNotIn?: Array<string>,
    paymentToNameContains?: string,
    paymentToNameDoesNotContain?: string,
    paymentToNameEquals?: string,
    paymentToNameNotEquals?: string,
    paymentToNameSpecified?: boolean,
    paymentToNameIn?: Array<string>,
    paymentToNameNotIn?: Array<string>,
    paymentFromMobileContains?: string,
    paymentFromMobileDoesNotContain?: string,
    paymentFromMobileEquals?: string,
    paymentFromMobileNotEquals?: string,
    paymentFromMobileSpecified?: boolean,
    paymentFromMobileIn?: Array<string>,
    paymentFromMobileNotIn?: Array<string>,
    paymentToMobileContains?: string,
    paymentToMobileDoesNotContain?: string,
    paymentToMobileEquals?: string,
    paymentToMobileNotEquals?: string,
    paymentToMobileSpecified?: boolean,
    paymentToMobileIn?: Array<string>,
    paymentToMobileNotIn?: Array<string>,
    coordinatesContains?: string,
    coordinatesDoesNotContain?: string,
    coordinatesEquals?: string,
    coordinatesNotEquals?: string,
    coordinatesSpecified?: boolean,
    coordinatesIn?: Array<string>,
    coordinatesNotIn?: Array<string>,
    remarkContains?: string,
    remarkDoesNotContain?: string,
    remarkEquals?: string,
    remarkNotEquals?: string,
    remarkSpecified?: boolean,
    remarkIn?: Array<string>,
    remarkNotIn?: Array<string>,
    deletedEquals?: boolean,
    deletedNotEquals?: boolean,
    deletedSpecified?: boolean,
    deletedIn?: Array<boolean>,
    deletedNotIn?: Array<boolean>,
    collateralGreaterThan?: number,
    collateralLessThan?: number,
    collateralGreaterThanOrEqual?: number,
    collateralLessThanOrEqual?: number,
    collateralEquals?: number,
    collateralNotEquals?: number,
    collateralSpecified?: boolean,
    collateralIn?: Array<number>,
    collateralNotIn?: Array<number>,
    networkEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
    networkNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
    networkSpecified?: boolean,
    networkIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
    networkNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
    paymentExtidContains?: string,
    paymentExtidDoesNotContain?: string,
    paymentExtidEquals?: string,
    paymentExtidNotEquals?: string,
    paymentExtidSpecified?: boolean,
    paymentExtidIn?: Array<string>,
    paymentExtidNotIn?: Array<string>,
    paymentErroneousEquals?: boolean,
    paymentErroneousNotEquals?: boolean,
    paymentErroneousSpecified?: boolean,
    paymentErroneousIn?: Array<boolean>,
    paymentErroneousNotIn?: Array<boolean>,
    paymentStatusMessageContains?: string,
    paymentStatusMessageDoesNotContain?: string,
    paymentStatusMessageEquals?: string,
    paymentStatusMessageNotEquals?: string,
    paymentStatusMessageSpecified?: boolean,
    paymentStatusMessageIn?: Array<string>,
    paymentStatusMessageNotIn?: Array<string>,
    paymentResponseContains?: string,
    paymentResponseDoesNotContain?: string,
    paymentResponseEquals?: string,
    paymentResponseNotEquals?: string,
    paymentResponseSpecified?: boolean,
    paymentResponseIn?: Array<string>,
    paymentResponseNotIn?: Array<string>,
    transactionIdGreaterThan?: number,
    transactionIdLessThan?: number,
    transactionIdGreaterThanOrEqual?: number,
    transactionIdLessThanOrEqual?: number,
    transactionIdEquals?: number,
    transactionIdNotEquals?: number,
    transactionIdSpecified?: boolean,
    transactionIdIn?: Array<number>,
    transactionIdNotIn?: Array<number>,
    saleIdGreaterThan?: number,
    saleIdLessThan?: number,
    saleIdGreaterThanOrEqual?: number,
    saleIdLessThanOrEqual?: number,
    saleIdEquals?: number,
    saleIdNotEquals?: number,
    saleIdSpecified?: boolean,
    saleIdIn?: Array<number>,
    saleIdNotIn?: Array<number>,
    distinct?: boolean,
    customerIdGreaterThan?: number,
    customerIdLessThan?: number,
    customerIdGreaterThanOrEqual?: number,
    customerIdLessThanOrEqual?: number,
    customerIdEquals?: number,
    customerIdNotEquals?: number,
    customerIdSpecified?: boolean,
    customerIdIn?: Array<number>,
    customerIdNotIn?: Array<number>,
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return PaymentResourceApiFp(this.configuration)
      .getAllPayments(
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        paymentRequestedDateGreaterThan,
        paymentRequestedDateLessThan,
        paymentRequestedDateGreaterThanOrEqual,
        paymentRequestedDateLessThanOrEqual,
        paymentRequestedDateEquals,
        paymentRequestedDateNotEquals,
        paymentRequestedDateSpecified,
        paymentRequestedDateIn,
        paymentRequestedDateNotIn,
        paymentDateGreaterThan,
        paymentDateLessThan,
        paymentDateGreaterThanOrEqual,
        paymentDateLessThanOrEqual,
        paymentDateEquals,
        paymentDateNotEquals,
        paymentDateSpecified,
        paymentDateIn,
        paymentDateNotIn,
        nonLoanMoneyReceivedGreaterThan,
        nonLoanMoneyReceivedLessThan,
        nonLoanMoneyReceivedGreaterThanOrEqual,
        nonLoanMoneyReceivedLessThanOrEqual,
        nonLoanMoneyReceivedEquals,
        nonLoanMoneyReceivedNotEquals,
        nonLoanMoneyReceivedSpecified,
        nonLoanMoneyReceivedIn,
        nonLoanMoneyReceivedNotIn,
        priceGreaterThan,
        priceLessThan,
        priceGreaterThanOrEqual,
        priceLessThanOrEqual,
        priceEquals,
        priceNotEquals,
        priceSpecified,
        priceIn,
        priceNotIn,
        paymentFromNameContains,
        paymentFromNameDoesNotContain,
        paymentFromNameEquals,
        paymentFromNameNotEquals,
        paymentFromNameSpecified,
        paymentFromNameIn,
        paymentFromNameNotIn,
        paymentToNameContains,
        paymentToNameDoesNotContain,
        paymentToNameEquals,
        paymentToNameNotEquals,
        paymentToNameSpecified,
        paymentToNameIn,
        paymentToNameNotIn,
        paymentFromMobileContains,
        paymentFromMobileDoesNotContain,
        paymentFromMobileEquals,
        paymentFromMobileNotEquals,
        paymentFromMobileSpecified,
        paymentFromMobileIn,
        paymentFromMobileNotIn,
        paymentToMobileContains,
        paymentToMobileDoesNotContain,
        paymentToMobileEquals,
        paymentToMobileNotEquals,
        paymentToMobileSpecified,
        paymentToMobileIn,
        paymentToMobileNotIn,
        coordinatesContains,
        coordinatesDoesNotContain,
        coordinatesEquals,
        coordinatesNotEquals,
        coordinatesSpecified,
        coordinatesIn,
        coordinatesNotIn,
        remarkContains,
        remarkDoesNotContain,
        remarkEquals,
        remarkNotEquals,
        remarkSpecified,
        remarkIn,
        remarkNotIn,
        deletedEquals,
        deletedNotEquals,
        deletedSpecified,
        deletedIn,
        deletedNotIn,
        collateralGreaterThan,
        collateralLessThan,
        collateralGreaterThanOrEqual,
        collateralLessThanOrEqual,
        collateralEquals,
        collateralNotEquals,
        collateralSpecified,
        collateralIn,
        collateralNotIn,
        networkEquals,
        networkNotEquals,
        networkSpecified,
        networkIn,
        networkNotIn,
        paymentExtidContains,
        paymentExtidDoesNotContain,
        paymentExtidEquals,
        paymentExtidNotEquals,
        paymentExtidSpecified,
        paymentExtidIn,
        paymentExtidNotIn,
        paymentErroneousEquals,
        paymentErroneousNotEquals,
        paymentErroneousSpecified,
        paymentErroneousIn,
        paymentErroneousNotIn,
        paymentStatusMessageContains,
        paymentStatusMessageDoesNotContain,
        paymentStatusMessageEquals,
        paymentStatusMessageNotEquals,
        paymentStatusMessageSpecified,
        paymentStatusMessageIn,
        paymentStatusMessageNotIn,
        paymentResponseContains,
        paymentResponseDoesNotContain,
        paymentResponseEquals,
        paymentResponseNotEquals,
        paymentResponseSpecified,
        paymentResponseIn,
        paymentResponseNotIn,
        transactionIdGreaterThan,
        transactionIdLessThan,
        transactionIdGreaterThanOrEqual,
        transactionIdLessThanOrEqual,
        transactionIdEquals,
        transactionIdNotEquals,
        transactionIdSpecified,
        transactionIdIn,
        transactionIdNotIn,
        saleIdGreaterThan,
        saleIdLessThan,
        saleIdGreaterThanOrEqual,
        saleIdLessThanOrEqual,
        saleIdEquals,
        saleIdNotEquals,
        saleIdSpecified,
        saleIdIn,
        saleIdNotIn,
        distinct,
        customerIdGreaterThan,
        customerIdLessThan,
        customerIdGreaterThanOrEqual,
        customerIdLessThanOrEqual,
        customerIdEquals,
        customerIdNotEquals,
        customerIdSpecified,
        customerIdIn,
        customerIdNotIn,
        page,
        size,
        sort,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentResourceApi
   */
  public getPayment(id: number, options?: AxiosRequestConfig) {
    return PaymentResourceApiFp(this.configuration)
      .getPayment(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {PaymentDTO} paymentDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentResourceApi
   */
  public partialUpdatePayment(
    id: number,
    paymentDTO: PaymentDTO,
    options?: AxiosRequestConfig
  ) {
    return PaymentResourceApiFp(this.configuration)
      .partialUpdatePayment(id, paymentDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {PaymentDTO} paymentDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentResourceApi
   */
  public updatePayment(
    id: number,
    paymentDTO: PaymentDTO,
    options?: AxiosRequestConfig
  ) {
    return PaymentResourceApiFp(this.configuration)
      .updatePayment(id, paymentDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PaymentTransactionResourceApi - axios parameter creator
 * @export
 */
export const PaymentTransactionResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activatePaymentTransaction: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("activatePaymentTransaction", "id", id);
      const localVarPath = `/api/payment-transactions/activate/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentPurposeContains]
     * @param {string} [paymentPurposeDoesNotContain]
     * @param {string} [paymentPurposeEquals]
     * @param {string} [paymentPurposeNotEquals]
     * @param {boolean} [paymentPurposeSpecified]
     * @param {Array<string>} [paymentPurposeIn]
     * @param {Array<string>} [paymentPurposeNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [paymentTriggeredDateGreaterThan]
     * @param {string} [paymentTriggeredDateLessThan]
     * @param {string} [paymentTriggeredDateGreaterThanOrEqual]
     * @param {string} [paymentTriggeredDateLessThanOrEqual]
     * @param {string} [paymentTriggeredDateEquals]
     * @param {string} [paymentTriggeredDateNotEquals]
     * @param {boolean} [paymentTriggeredDateSpecified]
     * @param {Array<string>} [paymentTriggeredDateIn]
     * @param {Array<string>} [paymentTriggeredDateNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeNotEquals]
     * @param {boolean} [networkTypeSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeEquals]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeNotEquals]
     * @param {boolean} [momoTransTypeSpecified]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeIn]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeNotIn]
     * @param {string} [paymentExtIdContains]
     * @param {string} [paymentExtIdDoesNotContain]
     * @param {string} [paymentExtIdEquals]
     * @param {string} [paymentExtIdNotEquals]
     * @param {boolean} [paymentExtIdSpecified]
     * @param {Array<string>} [paymentExtIdIn]
     * @param {Array<string>} [paymentExtIdNotIn]
     * @param {boolean} [humanSaysOkEquals]
     * @param {boolean} [humanSaysOkNotEquals]
     * @param {boolean} [humanSaysOkSpecified]
     * @param {Array<boolean>} [humanSaysOkIn]
     * @param {Array<boolean>} [humanSaysOkNotIn]
     * @param {number} [feeGreaterThan]
     * @param {number} [feeLessThan]
     * @param {number} [feeGreaterThanOrEqual]
     * @param {number} [feeLessThanOrEqual]
     * @param {number} [feeEquals]
     * @param {number} [feeNotEquals]
     * @param {boolean} [feeSpecified]
     * @param {Array<number>} [feeIn]
     * @param {Array<number>} [feeNotIn]
     * @param {number} [paymentIdGreaterThan]
     * @param {number} [paymentIdLessThan]
     * @param {number} [paymentIdGreaterThanOrEqual]
     * @param {number} [paymentIdLessThanOrEqual]
     * @param {number} [paymentIdEquals]
     * @param {number} [paymentIdNotEquals]
     * @param {boolean} [paymentIdSpecified]
     * @param {Array<number>} [paymentIdIn]
     * @param {Array<number>} [paymentIdNotIn]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThan]
     * @param {number} [dependsOnPaymentTransactionIdLessThan]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdLessThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdEquals]
     * @param {number} [dependsOnPaymentTransactionIdNotEquals]
     * @param {boolean} [dependsOnPaymentTransactionIdSpecified]
     * @param {Array<number>} [dependsOnPaymentTransactionIdIn]
     * @param {Array<number>} [dependsOnPaymentTransactionIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countPaymentTransactions: async (
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentPurposeContains?: string,
      paymentPurposeDoesNotContain?: string,
      paymentPurposeEquals?: string,
      paymentPurposeNotEquals?: string,
      paymentPurposeSpecified?: boolean,
      paymentPurposeIn?: Array<string>,
      paymentPurposeNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      paymentTriggeredDateGreaterThan?: string,
      paymentTriggeredDateLessThan?: string,
      paymentTriggeredDateGreaterThanOrEqual?: string,
      paymentTriggeredDateLessThanOrEqual?: string,
      paymentTriggeredDateEquals?: string,
      paymentTriggeredDateNotEquals?: string,
      paymentTriggeredDateSpecified?: boolean,
      paymentTriggeredDateIn?: Array<string>,
      paymentTriggeredDateNotIn?: Array<string>,
      networkTypeEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeSpecified?: boolean,
      networkTypeIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkTypeNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      momoTransTypeEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeNotEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeSpecified?: boolean,
      momoTransTypeIn?: Array<"CTM" | "MTC" | "SMS">,
      momoTransTypeNotIn?: Array<"CTM" | "MTC" | "SMS">,
      paymentExtIdContains?: string,
      paymentExtIdDoesNotContain?: string,
      paymentExtIdEquals?: string,
      paymentExtIdNotEquals?: string,
      paymentExtIdSpecified?: boolean,
      paymentExtIdIn?: Array<string>,
      paymentExtIdNotIn?: Array<string>,
      humanSaysOkEquals?: boolean,
      humanSaysOkNotEquals?: boolean,
      humanSaysOkSpecified?: boolean,
      humanSaysOkIn?: Array<boolean>,
      humanSaysOkNotIn?: Array<boolean>,
      feeGreaterThan?: number,
      feeLessThan?: number,
      feeGreaterThanOrEqual?: number,
      feeLessThanOrEqual?: number,
      feeEquals?: number,
      feeNotEquals?: number,
      feeSpecified?: boolean,
      feeIn?: Array<number>,
      feeNotIn?: Array<number>,
      paymentIdGreaterThan?: number,
      paymentIdLessThan?: number,
      paymentIdGreaterThanOrEqual?: number,
      paymentIdLessThanOrEqual?: number,
      paymentIdEquals?: number,
      paymentIdNotEquals?: number,
      paymentIdSpecified?: boolean,
      paymentIdIn?: Array<number>,
      paymentIdNotIn?: Array<number>,
      dependsOnPaymentTransactionIdGreaterThan?: number,
      dependsOnPaymentTransactionIdLessThan?: number,
      dependsOnPaymentTransactionIdGreaterThanOrEqual?: number,
      dependsOnPaymentTransactionIdLessThanOrEqual?: number,
      dependsOnPaymentTransactionIdEquals?: number,
      dependsOnPaymentTransactionIdNotEquals?: number,
      dependsOnPaymentTransactionIdSpecified?: boolean,
      dependsOnPaymentTransactionIdIn?: Array<number>,
      dependsOnPaymentTransactionIdNotIn?: Array<number>,
      distinct?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/payment-transactions/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (idGreaterThan !== undefined) {
        localVarQueryParameter["id.greaterThan"] = idGreaterThan;
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter["id.lessThan"] = idLessThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["id.greaterThanOrEqual"] = idGreaterThanOrEqual;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter["id.lessThanOrEqual"] = idLessThanOrEqual;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter["id.equals"] = idEquals;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter["id.notEquals"] = idNotEquals;
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter["id.specified"] = idSpecified;
      }

      if (idIn) {
        localVarQueryParameter["id.in"] = idIn;
      }

      if (idNotIn) {
        localVarQueryParameter["id.notIn"] = idNotIn;
      }

      if (paymentPurposeContains !== undefined) {
        localVarQueryParameter["paymentPurpose.contains"] =
          paymentPurposeContains;
      }

      if (paymentPurposeDoesNotContain !== undefined) {
        localVarQueryParameter["paymentPurpose.doesNotContain"] =
          paymentPurposeDoesNotContain;
      }

      if (paymentPurposeEquals !== undefined) {
        localVarQueryParameter["paymentPurpose.equals"] = paymentPurposeEquals;
      }

      if (paymentPurposeNotEquals !== undefined) {
        localVarQueryParameter["paymentPurpose.notEquals"] =
          paymentPurposeNotEquals;
      }

      if (paymentPurposeSpecified !== undefined) {
        localVarQueryParameter["paymentPurpose.specified"] =
          paymentPurposeSpecified;
      }

      if (paymentPurposeIn) {
        localVarQueryParameter["paymentPurpose.in"] = paymentPurposeIn;
      }

      if (paymentPurposeNotIn) {
        localVarQueryParameter["paymentPurpose.notIn"] = paymentPurposeNotIn;
      }

      if (paymentDateGreaterThan !== undefined) {
        localVarQueryParameter["paymentDate.greaterThan"] =
          (paymentDateGreaterThan as any) instanceof Date
            ? (paymentDateGreaterThan as any).toISOString()
            : paymentDateGreaterThan;
      }

      if (paymentDateLessThan !== undefined) {
        localVarQueryParameter["paymentDate.lessThan"] =
          (paymentDateLessThan as any) instanceof Date
            ? (paymentDateLessThan as any).toISOString()
            : paymentDateLessThan;
      }

      if (paymentDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paymentDate.greaterThanOrEqual"] =
          (paymentDateGreaterThanOrEqual as any) instanceof Date
            ? (paymentDateGreaterThanOrEqual as any).toISOString()
            : paymentDateGreaterThanOrEqual;
      }

      if (paymentDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["paymentDate.lessThanOrEqual"] =
          (paymentDateLessThanOrEqual as any) instanceof Date
            ? (paymentDateLessThanOrEqual as any).toISOString()
            : paymentDateLessThanOrEqual;
      }

      if (paymentDateEquals !== undefined) {
        localVarQueryParameter["paymentDate.equals"] =
          (paymentDateEquals as any) instanceof Date
            ? (paymentDateEquals as any).toISOString()
            : paymentDateEquals;
      }

      if (paymentDateNotEquals !== undefined) {
        localVarQueryParameter["paymentDate.notEquals"] =
          (paymentDateNotEquals as any) instanceof Date
            ? (paymentDateNotEquals as any).toISOString()
            : paymentDateNotEquals;
      }

      if (paymentDateSpecified !== undefined) {
        localVarQueryParameter["paymentDate.specified"] = paymentDateSpecified;
      }

      if (paymentDateIn) {
        localVarQueryParameter["paymentDate.in"] = paymentDateIn;
      }

      if (paymentDateNotIn) {
        localVarQueryParameter["paymentDate.notIn"] = paymentDateNotIn;
      }

      if (paymentTriggeredDateGreaterThan !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.greaterThan"] =
          (paymentTriggeredDateGreaterThan as any) instanceof Date
            ? (paymentTriggeredDateGreaterThan as any).toISOString()
            : paymentTriggeredDateGreaterThan;
      }

      if (paymentTriggeredDateLessThan !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.lessThan"] =
          (paymentTriggeredDateLessThan as any) instanceof Date
            ? (paymentTriggeredDateLessThan as any).toISOString()
            : paymentTriggeredDateLessThan;
      }

      if (paymentTriggeredDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.greaterThanOrEqual"] =
          (paymentTriggeredDateGreaterThanOrEqual as any) instanceof Date
            ? (paymentTriggeredDateGreaterThanOrEqual as any).toISOString()
            : paymentTriggeredDateGreaterThanOrEqual;
      }

      if (paymentTriggeredDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.lessThanOrEqual"] =
          (paymentTriggeredDateLessThanOrEqual as any) instanceof Date
            ? (paymentTriggeredDateLessThanOrEqual as any).toISOString()
            : paymentTriggeredDateLessThanOrEqual;
      }

      if (paymentTriggeredDateEquals !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.equals"] =
          (paymentTriggeredDateEquals as any) instanceof Date
            ? (paymentTriggeredDateEquals as any).toISOString()
            : paymentTriggeredDateEquals;
      }

      if (paymentTriggeredDateNotEquals !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.notEquals"] =
          (paymentTriggeredDateNotEquals as any) instanceof Date
            ? (paymentTriggeredDateNotEquals as any).toISOString()
            : paymentTriggeredDateNotEquals;
      }

      if (paymentTriggeredDateSpecified !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.specified"] =
          paymentTriggeredDateSpecified;
      }

      if (paymentTriggeredDateIn) {
        localVarQueryParameter["paymentTriggeredDate.in"] =
          paymentTriggeredDateIn;
      }

      if (paymentTriggeredDateNotIn) {
        localVarQueryParameter["paymentTriggeredDate.notIn"] =
          paymentTriggeredDateNotIn;
      }

      if (networkTypeEquals !== undefined) {
        localVarQueryParameter["networkType.equals"] = networkTypeEquals;
      }

      if (networkTypeNotEquals !== undefined) {
        localVarQueryParameter["networkType.notEquals"] = networkTypeNotEquals;
      }

      if (networkTypeSpecified !== undefined) {
        localVarQueryParameter["networkType.specified"] = networkTypeSpecified;
      }

      if (networkTypeIn) {
        localVarQueryParameter["networkType.in"] = networkTypeIn;
      }

      if (networkTypeNotIn) {
        localVarQueryParameter["networkType.notIn"] = networkTypeNotIn;
      }

      if (paymentErroneousEquals !== undefined) {
        localVarQueryParameter["paymentErroneous.equals"] =
          paymentErroneousEquals;
      }

      if (paymentErroneousNotEquals !== undefined) {
        localVarQueryParameter["paymentErroneous.notEquals"] =
          paymentErroneousNotEquals;
      }

      if (paymentErroneousSpecified !== undefined) {
        localVarQueryParameter["paymentErroneous.specified"] =
          paymentErroneousSpecified;
      }

      if (paymentErroneousIn) {
        localVarQueryParameter["paymentErroneous.in"] = paymentErroneousIn;
      }

      if (paymentErroneousNotIn) {
        localVarQueryParameter["paymentErroneous.notIn"] =
          paymentErroneousNotIn;
      }

      if (paymentStatusMessageContains !== undefined) {
        localVarQueryParameter["paymentStatusMessage.contains"] =
          paymentStatusMessageContains;
      }

      if (paymentStatusMessageDoesNotContain !== undefined) {
        localVarQueryParameter["paymentStatusMessage.doesNotContain"] =
          paymentStatusMessageDoesNotContain;
      }

      if (paymentStatusMessageEquals !== undefined) {
        localVarQueryParameter["paymentStatusMessage.equals"] =
          paymentStatusMessageEquals;
      }

      if (paymentStatusMessageNotEquals !== undefined) {
        localVarQueryParameter["paymentStatusMessage.notEquals"] =
          paymentStatusMessageNotEquals;
      }

      if (paymentStatusMessageSpecified !== undefined) {
        localVarQueryParameter["paymentStatusMessage.specified"] =
          paymentStatusMessageSpecified;
      }

      if (paymentStatusMessageIn) {
        localVarQueryParameter["paymentStatusMessage.in"] =
          paymentStatusMessageIn;
      }

      if (paymentStatusMessageNotIn) {
        localVarQueryParameter["paymentStatusMessage.notIn"] =
          paymentStatusMessageNotIn;
      }

      if (paymentResponseContains !== undefined) {
        localVarQueryParameter["paymentResponse.contains"] =
          paymentResponseContains;
      }

      if (paymentResponseDoesNotContain !== undefined) {
        localVarQueryParameter["paymentResponse.doesNotContain"] =
          paymentResponseDoesNotContain;
      }

      if (paymentResponseEquals !== undefined) {
        localVarQueryParameter["paymentResponse.equals"] =
          paymentResponseEquals;
      }

      if (paymentResponseNotEquals !== undefined) {
        localVarQueryParameter["paymentResponse.notEquals"] =
          paymentResponseNotEquals;
      }

      if (paymentResponseSpecified !== undefined) {
        localVarQueryParameter["paymentResponse.specified"] =
          paymentResponseSpecified;
      }

      if (paymentResponseIn) {
        localVarQueryParameter["paymentResponse.in"] = paymentResponseIn;
      }

      if (paymentResponseNotIn) {
        localVarQueryParameter["paymentResponse.notIn"] = paymentResponseNotIn;
      }

      if (priceGreaterThan !== undefined) {
        localVarQueryParameter["price.greaterThan"] = priceGreaterThan;
      }

      if (priceLessThan !== undefined) {
        localVarQueryParameter["price.lessThan"] = priceLessThan;
      }

      if (priceGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["price.greaterThanOrEqual"] =
          priceGreaterThanOrEqual;
      }

      if (priceLessThanOrEqual !== undefined) {
        localVarQueryParameter["price.lessThanOrEqual"] = priceLessThanOrEqual;
      }

      if (priceEquals !== undefined) {
        localVarQueryParameter["price.equals"] = priceEquals;
      }

      if (priceNotEquals !== undefined) {
        localVarQueryParameter["price.notEquals"] = priceNotEquals;
      }

      if (priceSpecified !== undefined) {
        localVarQueryParameter["price.specified"] = priceSpecified;
      }

      if (priceIn) {
        localVarQueryParameter["price.in"] = priceIn;
      }

      if (priceNotIn) {
        localVarQueryParameter["price.notIn"] = priceNotIn;
      }

      if (paymentFromNameContains !== undefined) {
        localVarQueryParameter["paymentFromName.contains"] =
          paymentFromNameContains;
      }

      if (paymentFromNameDoesNotContain !== undefined) {
        localVarQueryParameter["paymentFromName.doesNotContain"] =
          paymentFromNameDoesNotContain;
      }

      if (paymentFromNameEquals !== undefined) {
        localVarQueryParameter["paymentFromName.equals"] =
          paymentFromNameEquals;
      }

      if (paymentFromNameNotEquals !== undefined) {
        localVarQueryParameter["paymentFromName.notEquals"] =
          paymentFromNameNotEquals;
      }

      if (paymentFromNameSpecified !== undefined) {
        localVarQueryParameter["paymentFromName.specified"] =
          paymentFromNameSpecified;
      }

      if (paymentFromNameIn) {
        localVarQueryParameter["paymentFromName.in"] = paymentFromNameIn;
      }

      if (paymentFromNameNotIn) {
        localVarQueryParameter["paymentFromName.notIn"] = paymentFromNameNotIn;
      }

      if (paymentToNameContains !== undefined) {
        localVarQueryParameter["paymentToName.contains"] =
          paymentToNameContains;
      }

      if (paymentToNameDoesNotContain !== undefined) {
        localVarQueryParameter["paymentToName.doesNotContain"] =
          paymentToNameDoesNotContain;
      }

      if (paymentToNameEquals !== undefined) {
        localVarQueryParameter["paymentToName.equals"] = paymentToNameEquals;
      }

      if (paymentToNameNotEquals !== undefined) {
        localVarQueryParameter["paymentToName.notEquals"] =
          paymentToNameNotEquals;
      }

      if (paymentToNameSpecified !== undefined) {
        localVarQueryParameter["paymentToName.specified"] =
          paymentToNameSpecified;
      }

      if (paymentToNameIn) {
        localVarQueryParameter["paymentToName.in"] = paymentToNameIn;
      }

      if (paymentToNameNotIn) {
        localVarQueryParameter["paymentToName.notIn"] = paymentToNameNotIn;
      }

      if (paymentFromMobileContains !== undefined) {
        localVarQueryParameter["paymentFromMobile.contains"] =
          paymentFromMobileContains;
      }

      if (paymentFromMobileDoesNotContain !== undefined) {
        localVarQueryParameter["paymentFromMobile.doesNotContain"] =
          paymentFromMobileDoesNotContain;
      }

      if (paymentFromMobileEquals !== undefined) {
        localVarQueryParameter["paymentFromMobile.equals"] =
          paymentFromMobileEquals;
      }

      if (paymentFromMobileNotEquals !== undefined) {
        localVarQueryParameter["paymentFromMobile.notEquals"] =
          paymentFromMobileNotEquals;
      }

      if (paymentFromMobileSpecified !== undefined) {
        localVarQueryParameter["paymentFromMobile.specified"] =
          paymentFromMobileSpecified;
      }

      if (paymentFromMobileIn) {
        localVarQueryParameter["paymentFromMobile.in"] = paymentFromMobileIn;
      }

      if (paymentFromMobileNotIn) {
        localVarQueryParameter["paymentFromMobile.notIn"] =
          paymentFromMobileNotIn;
      }

      if (paymentToMobileContains !== undefined) {
        localVarQueryParameter["paymentToMobile.contains"] =
          paymentToMobileContains;
      }

      if (paymentToMobileDoesNotContain !== undefined) {
        localVarQueryParameter["paymentToMobile.doesNotContain"] =
          paymentToMobileDoesNotContain;
      }

      if (paymentToMobileEquals !== undefined) {
        localVarQueryParameter["paymentToMobile.equals"] =
          paymentToMobileEquals;
      }

      if (paymentToMobileNotEquals !== undefined) {
        localVarQueryParameter["paymentToMobile.notEquals"] =
          paymentToMobileNotEquals;
      }

      if (paymentToMobileSpecified !== undefined) {
        localVarQueryParameter["paymentToMobile.specified"] =
          paymentToMobileSpecified;
      }

      if (paymentToMobileIn) {
        localVarQueryParameter["paymentToMobile.in"] = paymentToMobileIn;
      }

      if (paymentToMobileNotIn) {
        localVarQueryParameter["paymentToMobile.notIn"] = paymentToMobileNotIn;
      }

      if (momoTransTypeEquals !== undefined) {
        localVarQueryParameter["momoTransType.equals"] = momoTransTypeEquals;
      }

      if (momoTransTypeNotEquals !== undefined) {
        localVarQueryParameter["momoTransType.notEquals"] =
          momoTransTypeNotEquals;
      }

      if (momoTransTypeSpecified !== undefined) {
        localVarQueryParameter["momoTransType.specified"] =
          momoTransTypeSpecified;
      }

      if (momoTransTypeIn) {
        localVarQueryParameter["momoTransType.in"] = momoTransTypeIn;
      }

      if (momoTransTypeNotIn) {
        localVarQueryParameter["momoTransType.notIn"] = momoTransTypeNotIn;
      }

      if (paymentExtIdContains !== undefined) {
        localVarQueryParameter["paymentExtId.contains"] = paymentExtIdContains;
      }

      if (paymentExtIdDoesNotContain !== undefined) {
        localVarQueryParameter["paymentExtId.doesNotContain"] =
          paymentExtIdDoesNotContain;
      }

      if (paymentExtIdEquals !== undefined) {
        localVarQueryParameter["paymentExtId.equals"] = paymentExtIdEquals;
      }

      if (paymentExtIdNotEquals !== undefined) {
        localVarQueryParameter["paymentExtId.notEquals"] =
          paymentExtIdNotEquals;
      }

      if (paymentExtIdSpecified !== undefined) {
        localVarQueryParameter["paymentExtId.specified"] =
          paymentExtIdSpecified;
      }

      if (paymentExtIdIn) {
        localVarQueryParameter["paymentExtId.in"] = paymentExtIdIn;
      }

      if (paymentExtIdNotIn) {
        localVarQueryParameter["paymentExtId.notIn"] = paymentExtIdNotIn;
      }

      if (humanSaysOkEquals !== undefined) {
        localVarQueryParameter["humanSaysOk.equals"] = humanSaysOkEquals;
      }

      if (humanSaysOkNotEquals !== undefined) {
        localVarQueryParameter["humanSaysOk.notEquals"] = humanSaysOkNotEquals;
      }

      if (humanSaysOkSpecified !== undefined) {
        localVarQueryParameter["humanSaysOk.specified"] = humanSaysOkSpecified;
      }

      if (humanSaysOkIn) {
        localVarQueryParameter["humanSaysOk.in"] = humanSaysOkIn;
      }

      if (humanSaysOkNotIn) {
        localVarQueryParameter["humanSaysOk.notIn"] = humanSaysOkNotIn;
      }

      if (feeGreaterThan !== undefined) {
        localVarQueryParameter["fee.greaterThan"] = feeGreaterThan;
      }

      if (feeLessThan !== undefined) {
        localVarQueryParameter["fee.lessThan"] = feeLessThan;
      }

      if (feeGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["fee.greaterThanOrEqual"] =
          feeGreaterThanOrEqual;
      }

      if (feeLessThanOrEqual !== undefined) {
        localVarQueryParameter["fee.lessThanOrEqual"] = feeLessThanOrEqual;
      }

      if (feeEquals !== undefined) {
        localVarQueryParameter["fee.equals"] = feeEquals;
      }

      if (feeNotEquals !== undefined) {
        localVarQueryParameter["fee.notEquals"] = feeNotEquals;
      }

      if (feeSpecified !== undefined) {
        localVarQueryParameter["fee.specified"] = feeSpecified;
      }

      if (feeIn) {
        localVarQueryParameter["fee.in"] = feeIn;
      }

      if (feeNotIn) {
        localVarQueryParameter["fee.notIn"] = feeNotIn;
      }

      if (paymentIdGreaterThan !== undefined) {
        localVarQueryParameter["paymentId.greaterThan"] = paymentIdGreaterThan;
      }

      if (paymentIdLessThan !== undefined) {
        localVarQueryParameter["paymentId.lessThan"] = paymentIdLessThan;
      }

      if (paymentIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paymentId.greaterThanOrEqual"] =
          paymentIdGreaterThanOrEqual;
      }

      if (paymentIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["paymentId.lessThanOrEqual"] =
          paymentIdLessThanOrEqual;
      }

      if (paymentIdEquals !== undefined) {
        localVarQueryParameter["paymentId.equals"] = paymentIdEquals;
      }

      if (paymentIdNotEquals !== undefined) {
        localVarQueryParameter["paymentId.notEquals"] = paymentIdNotEquals;
      }

      if (paymentIdSpecified !== undefined) {
        localVarQueryParameter["paymentId.specified"] = paymentIdSpecified;
      }

      if (paymentIdIn) {
        localVarQueryParameter["paymentId.in"] = paymentIdIn;
      }

      if (paymentIdNotIn) {
        localVarQueryParameter["paymentId.notIn"] = paymentIdNotIn;
      }

      if (dependsOnPaymentTransactionIdGreaterThan !== undefined) {
        localVarQueryParameter["dependsOnPaymentTransactionId.greaterThan"] =
          dependsOnPaymentTransactionIdGreaterThan;
      }

      if (dependsOnPaymentTransactionIdLessThan !== undefined) {
        localVarQueryParameter["dependsOnPaymentTransactionId.lessThan"] =
          dependsOnPaymentTransactionIdLessThan;
      }

      if (dependsOnPaymentTransactionIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter[
          "dependsOnPaymentTransactionId.greaterThanOrEqual"
        ] = dependsOnPaymentTransactionIdGreaterThanOrEqual;
      }

      if (dependsOnPaymentTransactionIdLessThanOrEqual !== undefined) {
        localVarQueryParameter[
          "dependsOnPaymentTransactionId.lessThanOrEqual"
        ] = dependsOnPaymentTransactionIdLessThanOrEqual;
      }

      if (dependsOnPaymentTransactionIdEquals !== undefined) {
        localVarQueryParameter["dependsOnPaymentTransactionId.equals"] =
          dependsOnPaymentTransactionIdEquals;
      }

      if (dependsOnPaymentTransactionIdNotEquals !== undefined) {
        localVarQueryParameter["dependsOnPaymentTransactionId.notEquals"] =
          dependsOnPaymentTransactionIdNotEquals;
      }

      if (dependsOnPaymentTransactionIdSpecified !== undefined) {
        localVarQueryParameter["dependsOnPaymentTransactionId.specified"] =
          dependsOnPaymentTransactionIdSpecified;
      }

      if (dependsOnPaymentTransactionIdIn) {
        localVarQueryParameter["dependsOnPaymentTransactionId.in"] =
          dependsOnPaymentTransactionIdIn;
      }

      if (dependsOnPaymentTransactionIdNotIn) {
        localVarQueryParameter["dependsOnPaymentTransactionId.notIn"] =
          dependsOnPaymentTransactionIdNotIn;
      }

      if (distinct !== undefined) {
        localVarQueryParameter["distinct"] = distinct;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PaymentTransactionDTO} paymentTransactionDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentTransaction: async (
      paymentTransactionDTO: PaymentTransactionDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'paymentTransactionDTO' is not null or undefined
      assertParamExists(
        "createPaymentTransaction",
        "paymentTransactionDTO",
        paymentTransactionDTO
      );
      const localVarPath = `/api/payment-transactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        paymentTransactionDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentPurposeContains]
     * @param {string} [paymentPurposeDoesNotContain]
     * @param {string} [paymentPurposeEquals]
     * @param {string} [paymentPurposeNotEquals]
     * @param {boolean} [paymentPurposeSpecified]
     * @param {Array<string>} [paymentPurposeIn]
     * @param {Array<string>} [paymentPurposeNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [paymentTriggeredDateGreaterThan]
     * @param {string} [paymentTriggeredDateLessThan]
     * @param {string} [paymentTriggeredDateGreaterThanOrEqual]
     * @param {string} [paymentTriggeredDateLessThanOrEqual]
     * @param {string} [paymentTriggeredDateEquals]
     * @param {string} [paymentTriggeredDateNotEquals]
     * @param {boolean} [paymentTriggeredDateSpecified]
     * @param {Array<string>} [paymentTriggeredDateIn]
     * @param {Array<string>} [paymentTriggeredDateNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeNotEquals]
     * @param {boolean} [networkTypeSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeEquals]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeNotEquals]
     * @param {boolean} [momoTransTypeSpecified]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeIn]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeNotIn]
     * @param {string} [paymentExtIdContains]
     * @param {string} [paymentExtIdDoesNotContain]
     * @param {string} [paymentExtIdEquals]
     * @param {string} [paymentExtIdNotEquals]
     * @param {boolean} [paymentExtIdSpecified]
     * @param {Array<string>} [paymentExtIdIn]
     * @param {Array<string>} [paymentExtIdNotIn]
     * @param {boolean} [humanSaysOkEquals]
     * @param {boolean} [humanSaysOkNotEquals]
     * @param {boolean} [humanSaysOkSpecified]
     * @param {Array<boolean>} [humanSaysOkIn]
     * @param {Array<boolean>} [humanSaysOkNotIn]
     * @param {number} [feeGreaterThan]
     * @param {number} [feeLessThan]
     * @param {number} [feeGreaterThanOrEqual]
     * @param {number} [feeLessThanOrEqual]
     * @param {number} [feeEquals]
     * @param {number} [feeNotEquals]
     * @param {boolean} [feeSpecified]
     * @param {Array<number>} [feeIn]
     * @param {Array<number>} [feeNotIn]
     * @param {number} [paymentIdGreaterThan]
     * @param {number} [paymentIdLessThan]
     * @param {number} [paymentIdGreaterThanOrEqual]
     * @param {number} [paymentIdLessThanOrEqual]
     * @param {number} [paymentIdEquals]
     * @param {number} [paymentIdNotEquals]
     * @param {boolean} [paymentIdSpecified]
     * @param {Array<number>} [paymentIdIn]
     * @param {Array<number>} [paymentIdNotIn]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThan]
     * @param {number} [dependsOnPaymentTransactionIdLessThan]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdLessThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdEquals]
     * @param {number} [dependsOnPaymentTransactionIdNotEquals]
     * @param {boolean} [dependsOnPaymentTransactionIdSpecified]
     * @param {Array<number>} [dependsOnPaymentTransactionIdIn]
     * @param {Array<number>} [dependsOnPaymentTransactionIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPaymentTransactions: async (
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentPurposeContains?: string,
      paymentPurposeDoesNotContain?: string,
      paymentPurposeEquals?: string,
      paymentPurposeNotEquals?: string,
      paymentPurposeSpecified?: boolean,
      paymentPurposeIn?: Array<string>,
      paymentPurposeNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      paymentTriggeredDateGreaterThan?: string,
      paymentTriggeredDateLessThan?: string,
      paymentTriggeredDateGreaterThanOrEqual?: string,
      paymentTriggeredDateLessThanOrEqual?: string,
      paymentTriggeredDateEquals?: string,
      paymentTriggeredDateNotEquals?: string,
      paymentTriggeredDateSpecified?: boolean,
      paymentTriggeredDateIn?: Array<string>,
      paymentTriggeredDateNotIn?: Array<string>,
      networkTypeEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeSpecified?: boolean,
      networkTypeIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkTypeNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      momoTransTypeEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeNotEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeSpecified?: boolean,
      momoTransTypeIn?: Array<"CTM" | "MTC" | "SMS">,
      momoTransTypeNotIn?: Array<"CTM" | "MTC" | "SMS">,
      paymentExtIdContains?: string,
      paymentExtIdDoesNotContain?: string,
      paymentExtIdEquals?: string,
      paymentExtIdNotEquals?: string,
      paymentExtIdSpecified?: boolean,
      paymentExtIdIn?: Array<string>,
      paymentExtIdNotIn?: Array<string>,
      humanSaysOkEquals?: boolean,
      humanSaysOkNotEquals?: boolean,
      humanSaysOkSpecified?: boolean,
      humanSaysOkIn?: Array<boolean>,
      humanSaysOkNotIn?: Array<boolean>,
      feeGreaterThan?: number,
      feeLessThan?: number,
      feeGreaterThanOrEqual?: number,
      feeLessThanOrEqual?: number,
      feeEquals?: number,
      feeNotEquals?: number,
      feeSpecified?: boolean,
      feeIn?: Array<number>,
      feeNotIn?: Array<number>,
      paymentIdGreaterThan?: number,
      paymentIdLessThan?: number,
      paymentIdGreaterThanOrEqual?: number,
      paymentIdLessThanOrEqual?: number,
      paymentIdEquals?: number,
      paymentIdNotEquals?: number,
      paymentIdSpecified?: boolean,
      paymentIdIn?: Array<number>,
      paymentIdNotIn?: Array<number>,
      dependsOnPaymentTransactionIdGreaterThan?: number,
      dependsOnPaymentTransactionIdLessThan?: number,
      dependsOnPaymentTransactionIdGreaterThanOrEqual?: number,
      dependsOnPaymentTransactionIdLessThanOrEqual?: number,
      dependsOnPaymentTransactionIdEquals?: number,
      dependsOnPaymentTransactionIdNotEquals?: number,
      dependsOnPaymentTransactionIdSpecified?: boolean,
      dependsOnPaymentTransactionIdIn?: Array<number>,
      dependsOnPaymentTransactionIdNotIn?: Array<number>,
      distinct?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/payment-transactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (idGreaterThan !== undefined) {
        localVarQueryParameter["id.greaterThan"] = idGreaterThan;
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter["id.lessThan"] = idLessThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["id.greaterThanOrEqual"] = idGreaterThanOrEqual;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter["id.lessThanOrEqual"] = idLessThanOrEqual;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter["id.equals"] = idEquals;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter["id.notEquals"] = idNotEquals;
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter["id.specified"] = idSpecified;
      }

      if (idIn) {
        localVarQueryParameter["id.in"] = idIn;
      }

      if (idNotIn) {
        localVarQueryParameter["id.notIn"] = idNotIn;
      }

      if (paymentPurposeContains !== undefined) {
        localVarQueryParameter["paymentPurpose.contains"] =
          paymentPurposeContains;
      }

      if (paymentPurposeDoesNotContain !== undefined) {
        localVarQueryParameter["paymentPurpose.doesNotContain"] =
          paymentPurposeDoesNotContain;
      }

      if (paymentPurposeEquals !== undefined) {
        localVarQueryParameter["paymentPurpose.equals"] = paymentPurposeEquals;
      }

      if (paymentPurposeNotEquals !== undefined) {
        localVarQueryParameter["paymentPurpose.notEquals"] =
          paymentPurposeNotEquals;
      }

      if (paymentPurposeSpecified !== undefined) {
        localVarQueryParameter["paymentPurpose.specified"] =
          paymentPurposeSpecified;
      }

      if (paymentPurposeIn) {
        localVarQueryParameter["paymentPurpose.in"] = paymentPurposeIn;
      }

      if (paymentPurposeNotIn) {
        localVarQueryParameter["paymentPurpose.notIn"] = paymentPurposeNotIn;
      }

      if (paymentDateGreaterThan !== undefined) {
        localVarQueryParameter["paymentDate.greaterThan"] =
          (paymentDateGreaterThan as any) instanceof Date
            ? (paymentDateGreaterThan as any).toISOString()
            : paymentDateGreaterThan;
      }

      if (paymentDateLessThan !== undefined) {
        localVarQueryParameter["paymentDate.lessThan"] =
          (paymentDateLessThan as any) instanceof Date
            ? (paymentDateLessThan as any).toISOString()
            : paymentDateLessThan;
      }

      if (paymentDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paymentDate.greaterThanOrEqual"] =
          (paymentDateGreaterThanOrEqual as any) instanceof Date
            ? (paymentDateGreaterThanOrEqual as any).toISOString()
            : paymentDateGreaterThanOrEqual;
      }

      if (paymentDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["paymentDate.lessThanOrEqual"] =
          (paymentDateLessThanOrEqual as any) instanceof Date
            ? (paymentDateLessThanOrEqual as any).toISOString()
            : paymentDateLessThanOrEqual;
      }

      if (paymentDateEquals !== undefined) {
        localVarQueryParameter["paymentDate.equals"] =
          (paymentDateEquals as any) instanceof Date
            ? (paymentDateEquals as any).toISOString()
            : paymentDateEquals;
      }

      if (paymentDateNotEquals !== undefined) {
        localVarQueryParameter["paymentDate.notEquals"] =
          (paymentDateNotEquals as any) instanceof Date
            ? (paymentDateNotEquals as any).toISOString()
            : paymentDateNotEquals;
      }

      if (paymentDateSpecified !== undefined) {
        localVarQueryParameter["paymentDate.specified"] = paymentDateSpecified;
      }

      if (paymentDateIn) {
        localVarQueryParameter["paymentDate.in"] = paymentDateIn;
      }

      if (paymentDateNotIn) {
        localVarQueryParameter["paymentDate.notIn"] = paymentDateNotIn;
      }

      if (paymentTriggeredDateGreaterThan !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.greaterThan"] =
          (paymentTriggeredDateGreaterThan as any) instanceof Date
            ? (paymentTriggeredDateGreaterThan as any).toISOString()
            : paymentTriggeredDateGreaterThan;
      }

      if (paymentTriggeredDateLessThan !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.lessThan"] =
          (paymentTriggeredDateLessThan as any) instanceof Date
            ? (paymentTriggeredDateLessThan as any).toISOString()
            : paymentTriggeredDateLessThan;
      }

      if (paymentTriggeredDateGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.greaterThanOrEqual"] =
          (paymentTriggeredDateGreaterThanOrEqual as any) instanceof Date
            ? (paymentTriggeredDateGreaterThanOrEqual as any).toISOString()
            : paymentTriggeredDateGreaterThanOrEqual;
      }

      if (paymentTriggeredDateLessThanOrEqual !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.lessThanOrEqual"] =
          (paymentTriggeredDateLessThanOrEqual as any) instanceof Date
            ? (paymentTriggeredDateLessThanOrEqual as any).toISOString()
            : paymentTriggeredDateLessThanOrEqual;
      }

      if (paymentTriggeredDateEquals !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.equals"] =
          (paymentTriggeredDateEquals as any) instanceof Date
            ? (paymentTriggeredDateEquals as any).toISOString()
            : paymentTriggeredDateEquals;
      }

      if (paymentTriggeredDateNotEquals !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.notEquals"] =
          (paymentTriggeredDateNotEquals as any) instanceof Date
            ? (paymentTriggeredDateNotEquals as any).toISOString()
            : paymentTriggeredDateNotEquals;
      }

      if (paymentTriggeredDateSpecified !== undefined) {
        localVarQueryParameter["paymentTriggeredDate.specified"] =
          paymentTriggeredDateSpecified;
      }

      if (paymentTriggeredDateIn) {
        localVarQueryParameter["paymentTriggeredDate.in"] =
          paymentTriggeredDateIn;
      }

      if (paymentTriggeredDateNotIn) {
        localVarQueryParameter["paymentTriggeredDate.notIn"] =
          paymentTriggeredDateNotIn;
      }

      if (networkTypeEquals !== undefined) {
        localVarQueryParameter["networkType.equals"] = networkTypeEquals;
      }

      if (networkTypeNotEquals !== undefined) {
        localVarQueryParameter["networkType.notEquals"] = networkTypeNotEquals;
      }

      if (networkTypeSpecified !== undefined) {
        localVarQueryParameter["networkType.specified"] = networkTypeSpecified;
      }

      if (networkTypeIn) {
        localVarQueryParameter["networkType.in"] = networkTypeIn;
      }

      if (networkTypeNotIn) {
        localVarQueryParameter["networkType.notIn"] = networkTypeNotIn;
      }

      if (paymentErroneousEquals !== undefined) {
        localVarQueryParameter["paymentErroneous.equals"] =
          paymentErroneousEquals;
      }

      if (paymentErroneousNotEquals !== undefined) {
        localVarQueryParameter["paymentErroneous.notEquals"] =
          paymentErroneousNotEquals;
      }

      if (paymentErroneousSpecified !== undefined) {
        localVarQueryParameter["paymentErroneous.specified"] =
          paymentErroneousSpecified;
      }

      if (paymentErroneousIn) {
        localVarQueryParameter["paymentErroneous.in"] = paymentErroneousIn;
      }

      if (paymentErroneousNotIn) {
        localVarQueryParameter["paymentErroneous.notIn"] =
          paymentErroneousNotIn;
      }

      if (paymentStatusMessageContains !== undefined) {
        localVarQueryParameter["paymentStatusMessage.contains"] =
          paymentStatusMessageContains;
      }

      if (paymentStatusMessageDoesNotContain !== undefined) {
        localVarQueryParameter["paymentStatusMessage.doesNotContain"] =
          paymentStatusMessageDoesNotContain;
      }

      if (paymentStatusMessageEquals !== undefined) {
        localVarQueryParameter["paymentStatusMessage.equals"] =
          paymentStatusMessageEquals;
      }

      if (paymentStatusMessageNotEquals !== undefined) {
        localVarQueryParameter["paymentStatusMessage.notEquals"] =
          paymentStatusMessageNotEquals;
      }

      if (paymentStatusMessageSpecified !== undefined) {
        localVarQueryParameter["paymentStatusMessage.specified"] =
          paymentStatusMessageSpecified;
      }

      if (paymentStatusMessageIn) {
        localVarQueryParameter["paymentStatusMessage.in"] =
          paymentStatusMessageIn;
      }

      if (paymentStatusMessageNotIn) {
        localVarQueryParameter["paymentStatusMessage.notIn"] =
          paymentStatusMessageNotIn;
      }

      if (paymentResponseContains !== undefined) {
        localVarQueryParameter["paymentResponse.contains"] =
          paymentResponseContains;
      }

      if (paymentResponseDoesNotContain !== undefined) {
        localVarQueryParameter["paymentResponse.doesNotContain"] =
          paymentResponseDoesNotContain;
      }

      if (paymentResponseEquals !== undefined) {
        localVarQueryParameter["paymentResponse.equals"] =
          paymentResponseEquals;
      }

      if (paymentResponseNotEquals !== undefined) {
        localVarQueryParameter["paymentResponse.notEquals"] =
          paymentResponseNotEquals;
      }

      if (paymentResponseSpecified !== undefined) {
        localVarQueryParameter["paymentResponse.specified"] =
          paymentResponseSpecified;
      }

      if (paymentResponseIn) {
        localVarQueryParameter["paymentResponse.in"] = paymentResponseIn;
      }

      if (paymentResponseNotIn) {
        localVarQueryParameter["paymentResponse.notIn"] = paymentResponseNotIn;
      }

      if (priceGreaterThan !== undefined) {
        localVarQueryParameter["price.greaterThan"] = priceGreaterThan;
      }

      if (priceLessThan !== undefined) {
        localVarQueryParameter["price.lessThan"] = priceLessThan;
      }

      if (priceGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["price.greaterThanOrEqual"] =
          priceGreaterThanOrEqual;
      }

      if (priceLessThanOrEqual !== undefined) {
        localVarQueryParameter["price.lessThanOrEqual"] = priceLessThanOrEqual;
      }

      if (priceEquals !== undefined) {
        localVarQueryParameter["price.equals"] = priceEquals;
      }

      if (priceNotEquals !== undefined) {
        localVarQueryParameter["price.notEquals"] = priceNotEquals;
      }

      if (priceSpecified !== undefined) {
        localVarQueryParameter["price.specified"] = priceSpecified;
      }

      if (priceIn) {
        localVarQueryParameter["price.in"] = priceIn;
      }

      if (priceNotIn) {
        localVarQueryParameter["price.notIn"] = priceNotIn;
      }

      if (paymentFromNameContains !== undefined) {
        localVarQueryParameter["paymentFromName.contains"] =
          paymentFromNameContains;
      }

      if (paymentFromNameDoesNotContain !== undefined) {
        localVarQueryParameter["paymentFromName.doesNotContain"] =
          paymentFromNameDoesNotContain;
      }

      if (paymentFromNameEquals !== undefined) {
        localVarQueryParameter["paymentFromName.equals"] =
          paymentFromNameEquals;
      }

      if (paymentFromNameNotEquals !== undefined) {
        localVarQueryParameter["paymentFromName.notEquals"] =
          paymentFromNameNotEquals;
      }

      if (paymentFromNameSpecified !== undefined) {
        localVarQueryParameter["paymentFromName.specified"] =
          paymentFromNameSpecified;
      }

      if (paymentFromNameIn) {
        localVarQueryParameter["paymentFromName.in"] = paymentFromNameIn;
      }

      if (paymentFromNameNotIn) {
        localVarQueryParameter["paymentFromName.notIn"] = paymentFromNameNotIn;
      }

      if (paymentToNameContains !== undefined) {
        localVarQueryParameter["paymentToName.contains"] =
          paymentToNameContains;
      }

      if (paymentToNameDoesNotContain !== undefined) {
        localVarQueryParameter["paymentToName.doesNotContain"] =
          paymentToNameDoesNotContain;
      }

      if (paymentToNameEquals !== undefined) {
        localVarQueryParameter["paymentToName.equals"] = paymentToNameEquals;
      }

      if (paymentToNameNotEquals !== undefined) {
        localVarQueryParameter["paymentToName.notEquals"] =
          paymentToNameNotEquals;
      }

      if (paymentToNameSpecified !== undefined) {
        localVarQueryParameter["paymentToName.specified"] =
          paymentToNameSpecified;
      }

      if (paymentToNameIn) {
        localVarQueryParameter["paymentToName.in"] = paymentToNameIn;
      }

      if (paymentToNameNotIn) {
        localVarQueryParameter["paymentToName.notIn"] = paymentToNameNotIn;
      }

      if (paymentFromMobileContains !== undefined) {
        localVarQueryParameter["paymentFromMobile.contains"] =
          paymentFromMobileContains;
      }

      if (paymentFromMobileDoesNotContain !== undefined) {
        localVarQueryParameter["paymentFromMobile.doesNotContain"] =
          paymentFromMobileDoesNotContain;
      }

      if (paymentFromMobileEquals !== undefined) {
        localVarQueryParameter["paymentFromMobile.equals"] =
          paymentFromMobileEquals;
      }

      if (paymentFromMobileNotEquals !== undefined) {
        localVarQueryParameter["paymentFromMobile.notEquals"] =
          paymentFromMobileNotEquals;
      }

      if (paymentFromMobileSpecified !== undefined) {
        localVarQueryParameter["paymentFromMobile.specified"] =
          paymentFromMobileSpecified;
      }

      if (paymentFromMobileIn) {
        localVarQueryParameter["paymentFromMobile.in"] = paymentFromMobileIn;
      }

      if (paymentFromMobileNotIn) {
        localVarQueryParameter["paymentFromMobile.notIn"] =
          paymentFromMobileNotIn;
      }

      if (paymentToMobileContains !== undefined) {
        localVarQueryParameter["paymentToMobile.contains"] =
          paymentToMobileContains;
      }

      if (paymentToMobileDoesNotContain !== undefined) {
        localVarQueryParameter["paymentToMobile.doesNotContain"] =
          paymentToMobileDoesNotContain;
      }

      if (paymentToMobileEquals !== undefined) {
        localVarQueryParameter["paymentToMobile.equals"] =
          paymentToMobileEquals;
      }

      if (paymentToMobileNotEquals !== undefined) {
        localVarQueryParameter["paymentToMobile.notEquals"] =
          paymentToMobileNotEquals;
      }

      if (paymentToMobileSpecified !== undefined) {
        localVarQueryParameter["paymentToMobile.specified"] =
          paymentToMobileSpecified;
      }

      if (paymentToMobileIn) {
        localVarQueryParameter["paymentToMobile.in"] = paymentToMobileIn;
      }

      if (paymentToMobileNotIn) {
        localVarQueryParameter["paymentToMobile.notIn"] = paymentToMobileNotIn;
      }

      if (momoTransTypeEquals !== undefined) {
        localVarQueryParameter["momoTransType.equals"] = momoTransTypeEquals;
      }

      if (momoTransTypeNotEquals !== undefined) {
        localVarQueryParameter["momoTransType.notEquals"] =
          momoTransTypeNotEquals;
      }

      if (momoTransTypeSpecified !== undefined) {
        localVarQueryParameter["momoTransType.specified"] =
          momoTransTypeSpecified;
      }

      if (momoTransTypeIn) {
        localVarQueryParameter["momoTransType.in"] = momoTransTypeIn;
      }

      if (momoTransTypeNotIn) {
        localVarQueryParameter["momoTransType.notIn"] = momoTransTypeNotIn;
      }

      if (paymentExtIdContains !== undefined) {
        localVarQueryParameter["paymentExtId.contains"] = paymentExtIdContains;
      }

      if (paymentExtIdDoesNotContain !== undefined) {
        localVarQueryParameter["paymentExtId.doesNotContain"] =
          paymentExtIdDoesNotContain;
      }

      if (paymentExtIdEquals !== undefined) {
        localVarQueryParameter["paymentExtId.equals"] = paymentExtIdEquals;
      }

      if (paymentExtIdNotEquals !== undefined) {
        localVarQueryParameter["paymentExtId.notEquals"] =
          paymentExtIdNotEquals;
      }

      if (paymentExtIdSpecified !== undefined) {
        localVarQueryParameter["paymentExtId.specified"] =
          paymentExtIdSpecified;
      }

      if (paymentExtIdIn) {
        localVarQueryParameter["paymentExtId.in"] = paymentExtIdIn;
      }

      if (paymentExtIdNotIn) {
        localVarQueryParameter["paymentExtId.notIn"] = paymentExtIdNotIn;
      }

      if (humanSaysOkEquals !== undefined) {
        localVarQueryParameter["humanSaysOk.equals"] = humanSaysOkEquals;
      }

      if (humanSaysOkNotEquals !== undefined) {
        localVarQueryParameter["humanSaysOk.notEquals"] = humanSaysOkNotEquals;
      }

      if (humanSaysOkSpecified !== undefined) {
        localVarQueryParameter["humanSaysOk.specified"] = humanSaysOkSpecified;
      }

      if (humanSaysOkIn) {
        localVarQueryParameter["humanSaysOk.in"] = humanSaysOkIn;
      }

      if (humanSaysOkNotIn) {
        localVarQueryParameter["humanSaysOk.notIn"] = humanSaysOkNotIn;
      }

      if (feeGreaterThan !== undefined) {
        localVarQueryParameter["fee.greaterThan"] = feeGreaterThan;
      }

      if (feeLessThan !== undefined) {
        localVarQueryParameter["fee.lessThan"] = feeLessThan;
      }

      if (feeGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["fee.greaterThanOrEqual"] =
          feeGreaterThanOrEqual;
      }

      if (feeLessThanOrEqual !== undefined) {
        localVarQueryParameter["fee.lessThanOrEqual"] = feeLessThanOrEqual;
      }

      if (feeEquals !== undefined) {
        localVarQueryParameter["fee.equals"] = feeEquals;
      }

      if (feeNotEquals !== undefined) {
        localVarQueryParameter["fee.notEquals"] = feeNotEquals;
      }

      if (feeSpecified !== undefined) {
        localVarQueryParameter["fee.specified"] = feeSpecified;
      }

      if (feeIn) {
        localVarQueryParameter["fee.in"] = feeIn;
      }

      if (feeNotIn) {
        localVarQueryParameter["fee.notIn"] = feeNotIn;
      }

      if (paymentIdGreaterThan !== undefined) {
        localVarQueryParameter["paymentId.greaterThan"] = paymentIdGreaterThan;
      }

      if (paymentIdLessThan !== undefined) {
        localVarQueryParameter["paymentId.lessThan"] = paymentIdLessThan;
      }

      if (paymentIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["paymentId.greaterThanOrEqual"] =
          paymentIdGreaterThanOrEqual;
      }

      if (paymentIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["paymentId.lessThanOrEqual"] =
          paymentIdLessThanOrEqual;
      }

      if (paymentIdEquals !== undefined) {
        localVarQueryParameter["paymentId.equals"] = paymentIdEquals;
      }

      if (paymentIdNotEquals !== undefined) {
        localVarQueryParameter["paymentId.notEquals"] = paymentIdNotEquals;
      }

      if (paymentIdSpecified !== undefined) {
        localVarQueryParameter["paymentId.specified"] = paymentIdSpecified;
      }

      if (paymentIdIn) {
        localVarQueryParameter["paymentId.in"] = paymentIdIn;
      }

      if (paymentIdNotIn) {
        localVarQueryParameter["paymentId.notIn"] = paymentIdNotIn;
      }

      if (dependsOnPaymentTransactionIdGreaterThan !== undefined) {
        localVarQueryParameter["dependsOnPaymentTransactionId.greaterThan"] =
          dependsOnPaymentTransactionIdGreaterThan;
      }

      if (dependsOnPaymentTransactionIdLessThan !== undefined) {
        localVarQueryParameter["dependsOnPaymentTransactionId.lessThan"] =
          dependsOnPaymentTransactionIdLessThan;
      }

      if (dependsOnPaymentTransactionIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter[
          "dependsOnPaymentTransactionId.greaterThanOrEqual"
        ] = dependsOnPaymentTransactionIdGreaterThanOrEqual;
      }

      if (dependsOnPaymentTransactionIdLessThanOrEqual !== undefined) {
        localVarQueryParameter[
          "dependsOnPaymentTransactionId.lessThanOrEqual"
        ] = dependsOnPaymentTransactionIdLessThanOrEqual;
      }

      if (dependsOnPaymentTransactionIdEquals !== undefined) {
        localVarQueryParameter["dependsOnPaymentTransactionId.equals"] =
          dependsOnPaymentTransactionIdEquals;
      }

      if (dependsOnPaymentTransactionIdNotEquals !== undefined) {
        localVarQueryParameter["dependsOnPaymentTransactionId.notEquals"] =
          dependsOnPaymentTransactionIdNotEquals;
      }

      if (dependsOnPaymentTransactionIdSpecified !== undefined) {
        localVarQueryParameter["dependsOnPaymentTransactionId.specified"] =
          dependsOnPaymentTransactionIdSpecified;
      }

      if (dependsOnPaymentTransactionIdIn) {
        localVarQueryParameter["dependsOnPaymentTransactionId.in"] =
          dependsOnPaymentTransactionIdIn;
      }

      if (dependsOnPaymentTransactionIdNotIn) {
        localVarQueryParameter["dependsOnPaymentTransactionId.notIn"] =
          dependsOnPaymentTransactionIdNotIn;
      }

      if (distinct !== undefined) {
        localVarQueryParameter["distinct"] = distinct;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentTransaction: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPaymentTransaction", "id", id);
      const localVarPath = `/api/payment-transactions/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {PaymentTransactionDTO} paymentTransactionDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdatePaymentTransaction: async (
      id: number,
      paymentTransactionDTO: PaymentTransactionDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdatePaymentTransaction", "id", id);
      // verify required parameter 'paymentTransactionDTO' is not null or undefined
      assertParamExists(
        "partialUpdatePaymentTransaction",
        "paymentTransactionDTO",
        paymentTransactionDTO
      );
      const localVarPath = `/api/payment-transactions/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        paymentTransactionDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PaymentTransactionResourceApi - functional programming interface
 * @export
 */
export const PaymentTransactionResourceApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    PaymentTransactionResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activatePaymentTransaction(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaymentTransactionDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.activatePaymentTransaction(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentPurposeContains]
     * @param {string} [paymentPurposeDoesNotContain]
     * @param {string} [paymentPurposeEquals]
     * @param {string} [paymentPurposeNotEquals]
     * @param {boolean} [paymentPurposeSpecified]
     * @param {Array<string>} [paymentPurposeIn]
     * @param {Array<string>} [paymentPurposeNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [paymentTriggeredDateGreaterThan]
     * @param {string} [paymentTriggeredDateLessThan]
     * @param {string} [paymentTriggeredDateGreaterThanOrEqual]
     * @param {string} [paymentTriggeredDateLessThanOrEqual]
     * @param {string} [paymentTriggeredDateEquals]
     * @param {string} [paymentTriggeredDateNotEquals]
     * @param {boolean} [paymentTriggeredDateSpecified]
     * @param {Array<string>} [paymentTriggeredDateIn]
     * @param {Array<string>} [paymentTriggeredDateNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeNotEquals]
     * @param {boolean} [networkTypeSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeEquals]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeNotEquals]
     * @param {boolean} [momoTransTypeSpecified]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeIn]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeNotIn]
     * @param {string} [paymentExtIdContains]
     * @param {string} [paymentExtIdDoesNotContain]
     * @param {string} [paymentExtIdEquals]
     * @param {string} [paymentExtIdNotEquals]
     * @param {boolean} [paymentExtIdSpecified]
     * @param {Array<string>} [paymentExtIdIn]
     * @param {Array<string>} [paymentExtIdNotIn]
     * @param {boolean} [humanSaysOkEquals]
     * @param {boolean} [humanSaysOkNotEquals]
     * @param {boolean} [humanSaysOkSpecified]
     * @param {Array<boolean>} [humanSaysOkIn]
     * @param {Array<boolean>} [humanSaysOkNotIn]
     * @param {number} [feeGreaterThan]
     * @param {number} [feeLessThan]
     * @param {number} [feeGreaterThanOrEqual]
     * @param {number} [feeLessThanOrEqual]
     * @param {number} [feeEquals]
     * @param {number} [feeNotEquals]
     * @param {boolean} [feeSpecified]
     * @param {Array<number>} [feeIn]
     * @param {Array<number>} [feeNotIn]
     * @param {number} [paymentIdGreaterThan]
     * @param {number} [paymentIdLessThan]
     * @param {number} [paymentIdGreaterThanOrEqual]
     * @param {number} [paymentIdLessThanOrEqual]
     * @param {number} [paymentIdEquals]
     * @param {number} [paymentIdNotEquals]
     * @param {boolean} [paymentIdSpecified]
     * @param {Array<number>} [paymentIdIn]
     * @param {Array<number>} [paymentIdNotIn]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThan]
     * @param {number} [dependsOnPaymentTransactionIdLessThan]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdLessThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdEquals]
     * @param {number} [dependsOnPaymentTransactionIdNotEquals]
     * @param {boolean} [dependsOnPaymentTransactionIdSpecified]
     * @param {Array<number>} [dependsOnPaymentTransactionIdIn]
     * @param {Array<number>} [dependsOnPaymentTransactionIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countPaymentTransactions(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentPurposeContains?: string,
      paymentPurposeDoesNotContain?: string,
      paymentPurposeEquals?: string,
      paymentPurposeNotEquals?: string,
      paymentPurposeSpecified?: boolean,
      paymentPurposeIn?: Array<string>,
      paymentPurposeNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      paymentTriggeredDateGreaterThan?: string,
      paymentTriggeredDateLessThan?: string,
      paymentTriggeredDateGreaterThanOrEqual?: string,
      paymentTriggeredDateLessThanOrEqual?: string,
      paymentTriggeredDateEquals?: string,
      paymentTriggeredDateNotEquals?: string,
      paymentTriggeredDateSpecified?: boolean,
      paymentTriggeredDateIn?: Array<string>,
      paymentTriggeredDateNotIn?: Array<string>,
      networkTypeEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeSpecified?: boolean,
      networkTypeIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkTypeNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      momoTransTypeEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeNotEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeSpecified?: boolean,
      momoTransTypeIn?: Array<"CTM" | "MTC" | "SMS">,
      momoTransTypeNotIn?: Array<"CTM" | "MTC" | "SMS">,
      paymentExtIdContains?: string,
      paymentExtIdDoesNotContain?: string,
      paymentExtIdEquals?: string,
      paymentExtIdNotEquals?: string,
      paymentExtIdSpecified?: boolean,
      paymentExtIdIn?: Array<string>,
      paymentExtIdNotIn?: Array<string>,
      humanSaysOkEquals?: boolean,
      humanSaysOkNotEquals?: boolean,
      humanSaysOkSpecified?: boolean,
      humanSaysOkIn?: Array<boolean>,
      humanSaysOkNotIn?: Array<boolean>,
      feeGreaterThan?: number,
      feeLessThan?: number,
      feeGreaterThanOrEqual?: number,
      feeLessThanOrEqual?: number,
      feeEquals?: number,
      feeNotEquals?: number,
      feeSpecified?: boolean,
      feeIn?: Array<number>,
      feeNotIn?: Array<number>,
      paymentIdGreaterThan?: number,
      paymentIdLessThan?: number,
      paymentIdGreaterThanOrEqual?: number,
      paymentIdLessThanOrEqual?: number,
      paymentIdEquals?: number,
      paymentIdNotEquals?: number,
      paymentIdSpecified?: boolean,
      paymentIdIn?: Array<number>,
      paymentIdNotIn?: Array<number>,
      dependsOnPaymentTransactionIdGreaterThan?: number,
      dependsOnPaymentTransactionIdLessThan?: number,
      dependsOnPaymentTransactionIdGreaterThanOrEqual?: number,
      dependsOnPaymentTransactionIdLessThanOrEqual?: number,
      dependsOnPaymentTransactionIdEquals?: number,
      dependsOnPaymentTransactionIdNotEquals?: number,
      dependsOnPaymentTransactionIdSpecified?: boolean,
      dependsOnPaymentTransactionIdIn?: Array<number>,
      dependsOnPaymentTransactionIdNotIn?: Array<number>,
      distinct?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.countPaymentTransactions(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          paymentPurposeContains,
          paymentPurposeDoesNotContain,
          paymentPurposeEquals,
          paymentPurposeNotEquals,
          paymentPurposeSpecified,
          paymentPurposeIn,
          paymentPurposeNotIn,
          paymentDateGreaterThan,
          paymentDateLessThan,
          paymentDateGreaterThanOrEqual,
          paymentDateLessThanOrEqual,
          paymentDateEquals,
          paymentDateNotEquals,
          paymentDateSpecified,
          paymentDateIn,
          paymentDateNotIn,
          paymentTriggeredDateGreaterThan,
          paymentTriggeredDateLessThan,
          paymentTriggeredDateGreaterThanOrEqual,
          paymentTriggeredDateLessThanOrEqual,
          paymentTriggeredDateEquals,
          paymentTriggeredDateNotEquals,
          paymentTriggeredDateSpecified,
          paymentTriggeredDateIn,
          paymentTriggeredDateNotIn,
          networkTypeEquals,
          networkTypeNotEquals,
          networkTypeSpecified,
          networkTypeIn,
          networkTypeNotIn,
          paymentErroneousEquals,
          paymentErroneousNotEquals,
          paymentErroneousSpecified,
          paymentErroneousIn,
          paymentErroneousNotIn,
          paymentStatusMessageContains,
          paymentStatusMessageDoesNotContain,
          paymentStatusMessageEquals,
          paymentStatusMessageNotEquals,
          paymentStatusMessageSpecified,
          paymentStatusMessageIn,
          paymentStatusMessageNotIn,
          paymentResponseContains,
          paymentResponseDoesNotContain,
          paymentResponseEquals,
          paymentResponseNotEquals,
          paymentResponseSpecified,
          paymentResponseIn,
          paymentResponseNotIn,
          priceGreaterThan,
          priceLessThan,
          priceGreaterThanOrEqual,
          priceLessThanOrEqual,
          priceEquals,
          priceNotEquals,
          priceSpecified,
          priceIn,
          priceNotIn,
          paymentFromNameContains,
          paymentFromNameDoesNotContain,
          paymentFromNameEquals,
          paymentFromNameNotEquals,
          paymentFromNameSpecified,
          paymentFromNameIn,
          paymentFromNameNotIn,
          paymentToNameContains,
          paymentToNameDoesNotContain,
          paymentToNameEquals,
          paymentToNameNotEquals,
          paymentToNameSpecified,
          paymentToNameIn,
          paymentToNameNotIn,
          paymentFromMobileContains,
          paymentFromMobileDoesNotContain,
          paymentFromMobileEquals,
          paymentFromMobileNotEquals,
          paymentFromMobileSpecified,
          paymentFromMobileIn,
          paymentFromMobileNotIn,
          paymentToMobileContains,
          paymentToMobileDoesNotContain,
          paymentToMobileEquals,
          paymentToMobileNotEquals,
          paymentToMobileSpecified,
          paymentToMobileIn,
          paymentToMobileNotIn,
          momoTransTypeEquals,
          momoTransTypeNotEquals,
          momoTransTypeSpecified,
          momoTransTypeIn,
          momoTransTypeNotIn,
          paymentExtIdContains,
          paymentExtIdDoesNotContain,
          paymentExtIdEquals,
          paymentExtIdNotEquals,
          paymentExtIdSpecified,
          paymentExtIdIn,
          paymentExtIdNotIn,
          humanSaysOkEquals,
          humanSaysOkNotEquals,
          humanSaysOkSpecified,
          humanSaysOkIn,
          humanSaysOkNotIn,
          feeGreaterThan,
          feeLessThan,
          feeGreaterThanOrEqual,
          feeLessThanOrEqual,
          feeEquals,
          feeNotEquals,
          feeSpecified,
          feeIn,
          feeNotIn,
          paymentIdGreaterThan,
          paymentIdLessThan,
          paymentIdGreaterThanOrEqual,
          paymentIdLessThanOrEqual,
          paymentIdEquals,
          paymentIdNotEquals,
          paymentIdSpecified,
          paymentIdIn,
          paymentIdNotIn,
          dependsOnPaymentTransactionIdGreaterThan,
          dependsOnPaymentTransactionIdLessThan,
          dependsOnPaymentTransactionIdGreaterThanOrEqual,
          dependsOnPaymentTransactionIdLessThanOrEqual,
          dependsOnPaymentTransactionIdEquals,
          dependsOnPaymentTransactionIdNotEquals,
          dependsOnPaymentTransactionIdSpecified,
          dependsOnPaymentTransactionIdIn,
          dependsOnPaymentTransactionIdNotIn,
          distinct,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {PaymentTransactionDTO} paymentTransactionDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPaymentTransaction(
      paymentTransactionDTO: PaymentTransactionDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaymentTransactionDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createPaymentTransaction(
          paymentTransactionDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentPurposeContains]
     * @param {string} [paymentPurposeDoesNotContain]
     * @param {string} [paymentPurposeEquals]
     * @param {string} [paymentPurposeNotEquals]
     * @param {boolean} [paymentPurposeSpecified]
     * @param {Array<string>} [paymentPurposeIn]
     * @param {Array<string>} [paymentPurposeNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [paymentTriggeredDateGreaterThan]
     * @param {string} [paymentTriggeredDateLessThan]
     * @param {string} [paymentTriggeredDateGreaterThanOrEqual]
     * @param {string} [paymentTriggeredDateLessThanOrEqual]
     * @param {string} [paymentTriggeredDateEquals]
     * @param {string} [paymentTriggeredDateNotEquals]
     * @param {boolean} [paymentTriggeredDateSpecified]
     * @param {Array<string>} [paymentTriggeredDateIn]
     * @param {Array<string>} [paymentTriggeredDateNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeNotEquals]
     * @param {boolean} [networkTypeSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeEquals]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeNotEquals]
     * @param {boolean} [momoTransTypeSpecified]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeIn]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeNotIn]
     * @param {string} [paymentExtIdContains]
     * @param {string} [paymentExtIdDoesNotContain]
     * @param {string} [paymentExtIdEquals]
     * @param {string} [paymentExtIdNotEquals]
     * @param {boolean} [paymentExtIdSpecified]
     * @param {Array<string>} [paymentExtIdIn]
     * @param {Array<string>} [paymentExtIdNotIn]
     * @param {boolean} [humanSaysOkEquals]
     * @param {boolean} [humanSaysOkNotEquals]
     * @param {boolean} [humanSaysOkSpecified]
     * @param {Array<boolean>} [humanSaysOkIn]
     * @param {Array<boolean>} [humanSaysOkNotIn]
     * @param {number} [feeGreaterThan]
     * @param {number} [feeLessThan]
     * @param {number} [feeGreaterThanOrEqual]
     * @param {number} [feeLessThanOrEqual]
     * @param {number} [feeEquals]
     * @param {number} [feeNotEquals]
     * @param {boolean} [feeSpecified]
     * @param {Array<number>} [feeIn]
     * @param {Array<number>} [feeNotIn]
     * @param {number} [paymentIdGreaterThan]
     * @param {number} [paymentIdLessThan]
     * @param {number} [paymentIdGreaterThanOrEqual]
     * @param {number} [paymentIdLessThanOrEqual]
     * @param {number} [paymentIdEquals]
     * @param {number} [paymentIdNotEquals]
     * @param {boolean} [paymentIdSpecified]
     * @param {Array<number>} [paymentIdIn]
     * @param {Array<number>} [paymentIdNotIn]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThan]
     * @param {number} [dependsOnPaymentTransactionIdLessThan]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdLessThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdEquals]
     * @param {number} [dependsOnPaymentTransactionIdNotEquals]
     * @param {boolean} [dependsOnPaymentTransactionIdSpecified]
     * @param {Array<number>} [dependsOnPaymentTransactionIdIn]
     * @param {Array<number>} [dependsOnPaymentTransactionIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllPaymentTransactions(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentPurposeContains?: string,
      paymentPurposeDoesNotContain?: string,
      paymentPurposeEquals?: string,
      paymentPurposeNotEquals?: string,
      paymentPurposeSpecified?: boolean,
      paymentPurposeIn?: Array<string>,
      paymentPurposeNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      paymentTriggeredDateGreaterThan?: string,
      paymentTriggeredDateLessThan?: string,
      paymentTriggeredDateGreaterThanOrEqual?: string,
      paymentTriggeredDateLessThanOrEqual?: string,
      paymentTriggeredDateEquals?: string,
      paymentTriggeredDateNotEquals?: string,
      paymentTriggeredDateSpecified?: boolean,
      paymentTriggeredDateIn?: Array<string>,
      paymentTriggeredDateNotIn?: Array<string>,
      networkTypeEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeSpecified?: boolean,
      networkTypeIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkTypeNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      momoTransTypeEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeNotEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeSpecified?: boolean,
      momoTransTypeIn?: Array<"CTM" | "MTC" | "SMS">,
      momoTransTypeNotIn?: Array<"CTM" | "MTC" | "SMS">,
      paymentExtIdContains?: string,
      paymentExtIdDoesNotContain?: string,
      paymentExtIdEquals?: string,
      paymentExtIdNotEquals?: string,
      paymentExtIdSpecified?: boolean,
      paymentExtIdIn?: Array<string>,
      paymentExtIdNotIn?: Array<string>,
      humanSaysOkEquals?: boolean,
      humanSaysOkNotEquals?: boolean,
      humanSaysOkSpecified?: boolean,
      humanSaysOkIn?: Array<boolean>,
      humanSaysOkNotIn?: Array<boolean>,
      feeGreaterThan?: number,
      feeLessThan?: number,
      feeGreaterThanOrEqual?: number,
      feeLessThanOrEqual?: number,
      feeEquals?: number,
      feeNotEquals?: number,
      feeSpecified?: boolean,
      feeIn?: Array<number>,
      feeNotIn?: Array<number>,
      paymentIdGreaterThan?: number,
      paymentIdLessThan?: number,
      paymentIdGreaterThanOrEqual?: number,
      paymentIdLessThanOrEqual?: number,
      paymentIdEquals?: number,
      paymentIdNotEquals?: number,
      paymentIdSpecified?: boolean,
      paymentIdIn?: Array<number>,
      paymentIdNotIn?: Array<number>,
      dependsOnPaymentTransactionIdGreaterThan?: number,
      dependsOnPaymentTransactionIdLessThan?: number,
      dependsOnPaymentTransactionIdGreaterThanOrEqual?: number,
      dependsOnPaymentTransactionIdLessThanOrEqual?: number,
      dependsOnPaymentTransactionIdEquals?: number,
      dependsOnPaymentTransactionIdNotEquals?: number,
      dependsOnPaymentTransactionIdSpecified?: boolean,
      dependsOnPaymentTransactionIdIn?: Array<number>,
      dependsOnPaymentTransactionIdNotIn?: Array<number>,
      distinct?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<PaymentTransactionDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllPaymentTransactions(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          paymentPurposeContains,
          paymentPurposeDoesNotContain,
          paymentPurposeEquals,
          paymentPurposeNotEquals,
          paymentPurposeSpecified,
          paymentPurposeIn,
          paymentPurposeNotIn,
          paymentDateGreaterThan,
          paymentDateLessThan,
          paymentDateGreaterThanOrEqual,
          paymentDateLessThanOrEqual,
          paymentDateEquals,
          paymentDateNotEquals,
          paymentDateSpecified,
          paymentDateIn,
          paymentDateNotIn,
          paymentTriggeredDateGreaterThan,
          paymentTriggeredDateLessThan,
          paymentTriggeredDateGreaterThanOrEqual,
          paymentTriggeredDateLessThanOrEqual,
          paymentTriggeredDateEquals,
          paymentTriggeredDateNotEquals,
          paymentTriggeredDateSpecified,
          paymentTriggeredDateIn,
          paymentTriggeredDateNotIn,
          networkTypeEquals,
          networkTypeNotEquals,
          networkTypeSpecified,
          networkTypeIn,
          networkTypeNotIn,
          paymentErroneousEquals,
          paymentErroneousNotEquals,
          paymentErroneousSpecified,
          paymentErroneousIn,
          paymentErroneousNotIn,
          paymentStatusMessageContains,
          paymentStatusMessageDoesNotContain,
          paymentStatusMessageEquals,
          paymentStatusMessageNotEquals,
          paymentStatusMessageSpecified,
          paymentStatusMessageIn,
          paymentStatusMessageNotIn,
          paymentResponseContains,
          paymentResponseDoesNotContain,
          paymentResponseEquals,
          paymentResponseNotEquals,
          paymentResponseSpecified,
          paymentResponseIn,
          paymentResponseNotIn,
          priceGreaterThan,
          priceLessThan,
          priceGreaterThanOrEqual,
          priceLessThanOrEqual,
          priceEquals,
          priceNotEquals,
          priceSpecified,
          priceIn,
          priceNotIn,
          paymentFromNameContains,
          paymentFromNameDoesNotContain,
          paymentFromNameEquals,
          paymentFromNameNotEquals,
          paymentFromNameSpecified,
          paymentFromNameIn,
          paymentFromNameNotIn,
          paymentToNameContains,
          paymentToNameDoesNotContain,
          paymentToNameEquals,
          paymentToNameNotEquals,
          paymentToNameSpecified,
          paymentToNameIn,
          paymentToNameNotIn,
          paymentFromMobileContains,
          paymentFromMobileDoesNotContain,
          paymentFromMobileEquals,
          paymentFromMobileNotEquals,
          paymentFromMobileSpecified,
          paymentFromMobileIn,
          paymentFromMobileNotIn,
          paymentToMobileContains,
          paymentToMobileDoesNotContain,
          paymentToMobileEquals,
          paymentToMobileNotEquals,
          paymentToMobileSpecified,
          paymentToMobileIn,
          paymentToMobileNotIn,
          momoTransTypeEquals,
          momoTransTypeNotEquals,
          momoTransTypeSpecified,
          momoTransTypeIn,
          momoTransTypeNotIn,
          paymentExtIdContains,
          paymentExtIdDoesNotContain,
          paymentExtIdEquals,
          paymentExtIdNotEquals,
          paymentExtIdSpecified,
          paymentExtIdIn,
          paymentExtIdNotIn,
          humanSaysOkEquals,
          humanSaysOkNotEquals,
          humanSaysOkSpecified,
          humanSaysOkIn,
          humanSaysOkNotIn,
          feeGreaterThan,
          feeLessThan,
          feeGreaterThanOrEqual,
          feeLessThanOrEqual,
          feeEquals,
          feeNotEquals,
          feeSpecified,
          feeIn,
          feeNotIn,
          paymentIdGreaterThan,
          paymentIdLessThan,
          paymentIdGreaterThanOrEqual,
          paymentIdLessThanOrEqual,
          paymentIdEquals,
          paymentIdNotEquals,
          paymentIdSpecified,
          paymentIdIn,
          paymentIdNotIn,
          dependsOnPaymentTransactionIdGreaterThan,
          dependsOnPaymentTransactionIdLessThan,
          dependsOnPaymentTransactionIdGreaterThanOrEqual,
          dependsOnPaymentTransactionIdLessThanOrEqual,
          dependsOnPaymentTransactionIdEquals,
          dependsOnPaymentTransactionIdNotEquals,
          dependsOnPaymentTransactionIdSpecified,
          dependsOnPaymentTransactionIdIn,
          dependsOnPaymentTransactionIdNotIn,
          distinct,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPaymentTransaction(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaymentTransactionDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPaymentTransaction(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {PaymentTransactionDTO} paymentTransactionDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdatePaymentTransaction(
      id: number,
      paymentTransactionDTO: PaymentTransactionDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PaymentTransactionDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdatePaymentTransaction(
          id,
          paymentTransactionDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PaymentTransactionResourceApi - factory interface
 * @export
 */
export const PaymentTransactionResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PaymentTransactionResourceApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activatePaymentTransaction(
      id: number,
      options?: any
    ): AxiosPromise<PaymentTransactionDTO> {
      return localVarFp
        .activatePaymentTransaction(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentPurposeContains]
     * @param {string} [paymentPurposeDoesNotContain]
     * @param {string} [paymentPurposeEquals]
     * @param {string} [paymentPurposeNotEquals]
     * @param {boolean} [paymentPurposeSpecified]
     * @param {Array<string>} [paymentPurposeIn]
     * @param {Array<string>} [paymentPurposeNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [paymentTriggeredDateGreaterThan]
     * @param {string} [paymentTriggeredDateLessThan]
     * @param {string} [paymentTriggeredDateGreaterThanOrEqual]
     * @param {string} [paymentTriggeredDateLessThanOrEqual]
     * @param {string} [paymentTriggeredDateEquals]
     * @param {string} [paymentTriggeredDateNotEquals]
     * @param {boolean} [paymentTriggeredDateSpecified]
     * @param {Array<string>} [paymentTriggeredDateIn]
     * @param {Array<string>} [paymentTriggeredDateNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeNotEquals]
     * @param {boolean} [networkTypeSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeEquals]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeNotEquals]
     * @param {boolean} [momoTransTypeSpecified]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeIn]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeNotIn]
     * @param {string} [paymentExtIdContains]
     * @param {string} [paymentExtIdDoesNotContain]
     * @param {string} [paymentExtIdEquals]
     * @param {string} [paymentExtIdNotEquals]
     * @param {boolean} [paymentExtIdSpecified]
     * @param {Array<string>} [paymentExtIdIn]
     * @param {Array<string>} [paymentExtIdNotIn]
     * @param {boolean} [humanSaysOkEquals]
     * @param {boolean} [humanSaysOkNotEquals]
     * @param {boolean} [humanSaysOkSpecified]
     * @param {Array<boolean>} [humanSaysOkIn]
     * @param {Array<boolean>} [humanSaysOkNotIn]
     * @param {number} [feeGreaterThan]
     * @param {number} [feeLessThan]
     * @param {number} [feeGreaterThanOrEqual]
     * @param {number} [feeLessThanOrEqual]
     * @param {number} [feeEquals]
     * @param {number} [feeNotEquals]
     * @param {boolean} [feeSpecified]
     * @param {Array<number>} [feeIn]
     * @param {Array<number>} [feeNotIn]
     * @param {number} [paymentIdGreaterThan]
     * @param {number} [paymentIdLessThan]
     * @param {number} [paymentIdGreaterThanOrEqual]
     * @param {number} [paymentIdLessThanOrEqual]
     * @param {number} [paymentIdEquals]
     * @param {number} [paymentIdNotEquals]
     * @param {boolean} [paymentIdSpecified]
     * @param {Array<number>} [paymentIdIn]
     * @param {Array<number>} [paymentIdNotIn]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThan]
     * @param {number} [dependsOnPaymentTransactionIdLessThan]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdLessThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdEquals]
     * @param {number} [dependsOnPaymentTransactionIdNotEquals]
     * @param {boolean} [dependsOnPaymentTransactionIdSpecified]
     * @param {Array<number>} [dependsOnPaymentTransactionIdIn]
     * @param {Array<number>} [dependsOnPaymentTransactionIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countPaymentTransactions(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentPurposeContains?: string,
      paymentPurposeDoesNotContain?: string,
      paymentPurposeEquals?: string,
      paymentPurposeNotEquals?: string,
      paymentPurposeSpecified?: boolean,
      paymentPurposeIn?: Array<string>,
      paymentPurposeNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      paymentTriggeredDateGreaterThan?: string,
      paymentTriggeredDateLessThan?: string,
      paymentTriggeredDateGreaterThanOrEqual?: string,
      paymentTriggeredDateLessThanOrEqual?: string,
      paymentTriggeredDateEquals?: string,
      paymentTriggeredDateNotEquals?: string,
      paymentTriggeredDateSpecified?: boolean,
      paymentTriggeredDateIn?: Array<string>,
      paymentTriggeredDateNotIn?: Array<string>,
      networkTypeEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeSpecified?: boolean,
      networkTypeIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkTypeNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      momoTransTypeEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeNotEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeSpecified?: boolean,
      momoTransTypeIn?: Array<"CTM" | "MTC" | "SMS">,
      momoTransTypeNotIn?: Array<"CTM" | "MTC" | "SMS">,
      paymentExtIdContains?: string,
      paymentExtIdDoesNotContain?: string,
      paymentExtIdEquals?: string,
      paymentExtIdNotEquals?: string,
      paymentExtIdSpecified?: boolean,
      paymentExtIdIn?: Array<string>,
      paymentExtIdNotIn?: Array<string>,
      humanSaysOkEquals?: boolean,
      humanSaysOkNotEquals?: boolean,
      humanSaysOkSpecified?: boolean,
      humanSaysOkIn?: Array<boolean>,
      humanSaysOkNotIn?: Array<boolean>,
      feeGreaterThan?: number,
      feeLessThan?: number,
      feeGreaterThanOrEqual?: number,
      feeLessThanOrEqual?: number,
      feeEquals?: number,
      feeNotEquals?: number,
      feeSpecified?: boolean,
      feeIn?: Array<number>,
      feeNotIn?: Array<number>,
      paymentIdGreaterThan?: number,
      paymentIdLessThan?: number,
      paymentIdGreaterThanOrEqual?: number,
      paymentIdLessThanOrEqual?: number,
      paymentIdEquals?: number,
      paymentIdNotEquals?: number,
      paymentIdSpecified?: boolean,
      paymentIdIn?: Array<number>,
      paymentIdNotIn?: Array<number>,
      dependsOnPaymentTransactionIdGreaterThan?: number,
      dependsOnPaymentTransactionIdLessThan?: number,
      dependsOnPaymentTransactionIdGreaterThanOrEqual?: number,
      dependsOnPaymentTransactionIdLessThanOrEqual?: number,
      dependsOnPaymentTransactionIdEquals?: number,
      dependsOnPaymentTransactionIdNotEquals?: number,
      dependsOnPaymentTransactionIdSpecified?: boolean,
      dependsOnPaymentTransactionIdIn?: Array<number>,
      dependsOnPaymentTransactionIdNotIn?: Array<number>,
      distinct?: boolean,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .countPaymentTransactions(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          paymentPurposeContains,
          paymentPurposeDoesNotContain,
          paymentPurposeEquals,
          paymentPurposeNotEquals,
          paymentPurposeSpecified,
          paymentPurposeIn,
          paymentPurposeNotIn,
          paymentDateGreaterThan,
          paymentDateLessThan,
          paymentDateGreaterThanOrEqual,
          paymentDateLessThanOrEqual,
          paymentDateEquals,
          paymentDateNotEquals,
          paymentDateSpecified,
          paymentDateIn,
          paymentDateNotIn,
          paymentTriggeredDateGreaterThan,
          paymentTriggeredDateLessThan,
          paymentTriggeredDateGreaterThanOrEqual,
          paymentTriggeredDateLessThanOrEqual,
          paymentTriggeredDateEquals,
          paymentTriggeredDateNotEquals,
          paymentTriggeredDateSpecified,
          paymentTriggeredDateIn,
          paymentTriggeredDateNotIn,
          networkTypeEquals,
          networkTypeNotEquals,
          networkTypeSpecified,
          networkTypeIn,
          networkTypeNotIn,
          paymentErroneousEquals,
          paymentErroneousNotEquals,
          paymentErroneousSpecified,
          paymentErroneousIn,
          paymentErroneousNotIn,
          paymentStatusMessageContains,
          paymentStatusMessageDoesNotContain,
          paymentStatusMessageEquals,
          paymentStatusMessageNotEquals,
          paymentStatusMessageSpecified,
          paymentStatusMessageIn,
          paymentStatusMessageNotIn,
          paymentResponseContains,
          paymentResponseDoesNotContain,
          paymentResponseEquals,
          paymentResponseNotEquals,
          paymentResponseSpecified,
          paymentResponseIn,
          paymentResponseNotIn,
          priceGreaterThan,
          priceLessThan,
          priceGreaterThanOrEqual,
          priceLessThanOrEqual,
          priceEquals,
          priceNotEquals,
          priceSpecified,
          priceIn,
          priceNotIn,
          paymentFromNameContains,
          paymentFromNameDoesNotContain,
          paymentFromNameEquals,
          paymentFromNameNotEquals,
          paymentFromNameSpecified,
          paymentFromNameIn,
          paymentFromNameNotIn,
          paymentToNameContains,
          paymentToNameDoesNotContain,
          paymentToNameEquals,
          paymentToNameNotEquals,
          paymentToNameSpecified,
          paymentToNameIn,
          paymentToNameNotIn,
          paymentFromMobileContains,
          paymentFromMobileDoesNotContain,
          paymentFromMobileEquals,
          paymentFromMobileNotEquals,
          paymentFromMobileSpecified,
          paymentFromMobileIn,
          paymentFromMobileNotIn,
          paymentToMobileContains,
          paymentToMobileDoesNotContain,
          paymentToMobileEquals,
          paymentToMobileNotEquals,
          paymentToMobileSpecified,
          paymentToMobileIn,
          paymentToMobileNotIn,
          momoTransTypeEquals,
          momoTransTypeNotEquals,
          momoTransTypeSpecified,
          momoTransTypeIn,
          momoTransTypeNotIn,
          paymentExtIdContains,
          paymentExtIdDoesNotContain,
          paymentExtIdEquals,
          paymentExtIdNotEquals,
          paymentExtIdSpecified,
          paymentExtIdIn,
          paymentExtIdNotIn,
          humanSaysOkEquals,
          humanSaysOkNotEquals,
          humanSaysOkSpecified,
          humanSaysOkIn,
          humanSaysOkNotIn,
          feeGreaterThan,
          feeLessThan,
          feeGreaterThanOrEqual,
          feeLessThanOrEqual,
          feeEquals,
          feeNotEquals,
          feeSpecified,
          feeIn,
          feeNotIn,
          paymentIdGreaterThan,
          paymentIdLessThan,
          paymentIdGreaterThanOrEqual,
          paymentIdLessThanOrEqual,
          paymentIdEquals,
          paymentIdNotEquals,
          paymentIdSpecified,
          paymentIdIn,
          paymentIdNotIn,
          dependsOnPaymentTransactionIdGreaterThan,
          dependsOnPaymentTransactionIdLessThan,
          dependsOnPaymentTransactionIdGreaterThanOrEqual,
          dependsOnPaymentTransactionIdLessThanOrEqual,
          dependsOnPaymentTransactionIdEquals,
          dependsOnPaymentTransactionIdNotEquals,
          dependsOnPaymentTransactionIdSpecified,
          dependsOnPaymentTransactionIdIn,
          dependsOnPaymentTransactionIdNotIn,
          distinct,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PaymentTransactionDTO} paymentTransactionDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentTransaction(
      paymentTransactionDTO: PaymentTransactionDTO,
      options?: any
    ): AxiosPromise<PaymentTransactionDTO> {
      return localVarFp
        .createPaymentTransaction(paymentTransactionDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [paymentPurposeContains]
     * @param {string} [paymentPurposeDoesNotContain]
     * @param {string} [paymentPurposeEquals]
     * @param {string} [paymentPurposeNotEquals]
     * @param {boolean} [paymentPurposeSpecified]
     * @param {Array<string>} [paymentPurposeIn]
     * @param {Array<string>} [paymentPurposeNotIn]
     * @param {string} [paymentDateGreaterThan]
     * @param {string} [paymentDateLessThan]
     * @param {string} [paymentDateGreaterThanOrEqual]
     * @param {string} [paymentDateLessThanOrEqual]
     * @param {string} [paymentDateEquals]
     * @param {string} [paymentDateNotEquals]
     * @param {boolean} [paymentDateSpecified]
     * @param {Array<string>} [paymentDateIn]
     * @param {Array<string>} [paymentDateNotIn]
     * @param {string} [paymentTriggeredDateGreaterThan]
     * @param {string} [paymentTriggeredDateLessThan]
     * @param {string} [paymentTriggeredDateGreaterThanOrEqual]
     * @param {string} [paymentTriggeredDateLessThanOrEqual]
     * @param {string} [paymentTriggeredDateEquals]
     * @param {string} [paymentTriggeredDateNotEquals]
     * @param {boolean} [paymentTriggeredDateSpecified]
     * @param {Array<string>} [paymentTriggeredDateIn]
     * @param {Array<string>} [paymentTriggeredDateNotIn]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeEquals]
     * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeNotEquals]
     * @param {boolean} [networkTypeSpecified]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeIn]
     * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeNotIn]
     * @param {boolean} [paymentErroneousEquals]
     * @param {boolean} [paymentErroneousNotEquals]
     * @param {boolean} [paymentErroneousSpecified]
     * @param {Array<boolean>} [paymentErroneousIn]
     * @param {Array<boolean>} [paymentErroneousNotIn]
     * @param {string} [paymentStatusMessageContains]
     * @param {string} [paymentStatusMessageDoesNotContain]
     * @param {string} [paymentStatusMessageEquals]
     * @param {string} [paymentStatusMessageNotEquals]
     * @param {boolean} [paymentStatusMessageSpecified]
     * @param {Array<string>} [paymentStatusMessageIn]
     * @param {Array<string>} [paymentStatusMessageNotIn]
     * @param {string} [paymentResponseContains]
     * @param {string} [paymentResponseDoesNotContain]
     * @param {string} [paymentResponseEquals]
     * @param {string} [paymentResponseNotEquals]
     * @param {boolean} [paymentResponseSpecified]
     * @param {Array<string>} [paymentResponseIn]
     * @param {Array<string>} [paymentResponseNotIn]
     * @param {number} [priceGreaterThan]
     * @param {number} [priceLessThan]
     * @param {number} [priceGreaterThanOrEqual]
     * @param {number} [priceLessThanOrEqual]
     * @param {number} [priceEquals]
     * @param {number} [priceNotEquals]
     * @param {boolean} [priceSpecified]
     * @param {Array<number>} [priceIn]
     * @param {Array<number>} [priceNotIn]
     * @param {string} [paymentFromNameContains]
     * @param {string} [paymentFromNameDoesNotContain]
     * @param {string} [paymentFromNameEquals]
     * @param {string} [paymentFromNameNotEquals]
     * @param {boolean} [paymentFromNameSpecified]
     * @param {Array<string>} [paymentFromNameIn]
     * @param {Array<string>} [paymentFromNameNotIn]
     * @param {string} [paymentToNameContains]
     * @param {string} [paymentToNameDoesNotContain]
     * @param {string} [paymentToNameEquals]
     * @param {string} [paymentToNameNotEquals]
     * @param {boolean} [paymentToNameSpecified]
     * @param {Array<string>} [paymentToNameIn]
     * @param {Array<string>} [paymentToNameNotIn]
     * @param {string} [paymentFromMobileContains]
     * @param {string} [paymentFromMobileDoesNotContain]
     * @param {string} [paymentFromMobileEquals]
     * @param {string} [paymentFromMobileNotEquals]
     * @param {boolean} [paymentFromMobileSpecified]
     * @param {Array<string>} [paymentFromMobileIn]
     * @param {Array<string>} [paymentFromMobileNotIn]
     * @param {string} [paymentToMobileContains]
     * @param {string} [paymentToMobileDoesNotContain]
     * @param {string} [paymentToMobileEquals]
     * @param {string} [paymentToMobileNotEquals]
     * @param {boolean} [paymentToMobileSpecified]
     * @param {Array<string>} [paymentToMobileIn]
     * @param {Array<string>} [paymentToMobileNotIn]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeEquals]
     * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeNotEquals]
     * @param {boolean} [momoTransTypeSpecified]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeIn]
     * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeNotIn]
     * @param {string} [paymentExtIdContains]
     * @param {string} [paymentExtIdDoesNotContain]
     * @param {string} [paymentExtIdEquals]
     * @param {string} [paymentExtIdNotEquals]
     * @param {boolean} [paymentExtIdSpecified]
     * @param {Array<string>} [paymentExtIdIn]
     * @param {Array<string>} [paymentExtIdNotIn]
     * @param {boolean} [humanSaysOkEquals]
     * @param {boolean} [humanSaysOkNotEquals]
     * @param {boolean} [humanSaysOkSpecified]
     * @param {Array<boolean>} [humanSaysOkIn]
     * @param {Array<boolean>} [humanSaysOkNotIn]
     * @param {number} [feeGreaterThan]
     * @param {number} [feeLessThan]
     * @param {number} [feeGreaterThanOrEqual]
     * @param {number} [feeLessThanOrEqual]
     * @param {number} [feeEquals]
     * @param {number} [feeNotEquals]
     * @param {boolean} [feeSpecified]
     * @param {Array<number>} [feeIn]
     * @param {Array<number>} [feeNotIn]
     * @param {number} [paymentIdGreaterThan]
     * @param {number} [paymentIdLessThan]
     * @param {number} [paymentIdGreaterThanOrEqual]
     * @param {number} [paymentIdLessThanOrEqual]
     * @param {number} [paymentIdEquals]
     * @param {number} [paymentIdNotEquals]
     * @param {boolean} [paymentIdSpecified]
     * @param {Array<number>} [paymentIdIn]
     * @param {Array<number>} [paymentIdNotIn]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThan]
     * @param {number} [dependsOnPaymentTransactionIdLessThan]
     * @param {number} [dependsOnPaymentTransactionIdGreaterThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdLessThanOrEqual]
     * @param {number} [dependsOnPaymentTransactionIdEquals]
     * @param {number} [dependsOnPaymentTransactionIdNotEquals]
     * @param {boolean} [dependsOnPaymentTransactionIdSpecified]
     * @param {Array<number>} [dependsOnPaymentTransactionIdIn]
     * @param {Array<number>} [dependsOnPaymentTransactionIdNotIn]
     * @param {boolean} [distinct]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPaymentTransactions(
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      paymentPurposeContains?: string,
      paymentPurposeDoesNotContain?: string,
      paymentPurposeEquals?: string,
      paymentPurposeNotEquals?: string,
      paymentPurposeSpecified?: boolean,
      paymentPurposeIn?: Array<string>,
      paymentPurposeNotIn?: Array<string>,
      paymentDateGreaterThan?: string,
      paymentDateLessThan?: string,
      paymentDateGreaterThanOrEqual?: string,
      paymentDateLessThanOrEqual?: string,
      paymentDateEquals?: string,
      paymentDateNotEquals?: string,
      paymentDateSpecified?: boolean,
      paymentDateIn?: Array<string>,
      paymentDateNotIn?: Array<string>,
      paymentTriggeredDateGreaterThan?: string,
      paymentTriggeredDateLessThan?: string,
      paymentTriggeredDateGreaterThanOrEqual?: string,
      paymentTriggeredDateLessThanOrEqual?: string,
      paymentTriggeredDateEquals?: string,
      paymentTriggeredDateNotEquals?: string,
      paymentTriggeredDateSpecified?: boolean,
      paymentTriggeredDateIn?: Array<string>,
      paymentTriggeredDateNotIn?: Array<string>,
      networkTypeEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
      networkTypeSpecified?: boolean,
      networkTypeIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      networkTypeNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
      paymentErroneousEquals?: boolean,
      paymentErroneousNotEquals?: boolean,
      paymentErroneousSpecified?: boolean,
      paymentErroneousIn?: Array<boolean>,
      paymentErroneousNotIn?: Array<boolean>,
      paymentStatusMessageContains?: string,
      paymentStatusMessageDoesNotContain?: string,
      paymentStatusMessageEquals?: string,
      paymentStatusMessageNotEquals?: string,
      paymentStatusMessageSpecified?: boolean,
      paymentStatusMessageIn?: Array<string>,
      paymentStatusMessageNotIn?: Array<string>,
      paymentResponseContains?: string,
      paymentResponseDoesNotContain?: string,
      paymentResponseEquals?: string,
      paymentResponseNotEquals?: string,
      paymentResponseSpecified?: boolean,
      paymentResponseIn?: Array<string>,
      paymentResponseNotIn?: Array<string>,
      priceGreaterThan?: number,
      priceLessThan?: number,
      priceGreaterThanOrEqual?: number,
      priceLessThanOrEqual?: number,
      priceEquals?: number,
      priceNotEquals?: number,
      priceSpecified?: boolean,
      priceIn?: Array<number>,
      priceNotIn?: Array<number>,
      paymentFromNameContains?: string,
      paymentFromNameDoesNotContain?: string,
      paymentFromNameEquals?: string,
      paymentFromNameNotEquals?: string,
      paymentFromNameSpecified?: boolean,
      paymentFromNameIn?: Array<string>,
      paymentFromNameNotIn?: Array<string>,
      paymentToNameContains?: string,
      paymentToNameDoesNotContain?: string,
      paymentToNameEquals?: string,
      paymentToNameNotEquals?: string,
      paymentToNameSpecified?: boolean,
      paymentToNameIn?: Array<string>,
      paymentToNameNotIn?: Array<string>,
      paymentFromMobileContains?: string,
      paymentFromMobileDoesNotContain?: string,
      paymentFromMobileEquals?: string,
      paymentFromMobileNotEquals?: string,
      paymentFromMobileSpecified?: boolean,
      paymentFromMobileIn?: Array<string>,
      paymentFromMobileNotIn?: Array<string>,
      paymentToMobileContains?: string,
      paymentToMobileDoesNotContain?: string,
      paymentToMobileEquals?: string,
      paymentToMobileNotEquals?: string,
      paymentToMobileSpecified?: boolean,
      paymentToMobileIn?: Array<string>,
      paymentToMobileNotIn?: Array<string>,
      momoTransTypeEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeNotEquals?: "CTM" | "MTC" | "SMS",
      momoTransTypeSpecified?: boolean,
      momoTransTypeIn?: Array<"CTM" | "MTC" | "SMS">,
      momoTransTypeNotIn?: Array<"CTM" | "MTC" | "SMS">,
      paymentExtIdContains?: string,
      paymentExtIdDoesNotContain?: string,
      paymentExtIdEquals?: string,
      paymentExtIdNotEquals?: string,
      paymentExtIdSpecified?: boolean,
      paymentExtIdIn?: Array<string>,
      paymentExtIdNotIn?: Array<string>,
      humanSaysOkEquals?: boolean,
      humanSaysOkNotEquals?: boolean,
      humanSaysOkSpecified?: boolean,
      humanSaysOkIn?: Array<boolean>,
      humanSaysOkNotIn?: Array<boolean>,
      feeGreaterThan?: number,
      feeLessThan?: number,
      feeGreaterThanOrEqual?: number,
      feeLessThanOrEqual?: number,
      feeEquals?: number,
      feeNotEquals?: number,
      feeSpecified?: boolean,
      feeIn?: Array<number>,
      feeNotIn?: Array<number>,
      paymentIdGreaterThan?: number,
      paymentIdLessThan?: number,
      paymentIdGreaterThanOrEqual?: number,
      paymentIdLessThanOrEqual?: number,
      paymentIdEquals?: number,
      paymentIdNotEquals?: number,
      paymentIdSpecified?: boolean,
      paymentIdIn?: Array<number>,
      paymentIdNotIn?: Array<number>,
      dependsOnPaymentTransactionIdGreaterThan?: number,
      dependsOnPaymentTransactionIdLessThan?: number,
      dependsOnPaymentTransactionIdGreaterThanOrEqual?: number,
      dependsOnPaymentTransactionIdLessThanOrEqual?: number,
      dependsOnPaymentTransactionIdEquals?: number,
      dependsOnPaymentTransactionIdNotEquals?: number,
      dependsOnPaymentTransactionIdSpecified?: boolean,
      dependsOnPaymentTransactionIdIn?: Array<number>,
      dependsOnPaymentTransactionIdNotIn?: Array<number>,
      distinct?: boolean,
      options?: any
    ): AxiosPromise<Array<PaymentTransactionDTO>> {
      return localVarFp
        .getAllPaymentTransactions(
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          paymentPurposeContains,
          paymentPurposeDoesNotContain,
          paymentPurposeEquals,
          paymentPurposeNotEquals,
          paymentPurposeSpecified,
          paymentPurposeIn,
          paymentPurposeNotIn,
          paymentDateGreaterThan,
          paymentDateLessThan,
          paymentDateGreaterThanOrEqual,
          paymentDateLessThanOrEqual,
          paymentDateEquals,
          paymentDateNotEquals,
          paymentDateSpecified,
          paymentDateIn,
          paymentDateNotIn,
          paymentTriggeredDateGreaterThan,
          paymentTriggeredDateLessThan,
          paymentTriggeredDateGreaterThanOrEqual,
          paymentTriggeredDateLessThanOrEqual,
          paymentTriggeredDateEquals,
          paymentTriggeredDateNotEquals,
          paymentTriggeredDateSpecified,
          paymentTriggeredDateIn,
          paymentTriggeredDateNotIn,
          networkTypeEquals,
          networkTypeNotEquals,
          networkTypeSpecified,
          networkTypeIn,
          networkTypeNotIn,
          paymentErroneousEquals,
          paymentErroneousNotEquals,
          paymentErroneousSpecified,
          paymentErroneousIn,
          paymentErroneousNotIn,
          paymentStatusMessageContains,
          paymentStatusMessageDoesNotContain,
          paymentStatusMessageEquals,
          paymentStatusMessageNotEquals,
          paymentStatusMessageSpecified,
          paymentStatusMessageIn,
          paymentStatusMessageNotIn,
          paymentResponseContains,
          paymentResponseDoesNotContain,
          paymentResponseEquals,
          paymentResponseNotEquals,
          paymentResponseSpecified,
          paymentResponseIn,
          paymentResponseNotIn,
          priceGreaterThan,
          priceLessThan,
          priceGreaterThanOrEqual,
          priceLessThanOrEqual,
          priceEquals,
          priceNotEquals,
          priceSpecified,
          priceIn,
          priceNotIn,
          paymentFromNameContains,
          paymentFromNameDoesNotContain,
          paymentFromNameEquals,
          paymentFromNameNotEquals,
          paymentFromNameSpecified,
          paymentFromNameIn,
          paymentFromNameNotIn,
          paymentToNameContains,
          paymentToNameDoesNotContain,
          paymentToNameEquals,
          paymentToNameNotEquals,
          paymentToNameSpecified,
          paymentToNameIn,
          paymentToNameNotIn,
          paymentFromMobileContains,
          paymentFromMobileDoesNotContain,
          paymentFromMobileEquals,
          paymentFromMobileNotEquals,
          paymentFromMobileSpecified,
          paymentFromMobileIn,
          paymentFromMobileNotIn,
          paymentToMobileContains,
          paymentToMobileDoesNotContain,
          paymentToMobileEquals,
          paymentToMobileNotEquals,
          paymentToMobileSpecified,
          paymentToMobileIn,
          paymentToMobileNotIn,
          momoTransTypeEquals,
          momoTransTypeNotEquals,
          momoTransTypeSpecified,
          momoTransTypeIn,
          momoTransTypeNotIn,
          paymentExtIdContains,
          paymentExtIdDoesNotContain,
          paymentExtIdEquals,
          paymentExtIdNotEquals,
          paymentExtIdSpecified,
          paymentExtIdIn,
          paymentExtIdNotIn,
          humanSaysOkEquals,
          humanSaysOkNotEquals,
          humanSaysOkSpecified,
          humanSaysOkIn,
          humanSaysOkNotIn,
          feeGreaterThan,
          feeLessThan,
          feeGreaterThanOrEqual,
          feeLessThanOrEqual,
          feeEquals,
          feeNotEquals,
          feeSpecified,
          feeIn,
          feeNotIn,
          paymentIdGreaterThan,
          paymentIdLessThan,
          paymentIdGreaterThanOrEqual,
          paymentIdLessThanOrEqual,
          paymentIdEquals,
          paymentIdNotEquals,
          paymentIdSpecified,
          paymentIdIn,
          paymentIdNotIn,
          dependsOnPaymentTransactionIdGreaterThan,
          dependsOnPaymentTransactionIdLessThan,
          dependsOnPaymentTransactionIdGreaterThanOrEqual,
          dependsOnPaymentTransactionIdLessThanOrEqual,
          dependsOnPaymentTransactionIdEquals,
          dependsOnPaymentTransactionIdNotEquals,
          dependsOnPaymentTransactionIdSpecified,
          dependsOnPaymentTransactionIdIn,
          dependsOnPaymentTransactionIdNotIn,
          distinct,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentTransaction(
      id: number,
      options?: any
    ): AxiosPromise<PaymentTransactionDTO> {
      return localVarFp
        .getPaymentTransaction(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {PaymentTransactionDTO} paymentTransactionDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdatePaymentTransaction(
      id: number,
      paymentTransactionDTO: PaymentTransactionDTO,
      options?: any
    ): AxiosPromise<PaymentTransactionDTO> {
      return localVarFp
        .partialUpdatePaymentTransaction(id, paymentTransactionDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PaymentTransactionResourceApi - object-oriented interface
 * @export
 * @class PaymentTransactionResourceApi
 * @extends {BaseAPI}
 */
export class PaymentTransactionResourceApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentTransactionResourceApi
   */
  public activatePaymentTransaction(id: number, options?: AxiosRequestConfig) {
    return PaymentTransactionResourceApiFp(this.configuration)
      .activatePaymentTransaction(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [idGreaterThan]
   * @param {number} [idLessThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idEquals]
   * @param {number} [idNotEquals]
   * @param {boolean} [idSpecified]
   * @param {Array<number>} [idIn]
   * @param {Array<number>} [idNotIn]
   * @param {string} [paymentPurposeContains]
   * @param {string} [paymentPurposeDoesNotContain]
   * @param {string} [paymentPurposeEquals]
   * @param {string} [paymentPurposeNotEquals]
   * @param {boolean} [paymentPurposeSpecified]
   * @param {Array<string>} [paymentPurposeIn]
   * @param {Array<string>} [paymentPurposeNotIn]
   * @param {string} [paymentDateGreaterThan]
   * @param {string} [paymentDateLessThan]
   * @param {string} [paymentDateGreaterThanOrEqual]
   * @param {string} [paymentDateLessThanOrEqual]
   * @param {string} [paymentDateEquals]
   * @param {string} [paymentDateNotEquals]
   * @param {boolean} [paymentDateSpecified]
   * @param {Array<string>} [paymentDateIn]
   * @param {Array<string>} [paymentDateNotIn]
   * @param {string} [paymentTriggeredDateGreaterThan]
   * @param {string} [paymentTriggeredDateLessThan]
   * @param {string} [paymentTriggeredDateGreaterThanOrEqual]
   * @param {string} [paymentTriggeredDateLessThanOrEqual]
   * @param {string} [paymentTriggeredDateEquals]
   * @param {string} [paymentTriggeredDateNotEquals]
   * @param {boolean} [paymentTriggeredDateSpecified]
   * @param {Array<string>} [paymentTriggeredDateIn]
   * @param {Array<string>} [paymentTriggeredDateNotIn]
   * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeEquals]
   * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeNotEquals]
   * @param {boolean} [networkTypeSpecified]
   * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeIn]
   * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeNotIn]
   * @param {boolean} [paymentErroneousEquals]
   * @param {boolean} [paymentErroneousNotEquals]
   * @param {boolean} [paymentErroneousSpecified]
   * @param {Array<boolean>} [paymentErroneousIn]
   * @param {Array<boolean>} [paymentErroneousNotIn]
   * @param {string} [paymentStatusMessageContains]
   * @param {string} [paymentStatusMessageDoesNotContain]
   * @param {string} [paymentStatusMessageEquals]
   * @param {string} [paymentStatusMessageNotEquals]
   * @param {boolean} [paymentStatusMessageSpecified]
   * @param {Array<string>} [paymentStatusMessageIn]
   * @param {Array<string>} [paymentStatusMessageNotIn]
   * @param {string} [paymentResponseContains]
   * @param {string} [paymentResponseDoesNotContain]
   * @param {string} [paymentResponseEquals]
   * @param {string} [paymentResponseNotEquals]
   * @param {boolean} [paymentResponseSpecified]
   * @param {Array<string>} [paymentResponseIn]
   * @param {Array<string>} [paymentResponseNotIn]
   * @param {number} [priceGreaterThan]
   * @param {number} [priceLessThan]
   * @param {number} [priceGreaterThanOrEqual]
   * @param {number} [priceLessThanOrEqual]
   * @param {number} [priceEquals]
   * @param {number} [priceNotEquals]
   * @param {boolean} [priceSpecified]
   * @param {Array<number>} [priceIn]
   * @param {Array<number>} [priceNotIn]
   * @param {string} [paymentFromNameContains]
   * @param {string} [paymentFromNameDoesNotContain]
   * @param {string} [paymentFromNameEquals]
   * @param {string} [paymentFromNameNotEquals]
   * @param {boolean} [paymentFromNameSpecified]
   * @param {Array<string>} [paymentFromNameIn]
   * @param {Array<string>} [paymentFromNameNotIn]
   * @param {string} [paymentToNameContains]
   * @param {string} [paymentToNameDoesNotContain]
   * @param {string} [paymentToNameEquals]
   * @param {string} [paymentToNameNotEquals]
   * @param {boolean} [paymentToNameSpecified]
   * @param {Array<string>} [paymentToNameIn]
   * @param {Array<string>} [paymentToNameNotIn]
   * @param {string} [paymentFromMobileContains]
   * @param {string} [paymentFromMobileDoesNotContain]
   * @param {string} [paymentFromMobileEquals]
   * @param {string} [paymentFromMobileNotEquals]
   * @param {boolean} [paymentFromMobileSpecified]
   * @param {Array<string>} [paymentFromMobileIn]
   * @param {Array<string>} [paymentFromMobileNotIn]
   * @param {string} [paymentToMobileContains]
   * @param {string} [paymentToMobileDoesNotContain]
   * @param {string} [paymentToMobileEquals]
   * @param {string} [paymentToMobileNotEquals]
   * @param {boolean} [paymentToMobileSpecified]
   * @param {Array<string>} [paymentToMobileIn]
   * @param {Array<string>} [paymentToMobileNotIn]
   * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeEquals]
   * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeNotEquals]
   * @param {boolean} [momoTransTypeSpecified]
   * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeIn]
   * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeNotIn]
   * @param {string} [paymentExtIdContains]
   * @param {string} [paymentExtIdDoesNotContain]
   * @param {string} [paymentExtIdEquals]
   * @param {string} [paymentExtIdNotEquals]
   * @param {boolean} [paymentExtIdSpecified]
   * @param {Array<string>} [paymentExtIdIn]
   * @param {Array<string>} [paymentExtIdNotIn]
   * @param {boolean} [humanSaysOkEquals]
   * @param {boolean} [humanSaysOkNotEquals]
   * @param {boolean} [humanSaysOkSpecified]
   * @param {Array<boolean>} [humanSaysOkIn]
   * @param {Array<boolean>} [humanSaysOkNotIn]
   * @param {number} [feeGreaterThan]
   * @param {number} [feeLessThan]
   * @param {number} [feeGreaterThanOrEqual]
   * @param {number} [feeLessThanOrEqual]
   * @param {number} [feeEquals]
   * @param {number} [feeNotEquals]
   * @param {boolean} [feeSpecified]
   * @param {Array<number>} [feeIn]
   * @param {Array<number>} [feeNotIn]
   * @param {number} [paymentIdGreaterThan]
   * @param {number} [paymentIdLessThan]
   * @param {number} [paymentIdGreaterThanOrEqual]
   * @param {number} [paymentIdLessThanOrEqual]
   * @param {number} [paymentIdEquals]
   * @param {number} [paymentIdNotEquals]
   * @param {boolean} [paymentIdSpecified]
   * @param {Array<number>} [paymentIdIn]
   * @param {Array<number>} [paymentIdNotIn]
   * @param {number} [dependsOnPaymentTransactionIdGreaterThan]
   * @param {number} [dependsOnPaymentTransactionIdLessThan]
   * @param {number} [dependsOnPaymentTransactionIdGreaterThanOrEqual]
   * @param {number} [dependsOnPaymentTransactionIdLessThanOrEqual]
   * @param {number} [dependsOnPaymentTransactionIdEquals]
   * @param {number} [dependsOnPaymentTransactionIdNotEquals]
   * @param {boolean} [dependsOnPaymentTransactionIdSpecified]
   * @param {Array<number>} [dependsOnPaymentTransactionIdIn]
   * @param {Array<number>} [dependsOnPaymentTransactionIdNotIn]
   * @param {boolean} [distinct]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentTransactionResourceApi
   */
  public countPaymentTransactions(
    idGreaterThan?: number,
    idLessThan?: number,
    idGreaterThanOrEqual?: number,
    idLessThanOrEqual?: number,
    idEquals?: number,
    idNotEquals?: number,
    idSpecified?: boolean,
    idIn?: Array<number>,
    idNotIn?: Array<number>,
    paymentPurposeContains?: string,
    paymentPurposeDoesNotContain?: string,
    paymentPurposeEquals?: string,
    paymentPurposeNotEquals?: string,
    paymentPurposeSpecified?: boolean,
    paymentPurposeIn?: Array<string>,
    paymentPurposeNotIn?: Array<string>,
    paymentDateGreaterThan?: string,
    paymentDateLessThan?: string,
    paymentDateGreaterThanOrEqual?: string,
    paymentDateLessThanOrEqual?: string,
    paymentDateEquals?: string,
    paymentDateNotEquals?: string,
    paymentDateSpecified?: boolean,
    paymentDateIn?: Array<string>,
    paymentDateNotIn?: Array<string>,
    paymentTriggeredDateGreaterThan?: string,
    paymentTriggeredDateLessThan?: string,
    paymentTriggeredDateGreaterThanOrEqual?: string,
    paymentTriggeredDateLessThanOrEqual?: string,
    paymentTriggeredDateEquals?: string,
    paymentTriggeredDateNotEquals?: string,
    paymentTriggeredDateSpecified?: boolean,
    paymentTriggeredDateIn?: Array<string>,
    paymentTriggeredDateNotIn?: Array<string>,
    networkTypeEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
    networkTypeNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
    networkTypeSpecified?: boolean,
    networkTypeIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
    networkTypeNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
    paymentErroneousEquals?: boolean,
    paymentErroneousNotEquals?: boolean,
    paymentErroneousSpecified?: boolean,
    paymentErroneousIn?: Array<boolean>,
    paymentErroneousNotIn?: Array<boolean>,
    paymentStatusMessageContains?: string,
    paymentStatusMessageDoesNotContain?: string,
    paymentStatusMessageEquals?: string,
    paymentStatusMessageNotEquals?: string,
    paymentStatusMessageSpecified?: boolean,
    paymentStatusMessageIn?: Array<string>,
    paymentStatusMessageNotIn?: Array<string>,
    paymentResponseContains?: string,
    paymentResponseDoesNotContain?: string,
    paymentResponseEquals?: string,
    paymentResponseNotEquals?: string,
    paymentResponseSpecified?: boolean,
    paymentResponseIn?: Array<string>,
    paymentResponseNotIn?: Array<string>,
    priceGreaterThan?: number,
    priceLessThan?: number,
    priceGreaterThanOrEqual?: number,
    priceLessThanOrEqual?: number,
    priceEquals?: number,
    priceNotEquals?: number,
    priceSpecified?: boolean,
    priceIn?: Array<number>,
    priceNotIn?: Array<number>,
    paymentFromNameContains?: string,
    paymentFromNameDoesNotContain?: string,
    paymentFromNameEquals?: string,
    paymentFromNameNotEquals?: string,
    paymentFromNameSpecified?: boolean,
    paymentFromNameIn?: Array<string>,
    paymentFromNameNotIn?: Array<string>,
    paymentToNameContains?: string,
    paymentToNameDoesNotContain?: string,
    paymentToNameEquals?: string,
    paymentToNameNotEquals?: string,
    paymentToNameSpecified?: boolean,
    paymentToNameIn?: Array<string>,
    paymentToNameNotIn?: Array<string>,
    paymentFromMobileContains?: string,
    paymentFromMobileDoesNotContain?: string,
    paymentFromMobileEquals?: string,
    paymentFromMobileNotEquals?: string,
    paymentFromMobileSpecified?: boolean,
    paymentFromMobileIn?: Array<string>,
    paymentFromMobileNotIn?: Array<string>,
    paymentToMobileContains?: string,
    paymentToMobileDoesNotContain?: string,
    paymentToMobileEquals?: string,
    paymentToMobileNotEquals?: string,
    paymentToMobileSpecified?: boolean,
    paymentToMobileIn?: Array<string>,
    paymentToMobileNotIn?: Array<string>,
    momoTransTypeEquals?: "CTM" | "MTC" | "SMS",
    momoTransTypeNotEquals?: "CTM" | "MTC" | "SMS",
    momoTransTypeSpecified?: boolean,
    momoTransTypeIn?: Array<"CTM" | "MTC" | "SMS">,
    momoTransTypeNotIn?: Array<"CTM" | "MTC" | "SMS">,
    paymentExtIdContains?: string,
    paymentExtIdDoesNotContain?: string,
    paymentExtIdEquals?: string,
    paymentExtIdNotEquals?: string,
    paymentExtIdSpecified?: boolean,
    paymentExtIdIn?: Array<string>,
    paymentExtIdNotIn?: Array<string>,
    humanSaysOkEquals?: boolean,
    humanSaysOkNotEquals?: boolean,
    humanSaysOkSpecified?: boolean,
    humanSaysOkIn?: Array<boolean>,
    humanSaysOkNotIn?: Array<boolean>,
    feeGreaterThan?: number,
    feeLessThan?: number,
    feeGreaterThanOrEqual?: number,
    feeLessThanOrEqual?: number,
    feeEquals?: number,
    feeNotEquals?: number,
    feeSpecified?: boolean,
    feeIn?: Array<number>,
    feeNotIn?: Array<number>,
    paymentIdGreaterThan?: number,
    paymentIdLessThan?: number,
    paymentIdGreaterThanOrEqual?: number,
    paymentIdLessThanOrEqual?: number,
    paymentIdEquals?: number,
    paymentIdNotEquals?: number,
    paymentIdSpecified?: boolean,
    paymentIdIn?: Array<number>,
    paymentIdNotIn?: Array<number>,
    dependsOnPaymentTransactionIdGreaterThan?: number,
    dependsOnPaymentTransactionIdLessThan?: number,
    dependsOnPaymentTransactionIdGreaterThanOrEqual?: number,
    dependsOnPaymentTransactionIdLessThanOrEqual?: number,
    dependsOnPaymentTransactionIdEquals?: number,
    dependsOnPaymentTransactionIdNotEquals?: number,
    dependsOnPaymentTransactionIdSpecified?: boolean,
    dependsOnPaymentTransactionIdIn?: Array<number>,
    dependsOnPaymentTransactionIdNotIn?: Array<number>,
    distinct?: boolean,
    options?: AxiosRequestConfig
  ) {
    return PaymentTransactionResourceApiFp(this.configuration)
      .countPaymentTransactions(
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        paymentPurposeContains,
        paymentPurposeDoesNotContain,
        paymentPurposeEquals,
        paymentPurposeNotEquals,
        paymentPurposeSpecified,
        paymentPurposeIn,
        paymentPurposeNotIn,
        paymentDateGreaterThan,
        paymentDateLessThan,
        paymentDateGreaterThanOrEqual,
        paymentDateLessThanOrEqual,
        paymentDateEquals,
        paymentDateNotEquals,
        paymentDateSpecified,
        paymentDateIn,
        paymentDateNotIn,
        paymentTriggeredDateGreaterThan,
        paymentTriggeredDateLessThan,
        paymentTriggeredDateGreaterThanOrEqual,
        paymentTriggeredDateLessThanOrEqual,
        paymentTriggeredDateEquals,
        paymentTriggeredDateNotEquals,
        paymentTriggeredDateSpecified,
        paymentTriggeredDateIn,
        paymentTriggeredDateNotIn,
        networkTypeEquals,
        networkTypeNotEquals,
        networkTypeSpecified,
        networkTypeIn,
        networkTypeNotIn,
        paymentErroneousEquals,
        paymentErroneousNotEquals,
        paymentErroneousSpecified,
        paymentErroneousIn,
        paymentErroneousNotIn,
        paymentStatusMessageContains,
        paymentStatusMessageDoesNotContain,
        paymentStatusMessageEquals,
        paymentStatusMessageNotEquals,
        paymentStatusMessageSpecified,
        paymentStatusMessageIn,
        paymentStatusMessageNotIn,
        paymentResponseContains,
        paymentResponseDoesNotContain,
        paymentResponseEquals,
        paymentResponseNotEquals,
        paymentResponseSpecified,
        paymentResponseIn,
        paymentResponseNotIn,
        priceGreaterThan,
        priceLessThan,
        priceGreaterThanOrEqual,
        priceLessThanOrEqual,
        priceEquals,
        priceNotEquals,
        priceSpecified,
        priceIn,
        priceNotIn,
        paymentFromNameContains,
        paymentFromNameDoesNotContain,
        paymentFromNameEquals,
        paymentFromNameNotEquals,
        paymentFromNameSpecified,
        paymentFromNameIn,
        paymentFromNameNotIn,
        paymentToNameContains,
        paymentToNameDoesNotContain,
        paymentToNameEquals,
        paymentToNameNotEquals,
        paymentToNameSpecified,
        paymentToNameIn,
        paymentToNameNotIn,
        paymentFromMobileContains,
        paymentFromMobileDoesNotContain,
        paymentFromMobileEquals,
        paymentFromMobileNotEquals,
        paymentFromMobileSpecified,
        paymentFromMobileIn,
        paymentFromMobileNotIn,
        paymentToMobileContains,
        paymentToMobileDoesNotContain,
        paymentToMobileEquals,
        paymentToMobileNotEquals,
        paymentToMobileSpecified,
        paymentToMobileIn,
        paymentToMobileNotIn,
        momoTransTypeEquals,
        momoTransTypeNotEquals,
        momoTransTypeSpecified,
        momoTransTypeIn,
        momoTransTypeNotIn,
        paymentExtIdContains,
        paymentExtIdDoesNotContain,
        paymentExtIdEquals,
        paymentExtIdNotEquals,
        paymentExtIdSpecified,
        paymentExtIdIn,
        paymentExtIdNotIn,
        humanSaysOkEquals,
        humanSaysOkNotEquals,
        humanSaysOkSpecified,
        humanSaysOkIn,
        humanSaysOkNotIn,
        feeGreaterThan,
        feeLessThan,
        feeGreaterThanOrEqual,
        feeLessThanOrEqual,
        feeEquals,
        feeNotEquals,
        feeSpecified,
        feeIn,
        feeNotIn,
        paymentIdGreaterThan,
        paymentIdLessThan,
        paymentIdGreaterThanOrEqual,
        paymentIdLessThanOrEqual,
        paymentIdEquals,
        paymentIdNotEquals,
        paymentIdSpecified,
        paymentIdIn,
        paymentIdNotIn,
        dependsOnPaymentTransactionIdGreaterThan,
        dependsOnPaymentTransactionIdLessThan,
        dependsOnPaymentTransactionIdGreaterThanOrEqual,
        dependsOnPaymentTransactionIdLessThanOrEqual,
        dependsOnPaymentTransactionIdEquals,
        dependsOnPaymentTransactionIdNotEquals,
        dependsOnPaymentTransactionIdSpecified,
        dependsOnPaymentTransactionIdIn,
        dependsOnPaymentTransactionIdNotIn,
        distinct,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PaymentTransactionDTO} paymentTransactionDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentTransactionResourceApi
   */
  public createPaymentTransaction(
    paymentTransactionDTO: PaymentTransactionDTO,
    options?: AxiosRequestConfig
  ) {
    return PaymentTransactionResourceApiFp(this.configuration)
      .createPaymentTransaction(paymentTransactionDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [idGreaterThan]
   * @param {number} [idLessThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idEquals]
   * @param {number} [idNotEquals]
   * @param {boolean} [idSpecified]
   * @param {Array<number>} [idIn]
   * @param {Array<number>} [idNotIn]
   * @param {string} [paymentPurposeContains]
   * @param {string} [paymentPurposeDoesNotContain]
   * @param {string} [paymentPurposeEquals]
   * @param {string} [paymentPurposeNotEquals]
   * @param {boolean} [paymentPurposeSpecified]
   * @param {Array<string>} [paymentPurposeIn]
   * @param {Array<string>} [paymentPurposeNotIn]
   * @param {string} [paymentDateGreaterThan]
   * @param {string} [paymentDateLessThan]
   * @param {string} [paymentDateGreaterThanOrEqual]
   * @param {string} [paymentDateLessThanOrEqual]
   * @param {string} [paymentDateEquals]
   * @param {string} [paymentDateNotEquals]
   * @param {boolean} [paymentDateSpecified]
   * @param {Array<string>} [paymentDateIn]
   * @param {Array<string>} [paymentDateNotIn]
   * @param {string} [paymentTriggeredDateGreaterThan]
   * @param {string} [paymentTriggeredDateLessThan]
   * @param {string} [paymentTriggeredDateGreaterThanOrEqual]
   * @param {string} [paymentTriggeredDateLessThanOrEqual]
   * @param {string} [paymentTriggeredDateEquals]
   * @param {string} [paymentTriggeredDateNotEquals]
   * @param {boolean} [paymentTriggeredDateSpecified]
   * @param {Array<string>} [paymentTriggeredDateIn]
   * @param {Array<string>} [paymentTriggeredDateNotIn]
   * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeEquals]
   * @param {'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'} [networkTypeNotEquals]
   * @param {boolean} [networkTypeSpecified]
   * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeIn]
   * @param {Array<'AIR' | 'VOD' | 'MTN' | 'TIG' | 'MPESA'>} [networkTypeNotIn]
   * @param {boolean} [paymentErroneousEquals]
   * @param {boolean} [paymentErroneousNotEquals]
   * @param {boolean} [paymentErroneousSpecified]
   * @param {Array<boolean>} [paymentErroneousIn]
   * @param {Array<boolean>} [paymentErroneousNotIn]
   * @param {string} [paymentStatusMessageContains]
   * @param {string} [paymentStatusMessageDoesNotContain]
   * @param {string} [paymentStatusMessageEquals]
   * @param {string} [paymentStatusMessageNotEquals]
   * @param {boolean} [paymentStatusMessageSpecified]
   * @param {Array<string>} [paymentStatusMessageIn]
   * @param {Array<string>} [paymentStatusMessageNotIn]
   * @param {string} [paymentResponseContains]
   * @param {string} [paymentResponseDoesNotContain]
   * @param {string} [paymentResponseEquals]
   * @param {string} [paymentResponseNotEquals]
   * @param {boolean} [paymentResponseSpecified]
   * @param {Array<string>} [paymentResponseIn]
   * @param {Array<string>} [paymentResponseNotIn]
   * @param {number} [priceGreaterThan]
   * @param {number} [priceLessThan]
   * @param {number} [priceGreaterThanOrEqual]
   * @param {number} [priceLessThanOrEqual]
   * @param {number} [priceEquals]
   * @param {number} [priceNotEquals]
   * @param {boolean} [priceSpecified]
   * @param {Array<number>} [priceIn]
   * @param {Array<number>} [priceNotIn]
   * @param {string} [paymentFromNameContains]
   * @param {string} [paymentFromNameDoesNotContain]
   * @param {string} [paymentFromNameEquals]
   * @param {string} [paymentFromNameNotEquals]
   * @param {boolean} [paymentFromNameSpecified]
   * @param {Array<string>} [paymentFromNameIn]
   * @param {Array<string>} [paymentFromNameNotIn]
   * @param {string} [paymentToNameContains]
   * @param {string} [paymentToNameDoesNotContain]
   * @param {string} [paymentToNameEquals]
   * @param {string} [paymentToNameNotEquals]
   * @param {boolean} [paymentToNameSpecified]
   * @param {Array<string>} [paymentToNameIn]
   * @param {Array<string>} [paymentToNameNotIn]
   * @param {string} [paymentFromMobileContains]
   * @param {string} [paymentFromMobileDoesNotContain]
   * @param {string} [paymentFromMobileEquals]
   * @param {string} [paymentFromMobileNotEquals]
   * @param {boolean} [paymentFromMobileSpecified]
   * @param {Array<string>} [paymentFromMobileIn]
   * @param {Array<string>} [paymentFromMobileNotIn]
   * @param {string} [paymentToMobileContains]
   * @param {string} [paymentToMobileDoesNotContain]
   * @param {string} [paymentToMobileEquals]
   * @param {string} [paymentToMobileNotEquals]
   * @param {boolean} [paymentToMobileSpecified]
   * @param {Array<string>} [paymentToMobileIn]
   * @param {Array<string>} [paymentToMobileNotIn]
   * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeEquals]
   * @param {'CTM' | 'MTC' | 'SMS'} [momoTransTypeNotEquals]
   * @param {boolean} [momoTransTypeSpecified]
   * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeIn]
   * @param {Array<'CTM' | 'MTC' | 'SMS'>} [momoTransTypeNotIn]
   * @param {string} [paymentExtIdContains]
   * @param {string} [paymentExtIdDoesNotContain]
   * @param {string} [paymentExtIdEquals]
   * @param {string} [paymentExtIdNotEquals]
   * @param {boolean} [paymentExtIdSpecified]
   * @param {Array<string>} [paymentExtIdIn]
   * @param {Array<string>} [paymentExtIdNotIn]
   * @param {boolean} [humanSaysOkEquals]
   * @param {boolean} [humanSaysOkNotEquals]
   * @param {boolean} [humanSaysOkSpecified]
   * @param {Array<boolean>} [humanSaysOkIn]
   * @param {Array<boolean>} [humanSaysOkNotIn]
   * @param {number} [feeGreaterThan]
   * @param {number} [feeLessThan]
   * @param {number} [feeGreaterThanOrEqual]
   * @param {number} [feeLessThanOrEqual]
   * @param {number} [feeEquals]
   * @param {number} [feeNotEquals]
   * @param {boolean} [feeSpecified]
   * @param {Array<number>} [feeIn]
   * @param {Array<number>} [feeNotIn]
   * @param {number} [paymentIdGreaterThan]
   * @param {number} [paymentIdLessThan]
   * @param {number} [paymentIdGreaterThanOrEqual]
   * @param {number} [paymentIdLessThanOrEqual]
   * @param {number} [paymentIdEquals]
   * @param {number} [paymentIdNotEquals]
   * @param {boolean} [paymentIdSpecified]
   * @param {Array<number>} [paymentIdIn]
   * @param {Array<number>} [paymentIdNotIn]
   * @param {number} [dependsOnPaymentTransactionIdGreaterThan]
   * @param {number} [dependsOnPaymentTransactionIdLessThan]
   * @param {number} [dependsOnPaymentTransactionIdGreaterThanOrEqual]
   * @param {number} [dependsOnPaymentTransactionIdLessThanOrEqual]
   * @param {number} [dependsOnPaymentTransactionIdEquals]
   * @param {number} [dependsOnPaymentTransactionIdNotEquals]
   * @param {boolean} [dependsOnPaymentTransactionIdSpecified]
   * @param {Array<number>} [dependsOnPaymentTransactionIdIn]
   * @param {Array<number>} [dependsOnPaymentTransactionIdNotIn]
   * @param {boolean} [distinct]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentTransactionResourceApi
   */
  public getAllPaymentTransactions(
    idGreaterThan?: number,
    idLessThan?: number,
    idGreaterThanOrEqual?: number,
    idLessThanOrEqual?: number,
    idEquals?: number,
    idNotEquals?: number,
    idSpecified?: boolean,
    idIn?: Array<number>,
    idNotIn?: Array<number>,
    paymentPurposeContains?: string,
    paymentPurposeDoesNotContain?: string,
    paymentPurposeEquals?: string,
    paymentPurposeNotEquals?: string,
    paymentPurposeSpecified?: boolean,
    paymentPurposeIn?: Array<string>,
    paymentPurposeNotIn?: Array<string>,
    paymentDateGreaterThan?: string,
    paymentDateLessThan?: string,
    paymentDateGreaterThanOrEqual?: string,
    paymentDateLessThanOrEqual?: string,
    paymentDateEquals?: string,
    paymentDateNotEquals?: string,
    paymentDateSpecified?: boolean,
    paymentDateIn?: Array<string>,
    paymentDateNotIn?: Array<string>,
    paymentTriggeredDateGreaterThan?: string,
    paymentTriggeredDateLessThan?: string,
    paymentTriggeredDateGreaterThanOrEqual?: string,
    paymentTriggeredDateLessThanOrEqual?: string,
    paymentTriggeredDateEquals?: string,
    paymentTriggeredDateNotEquals?: string,
    paymentTriggeredDateSpecified?: boolean,
    paymentTriggeredDateIn?: Array<string>,
    paymentTriggeredDateNotIn?: Array<string>,
    networkTypeEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
    networkTypeNotEquals?: "AIR" | "VOD" | "MTN" | "TIG" | "MPESA",
    networkTypeSpecified?: boolean,
    networkTypeIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
    networkTypeNotIn?: Array<"AIR" | "VOD" | "MTN" | "TIG" | "MPESA">,
    paymentErroneousEquals?: boolean,
    paymentErroneousNotEquals?: boolean,
    paymentErroneousSpecified?: boolean,
    paymentErroneousIn?: Array<boolean>,
    paymentErroneousNotIn?: Array<boolean>,
    paymentStatusMessageContains?: string,
    paymentStatusMessageDoesNotContain?: string,
    paymentStatusMessageEquals?: string,
    paymentStatusMessageNotEquals?: string,
    paymentStatusMessageSpecified?: boolean,
    paymentStatusMessageIn?: Array<string>,
    paymentStatusMessageNotIn?: Array<string>,
    paymentResponseContains?: string,
    paymentResponseDoesNotContain?: string,
    paymentResponseEquals?: string,
    paymentResponseNotEquals?: string,
    paymentResponseSpecified?: boolean,
    paymentResponseIn?: Array<string>,
    paymentResponseNotIn?: Array<string>,
    priceGreaterThan?: number,
    priceLessThan?: number,
    priceGreaterThanOrEqual?: number,
    priceLessThanOrEqual?: number,
    priceEquals?: number,
    priceNotEquals?: number,
    priceSpecified?: boolean,
    priceIn?: Array<number>,
    priceNotIn?: Array<number>,
    paymentFromNameContains?: string,
    paymentFromNameDoesNotContain?: string,
    paymentFromNameEquals?: string,
    paymentFromNameNotEquals?: string,
    paymentFromNameSpecified?: boolean,
    paymentFromNameIn?: Array<string>,
    paymentFromNameNotIn?: Array<string>,
    paymentToNameContains?: string,
    paymentToNameDoesNotContain?: string,
    paymentToNameEquals?: string,
    paymentToNameNotEquals?: string,
    paymentToNameSpecified?: boolean,
    paymentToNameIn?: Array<string>,
    paymentToNameNotIn?: Array<string>,
    paymentFromMobileContains?: string,
    paymentFromMobileDoesNotContain?: string,
    paymentFromMobileEquals?: string,
    paymentFromMobileNotEquals?: string,
    paymentFromMobileSpecified?: boolean,
    paymentFromMobileIn?: Array<string>,
    paymentFromMobileNotIn?: Array<string>,
    paymentToMobileContains?: string,
    paymentToMobileDoesNotContain?: string,
    paymentToMobileEquals?: string,
    paymentToMobileNotEquals?: string,
    paymentToMobileSpecified?: boolean,
    paymentToMobileIn?: Array<string>,
    paymentToMobileNotIn?: Array<string>,
    momoTransTypeEquals?: "CTM" | "MTC" | "SMS",
    momoTransTypeNotEquals?: "CTM" | "MTC" | "SMS",
    momoTransTypeSpecified?: boolean,
    momoTransTypeIn?: Array<"CTM" | "MTC" | "SMS">,
    momoTransTypeNotIn?: Array<"CTM" | "MTC" | "SMS">,
    paymentExtIdContains?: string,
    paymentExtIdDoesNotContain?: string,
    paymentExtIdEquals?: string,
    paymentExtIdNotEquals?: string,
    paymentExtIdSpecified?: boolean,
    paymentExtIdIn?: Array<string>,
    paymentExtIdNotIn?: Array<string>,
    humanSaysOkEquals?: boolean,
    humanSaysOkNotEquals?: boolean,
    humanSaysOkSpecified?: boolean,
    humanSaysOkIn?: Array<boolean>,
    humanSaysOkNotIn?: Array<boolean>,
    feeGreaterThan?: number,
    feeLessThan?: number,
    feeGreaterThanOrEqual?: number,
    feeLessThanOrEqual?: number,
    feeEquals?: number,
    feeNotEquals?: number,
    feeSpecified?: boolean,
    feeIn?: Array<number>,
    feeNotIn?: Array<number>,
    paymentIdGreaterThan?: number,
    paymentIdLessThan?: number,
    paymentIdGreaterThanOrEqual?: number,
    paymentIdLessThanOrEqual?: number,
    paymentIdEquals?: number,
    paymentIdNotEquals?: number,
    paymentIdSpecified?: boolean,
    paymentIdIn?: Array<number>,
    paymentIdNotIn?: Array<number>,
    dependsOnPaymentTransactionIdGreaterThan?: number,
    dependsOnPaymentTransactionIdLessThan?: number,
    dependsOnPaymentTransactionIdGreaterThanOrEqual?: number,
    dependsOnPaymentTransactionIdLessThanOrEqual?: number,
    dependsOnPaymentTransactionIdEquals?: number,
    dependsOnPaymentTransactionIdNotEquals?: number,
    dependsOnPaymentTransactionIdSpecified?: boolean,
    dependsOnPaymentTransactionIdIn?: Array<number>,
    dependsOnPaymentTransactionIdNotIn?: Array<number>,
    distinct?: boolean,
    options?: AxiosRequestConfig
  ) {
    return PaymentTransactionResourceApiFp(this.configuration)
      .getAllPaymentTransactions(
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        paymentPurposeContains,
        paymentPurposeDoesNotContain,
        paymentPurposeEquals,
        paymentPurposeNotEquals,
        paymentPurposeSpecified,
        paymentPurposeIn,
        paymentPurposeNotIn,
        paymentDateGreaterThan,
        paymentDateLessThan,
        paymentDateGreaterThanOrEqual,
        paymentDateLessThanOrEqual,
        paymentDateEquals,
        paymentDateNotEquals,
        paymentDateSpecified,
        paymentDateIn,
        paymentDateNotIn,
        paymentTriggeredDateGreaterThan,
        paymentTriggeredDateLessThan,
        paymentTriggeredDateGreaterThanOrEqual,
        paymentTriggeredDateLessThanOrEqual,
        paymentTriggeredDateEquals,
        paymentTriggeredDateNotEquals,
        paymentTriggeredDateSpecified,
        paymentTriggeredDateIn,
        paymentTriggeredDateNotIn,
        networkTypeEquals,
        networkTypeNotEquals,
        networkTypeSpecified,
        networkTypeIn,
        networkTypeNotIn,
        paymentErroneousEquals,
        paymentErroneousNotEquals,
        paymentErroneousSpecified,
        paymentErroneousIn,
        paymentErroneousNotIn,
        paymentStatusMessageContains,
        paymentStatusMessageDoesNotContain,
        paymentStatusMessageEquals,
        paymentStatusMessageNotEquals,
        paymentStatusMessageSpecified,
        paymentStatusMessageIn,
        paymentStatusMessageNotIn,
        paymentResponseContains,
        paymentResponseDoesNotContain,
        paymentResponseEquals,
        paymentResponseNotEquals,
        paymentResponseSpecified,
        paymentResponseIn,
        paymentResponseNotIn,
        priceGreaterThan,
        priceLessThan,
        priceGreaterThanOrEqual,
        priceLessThanOrEqual,
        priceEquals,
        priceNotEquals,
        priceSpecified,
        priceIn,
        priceNotIn,
        paymentFromNameContains,
        paymentFromNameDoesNotContain,
        paymentFromNameEquals,
        paymentFromNameNotEquals,
        paymentFromNameSpecified,
        paymentFromNameIn,
        paymentFromNameNotIn,
        paymentToNameContains,
        paymentToNameDoesNotContain,
        paymentToNameEquals,
        paymentToNameNotEquals,
        paymentToNameSpecified,
        paymentToNameIn,
        paymentToNameNotIn,
        paymentFromMobileContains,
        paymentFromMobileDoesNotContain,
        paymentFromMobileEquals,
        paymentFromMobileNotEquals,
        paymentFromMobileSpecified,
        paymentFromMobileIn,
        paymentFromMobileNotIn,
        paymentToMobileContains,
        paymentToMobileDoesNotContain,
        paymentToMobileEquals,
        paymentToMobileNotEquals,
        paymentToMobileSpecified,
        paymentToMobileIn,
        paymentToMobileNotIn,
        momoTransTypeEquals,
        momoTransTypeNotEquals,
        momoTransTypeSpecified,
        momoTransTypeIn,
        momoTransTypeNotIn,
        paymentExtIdContains,
        paymentExtIdDoesNotContain,
        paymentExtIdEquals,
        paymentExtIdNotEquals,
        paymentExtIdSpecified,
        paymentExtIdIn,
        paymentExtIdNotIn,
        humanSaysOkEquals,
        humanSaysOkNotEquals,
        humanSaysOkSpecified,
        humanSaysOkIn,
        humanSaysOkNotIn,
        feeGreaterThan,
        feeLessThan,
        feeGreaterThanOrEqual,
        feeLessThanOrEqual,
        feeEquals,
        feeNotEquals,
        feeSpecified,
        feeIn,
        feeNotIn,
        paymentIdGreaterThan,
        paymentIdLessThan,
        paymentIdGreaterThanOrEqual,
        paymentIdLessThanOrEqual,
        paymentIdEquals,
        paymentIdNotEquals,
        paymentIdSpecified,
        paymentIdIn,
        paymentIdNotIn,
        dependsOnPaymentTransactionIdGreaterThan,
        dependsOnPaymentTransactionIdLessThan,
        dependsOnPaymentTransactionIdGreaterThanOrEqual,
        dependsOnPaymentTransactionIdLessThanOrEqual,
        dependsOnPaymentTransactionIdEquals,
        dependsOnPaymentTransactionIdNotEquals,
        dependsOnPaymentTransactionIdSpecified,
        dependsOnPaymentTransactionIdIn,
        dependsOnPaymentTransactionIdNotIn,
        distinct,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentTransactionResourceApi
   */
  public getPaymentTransaction(id: number, options?: AxiosRequestConfig) {
    return PaymentTransactionResourceApiFp(this.configuration)
      .getPaymentTransaction(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {PaymentTransactionDTO} paymentTransactionDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentTransactionResourceApi
   */
  public partialUpdatePaymentTransaction(
    id: number,
    paymentTransactionDTO: PaymentTransactionDTO,
    options?: AxiosRequestConfig
  ) {
    return PaymentTransactionResourceApiFp(this.configuration)
      .partialUpdatePaymentTransaction(id, paymentTransactionDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PersonResourceApi - axios parameter creator
 * @export
 */
export const PersonResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {Person} person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPerson: async (
      person: Person,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'person' is not null or undefined
      assertParamExists("createPerson", "person", person);
      const localVarPath = `/api/people`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        person,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePerson: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deletePerson", "id", id);
      const localVarPath = `/api/people/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [eagerload]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPeople: async (
      page?: number,
      size?: number,
      sort?: Array<string>,
      eagerload?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/people`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort;
      }

      if (eagerload !== undefined) {
        localVarQueryParameter["eagerload"] = eagerload;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPerson: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPerson", "id", id);
      const localVarPath = `/api/people/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Person} person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdatePerson: async (
      id: number,
      person: Person,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdatePerson", "id", id);
      // verify required parameter 'person' is not null or undefined
      assertParamExists("partialUpdatePerson", "person", person);
      const localVarPath = `/api/people/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        person,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Person} person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePerson: async (
      id: number,
      person: Person,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updatePerson", "id", id);
      // verify required parameter 'person' is not null or undefined
      assertParamExists("updatePerson", "person", person);
      const localVarPath = `/api/people/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        person,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PersonResourceApi - functional programming interface
 * @export
 */
export const PersonResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PersonResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {Person} person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPerson(
      person: Person,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPerson(
        person,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePerson(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePerson(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [eagerload]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllPeople(
      page?: number,
      size?: number,
      sort?: Array<string>,
      eagerload?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Person>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPeople(
        page,
        size,
        sort,
        eagerload,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPerson(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPerson(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Person} person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdatePerson(
      id: number,
      person: Person,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdatePerson(
          id,
          person,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Person} person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePerson(
      id: number,
      person: Person,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePerson(
        id,
        person,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PersonResourceApi - factory interface
 * @export
 */
export const PersonResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PersonResourceApiFp(configuration);
  return {
    /**
     *
     * @param {Person} person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPerson(person: Person, options?: any): AxiosPromise<Person> {
      return localVarFp
        .createPerson(person, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePerson(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePerson(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [eagerload]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPeople(
      page?: number,
      size?: number,
      sort?: Array<string>,
      eagerload?: boolean,
      options?: any
    ): AxiosPromise<Array<Person>> {
      return localVarFp
        .getAllPeople(page, size, sort, eagerload, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPerson(id: number, options?: any): AxiosPromise<Person> {
      return localVarFp
        .getPerson(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Person} person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdatePerson(
      id: number,
      person: Person,
      options?: any
    ): AxiosPromise<Person> {
      return localVarFp
        .partialUpdatePerson(id, person, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Person} person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePerson(
      id: number,
      person: Person,
      options?: any
    ): AxiosPromise<Person> {
      return localVarFp
        .updatePerson(id, person, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PersonResourceApi - object-oriented interface
 * @export
 * @class PersonResourceApi
 * @extends {BaseAPI}
 */
export class PersonResourceApi extends BaseAPI {
  /**
   *
   * @param {Person} person
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonResourceApi
   */
  public createPerson(person: Person, options?: AxiosRequestConfig) {
    return PersonResourceApiFp(this.configuration)
      .createPerson(person, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonResourceApi
   */
  public deletePerson(id: number, options?: AxiosRequestConfig) {
    return PersonResourceApiFp(this.configuration)
      .deletePerson(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {boolean} [eagerload]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonResourceApi
   */
  public getAllPeople(
    page?: number,
    size?: number,
    sort?: Array<string>,
    eagerload?: boolean,
    options?: AxiosRequestConfig
  ) {
    return PersonResourceApiFp(this.configuration)
      .getAllPeople(page, size, sort, eagerload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonResourceApi
   */
  public getPerson(id: number, options?: AxiosRequestConfig) {
    return PersonResourceApiFp(this.configuration)
      .getPerson(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Person} person
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonResourceApi
   */
  public partialUpdatePerson(
    id: number,
    person: Person,
    options?: AxiosRequestConfig
  ) {
    return PersonResourceApiFp(this.configuration)
      .partialUpdatePerson(id, person, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Person} person
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonResourceApi
   */
  public updatePerson(
    id: number,
    person: Person,
    options?: AxiosRequestConfig
  ) {
    return PersonResourceApiFp(this.configuration)
      .updatePerson(id, person, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PersonTeamResourceApi - axios parameter creator
 * @export
 */
export const PersonTeamResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {PersonTeam} personTeam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonTeam: async (
      personTeam: PersonTeam,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'personTeam' is not null or undefined
      assertParamExists("createPersonTeam", "personTeam", personTeam);
      const localVarPath = `/api/person-teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        personTeam,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonTeam: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deletePersonTeam", "id", id);
      const localVarPath = `/api/person-teams/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPersonTeams: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/person-teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersonTeam: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPersonTeam", "id", id);
      const localVarPath = `/api/person-teams/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {PersonTeam} personTeam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdatePersonTeam: async (
      id: number,
      personTeam: PersonTeam,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdatePersonTeam", "id", id);
      // verify required parameter 'personTeam' is not null or undefined
      assertParamExists("partialUpdatePersonTeam", "personTeam", personTeam);
      const localVarPath = `/api/person-teams/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        personTeam,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {PersonTeam} personTeam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersonTeam: async (
      id: number,
      personTeam: PersonTeam,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updatePersonTeam", "id", id);
      // verify required parameter 'personTeam' is not null or undefined
      assertParamExists("updatePersonTeam", "personTeam", personTeam);
      const localVarPath = `/api/person-teams/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        personTeam,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PersonTeamResourceApi - functional programming interface
 * @export
 */
export const PersonTeamResourceApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    PersonTeamResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {PersonTeam} personTeam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPersonTeam(
      personTeam: PersonTeam,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonTeam>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createPersonTeam(personTeam, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePersonTeam(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deletePersonTeam(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllPersonTeams(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<PersonTeam>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllPersonTeams(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPersonTeam(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonTeam>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonTeam(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {PersonTeam} personTeam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdatePersonTeam(
      id: number,
      personTeam: PersonTeam,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonTeam>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdatePersonTeam(
          id,
          personTeam,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {PersonTeam} personTeam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePersonTeam(
      id: number,
      personTeam: PersonTeam,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonTeam>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updatePersonTeam(
          id,
          personTeam,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PersonTeamResourceApi - factory interface
 * @export
 */
export const PersonTeamResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PersonTeamResourceApiFp(configuration);
  return {
    /**
     *
     * @param {PersonTeam} personTeam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonTeam(
      personTeam: PersonTeam,
      options?: any
    ): AxiosPromise<PersonTeam> {
      return localVarFp
        .createPersonTeam(personTeam, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonTeam(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deletePersonTeam(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPersonTeams(options?: any): AxiosPromise<Array<PersonTeam>> {
      return localVarFp
        .getAllPersonTeams(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersonTeam(id: number, options?: any): AxiosPromise<PersonTeam> {
      return localVarFp
        .getPersonTeam(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {PersonTeam} personTeam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdatePersonTeam(
      id: number,
      personTeam: PersonTeam,
      options?: any
    ): AxiosPromise<PersonTeam> {
      return localVarFp
        .partialUpdatePersonTeam(id, personTeam, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {PersonTeam} personTeam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersonTeam(
      id: number,
      personTeam: PersonTeam,
      options?: any
    ): AxiosPromise<PersonTeam> {
      return localVarFp
        .updatePersonTeam(id, personTeam, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PersonTeamResourceApi - object-oriented interface
 * @export
 * @class PersonTeamResourceApi
 * @extends {BaseAPI}
 */
export class PersonTeamResourceApi extends BaseAPI {
  /**
   *
   * @param {PersonTeam} personTeam
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonTeamResourceApi
   */
  public createPersonTeam(
    personTeam: PersonTeam,
    options?: AxiosRequestConfig
  ) {
    return PersonTeamResourceApiFp(this.configuration)
      .createPersonTeam(personTeam, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonTeamResourceApi
   */
  public deletePersonTeam(id: number, options?: AxiosRequestConfig) {
    return PersonTeamResourceApiFp(this.configuration)
      .deletePersonTeam(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonTeamResourceApi
   */
  public getAllPersonTeams(options?: AxiosRequestConfig) {
    return PersonTeamResourceApiFp(this.configuration)
      .getAllPersonTeams(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonTeamResourceApi
   */
  public getPersonTeam(id: number, options?: AxiosRequestConfig) {
    return PersonTeamResourceApiFp(this.configuration)
      .getPersonTeam(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {PersonTeam} personTeam
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonTeamResourceApi
   */
  public partialUpdatePersonTeam(
    id: number,
    personTeam: PersonTeam,
    options?: AxiosRequestConfig
  ) {
    return PersonTeamResourceApiFp(this.configuration)
      .partialUpdatePersonTeam(id, personTeam, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {PersonTeam} personTeam
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PersonTeamResourceApi
   */
  public updatePersonTeam(
    id: number,
    personTeam: PersonTeam,
    options?: AxiosRequestConfig
  ) {
    return PersonTeamResourceApiFp(this.configuration)
      .updatePersonTeam(id, personTeam, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PublicUserResourceApi - axios parameter creator
 * @export
 */
export const PublicUserResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPublicUsers: async (
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorities: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/authorities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PublicUserResourceApi - functional programming interface
 * @export
 */
export const PublicUserResourceApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    PublicUserResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllPublicUsers(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllPublicUsers(
          page,
          size,
          sort,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthorities(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorities(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PublicUserResourceApi - factory interface
 * @export
 */
export const PublicUserResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PublicUserResourceApiFp(configuration);
  return {
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPublicUsers(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<Array<UserDTO>> {
      return localVarFp
        .getAllPublicUsers(page, size, sort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorities(options?: any): AxiosPromise<Array<string>> {
      return localVarFp
        .getAuthorities(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PublicUserResourceApi - object-oriented interface
 * @export
 * @class PublicUserResourceApi
 * @extends {BaseAPI}
 */
export class PublicUserResourceApi extends BaseAPI {
  /**
   *
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicUserResourceApi
   */
  public getAllPublicUsers(
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return PublicUserResourceApiFp(this.configuration)
      .getAllPublicUsers(page, size, sort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicUserResourceApi
   */
  public getAuthorities(options?: AxiosRequestConfig) {
    return PublicUserResourceApiFp(this.configuration)
      .getAuthorities(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SaleResourceApi - axios parameter creator
 * @export
 */
export const SaleResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {Sale} sale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSale: async (
      sale: Sale,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'sale' is not null or undefined
      assertParamExists("createSale", "sale", sale);
      const localVarPath = `/api/sales`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        sale,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSale: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteSale", "id", id);
      const localVarPath = `/api/sales/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSales: async (
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/sales`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSale: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getSale", "id", id);
      const localVarPath = `/api/sales/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Sale} sale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateSale: async (
      id: number,
      sale: Sale,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateSale", "id", id);
      // verify required parameter 'sale' is not null or undefined
      assertParamExists("partialUpdateSale", "sale", sale);
      const localVarPath = `/api/sales/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        sale,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Sale} sale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSale: async (
      id: number,
      sale: Sale,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateSale", "id", id);
      // verify required parameter 'sale' is not null or undefined
      assertParamExists("updateSale", "sale", sale);
      const localVarPath = `/api/sales/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        sale,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SaleResourceApi - functional programming interface
 * @export
 */
export const SaleResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    SaleResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {Sale} sale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createSale(
      sale: Sale,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sale>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createSale(
        sale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSale(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSale(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllSales(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Sale>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSales(
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSale(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sale>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSale(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Sale} sale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateSale(
      id: number,
      sale: Sale,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sale>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdateSale(id, sale, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Sale} sale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSale(
      id: number,
      sale: Sale,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sale>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateSale(
        id,
        sale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SaleResourceApi - factory interface
 * @export
 */
export const SaleResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SaleResourceApiFp(configuration);
  return {
    /**
     *
     * @param {Sale} sale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSale(sale: Sale, options?: any): AxiosPromise<Sale> {
      return localVarFp
        .createSale(sale, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSale(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteSale(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSales(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<Array<Sale>> {
      return localVarFp
        .getAllSales(page, size, sort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSale(id: number, options?: any): AxiosPromise<Sale> {
      return localVarFp
        .getSale(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Sale} sale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateSale(
      id: number,
      sale: Sale,
      options?: any
    ): AxiosPromise<Sale> {
      return localVarFp
        .partialUpdateSale(id, sale, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Sale} sale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSale(id: number, sale: Sale, options?: any): AxiosPromise<Sale> {
      return localVarFp
        .updateSale(id, sale, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SaleResourceApi - object-oriented interface
 * @export
 * @class SaleResourceApi
 * @extends {BaseAPI}
 */
export class SaleResourceApi extends BaseAPI {
  /**
   *
   * @param {Sale} sale
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SaleResourceApi
   */
  public createSale(sale: Sale, options?: AxiosRequestConfig) {
    return SaleResourceApiFp(this.configuration)
      .createSale(sale, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SaleResourceApi
   */
  public deleteSale(id: number, options?: AxiosRequestConfig) {
    return SaleResourceApiFp(this.configuration)
      .deleteSale(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SaleResourceApi
   */
  public getAllSales(
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return SaleResourceApiFp(this.configuration)
      .getAllSales(page, size, sort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SaleResourceApi
   */
  public getSale(id: number, options?: AxiosRequestConfig) {
    return SaleResourceApiFp(this.configuration)
      .getSale(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Sale} sale
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SaleResourceApi
   */
  public partialUpdateSale(
    id: number,
    sale: Sale,
    options?: AxiosRequestConfig
  ) {
    return SaleResourceApiFp(this.configuration)
      .partialUpdateSale(id, sale, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Sale} sale
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SaleResourceApi
   */
  public updateSale(id: number, sale: Sale, options?: AxiosRequestConfig) {
    return SaleResourceApiFp(this.configuration)
      .updateSale(id, sale, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TransactionResourceApi - axios parameter creator
 * @export
 */
export const TransactionResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {Transaction} transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransaction: async (
      transaction: Transaction,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'transaction' is not null or undefined
      assertParamExists("createTransaction", "transaction", transaction);
      const localVarPath = `/api/transactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        transaction,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransaction: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteTransaction", "id", id);
      const localVarPath = `/api/transactions/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTransactions: async (
      page?: number,
      size?: number,
      sort?: Array<string>,
      filter?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/transactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort;
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getTransaction", "id", id);
      const localVarPath = `/api/transactions/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Transaction} transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateTransaction: async (
      id: number,
      transaction: Transaction,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateTransaction", "id", id);
      // verify required parameter 'transaction' is not null or undefined
      assertParamExists("partialUpdateTransaction", "transaction", transaction);
      const localVarPath = `/api/transactions/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        transaction,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Transaction} transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTransaction: async (
      id: number,
      transaction: Transaction,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateTransaction", "id", id);
      // verify required parameter 'transaction' is not null or undefined
      assertParamExists("updateTransaction", "transaction", transaction);
      const localVarPath = `/api/transactions/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        transaction,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TransactionResourceApi - functional programming interface
 * @export
 */
export const TransactionResourceApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    TransactionResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {Transaction} transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTransaction(
      transaction: Transaction,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createTransaction(transaction, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTransaction(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTransaction(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllTransactions(
      page?: number,
      size?: number,
      sort?: Array<string>,
      filter?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Transaction>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllTransactions(
          page,
          size,
          sort,
          filter,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTransaction(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTransaction(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Transaction} transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateTransaction(
      id: number,
      transaction: Transaction,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdateTransaction(
          id,
          transaction,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Transaction} transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTransaction(
      id: number,
      transaction: Transaction,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateTransaction(
          id,
          transaction,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * TransactionResourceApi - factory interface
 * @export
 */
export const TransactionResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TransactionResourceApiFp(configuration);
  return {
    /**
     *
     * @param {Transaction} transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransaction(
      transaction: Transaction,
      options?: any
    ): AxiosPromise<Transaction> {
      return localVarFp
        .createTransaction(transaction, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransaction(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteTransaction(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTransactions(
      page?: number,
      size?: number,
      sort?: Array<string>,
      filter?: string,
      options?: any
    ): AxiosPromise<Array<Transaction>> {
      return localVarFp
        .getAllTransactions(page, size, sort, filter, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(id: number, options?: any): AxiosPromise<Transaction> {
      return localVarFp
        .getTransaction(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Transaction} transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateTransaction(
      id: number,
      transaction: Transaction,
      options?: any
    ): AxiosPromise<Transaction> {
      return localVarFp
        .partialUpdateTransaction(id, transaction, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Transaction} transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTransaction(
      id: number,
      transaction: Transaction,
      options?: any
    ): AxiosPromise<Transaction> {
      return localVarFp
        .updateTransaction(id, transaction, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TransactionResourceApi - object-oriented interface
 * @export
 * @class TransactionResourceApi
 * @extends {BaseAPI}
 */
export class TransactionResourceApi extends BaseAPI {
  /**
   *
   * @param {Transaction} transaction
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionResourceApi
   */
  public createTransaction(
    transaction: Transaction,
    options?: AxiosRequestConfig
  ) {
    return TransactionResourceApiFp(this.configuration)
      .createTransaction(transaction, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionResourceApi
   */
  public deleteTransaction(id: number, options?: AxiosRequestConfig) {
    return TransactionResourceApiFp(this.configuration)
      .deleteTransaction(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {string} [filter]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionResourceApi
   */
  public getAllTransactions(
    page?: number,
    size?: number,
    sort?: Array<string>,
    filter?: string,
    options?: AxiosRequestConfig
  ) {
    return TransactionResourceApiFp(this.configuration)
      .getAllTransactions(page, size, sort, filter, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionResourceApi
   */
  public getTransaction(id: number, options?: AxiosRequestConfig) {
    return TransactionResourceApiFp(this.configuration)
      .getTransaction(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Transaction} transaction
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionResourceApi
   */
  public partialUpdateTransaction(
    id: number,
    transaction: Transaction,
    options?: AxiosRequestConfig
  ) {
    return TransactionResourceApiFp(this.configuration)
      .partialUpdateTransaction(id, transaction, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Transaction} transaction
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionResourceApi
   */
  public updateTransaction(
    id: number,
    transaction: Transaction,
    options?: AxiosRequestConfig
  ) {
    return TransactionResourceApiFp(this.configuration)
      .updateTransaction(id, transaction, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserJwtControllerApi - axios parameter creator
 * @export
 */
export const UserJwtControllerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {LoginVM} loginVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorize: async (
      loginVM: LoginVM,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginVM' is not null or undefined
      assertParamExists("authorize", "loginVM", loginVM);
      const localVarPath = `/api/authenticate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginVM,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserJwtControllerApi - functional programming interface
 * @export
 */
export const UserJwtControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UserJwtControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {LoginVM} loginVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authorize(
      loginVM: LoginVM,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JWTToken>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authorize(
        loginVM,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserJwtControllerApi - factory interface
 * @export
 */
export const UserJwtControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserJwtControllerApiFp(configuration);
  return {
    /**
     *
     * @param {LoginVM} loginVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorize(loginVM: LoginVM, options?: any): AxiosPromise<JWTToken> {
      return localVarFp
        .authorize(loginVM, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserJwtControllerApi - object-oriented interface
 * @export
 * @class UserJwtControllerApi
 * @extends {BaseAPI}
 */
export class UserJwtControllerApi extends BaseAPI {
  /**
   *
   * @param {LoginVM} loginVM
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserJwtControllerApi
   */
  public authorize(loginVM: LoginVM, options?: AxiosRequestConfig) {
    return UserJwtControllerApiFp(this.configuration)
      .authorize(loginVM, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserResourceApi - axios parameter creator
 * @export
 */
export const UserResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {AdminUserDTO} adminUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: async (
      adminUserDTO: AdminUserDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'adminUserDTO' is not null or undefined
      assertParamExists("createUser", "adminUserDTO", adminUserDTO);
      const localVarPath = `/api/admin/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        adminUserDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: async (
      login: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'login' is not null or undefined
      assertParamExists("deleteUser", "login", login);
      const localVarPath = `/api/admin/users/{login}`.replace(
        `{${"login"}}`,
        encodeURIComponent(String(login))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsers: async (
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/admin/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      login: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'login' is not null or undefined
      assertParamExists("getUser", "login", login);
      const localVarPath = `/api/admin/users/{login}`.replace(
        `{${"login"}}`,
        encodeURIComponent(String(login))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AdminUserDTO} adminUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: async (
      adminUserDTO: AdminUserDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'adminUserDTO' is not null or undefined
      assertParamExists("updateUser", "adminUserDTO", adminUserDTO);
      const localVarPath = `/api/admin/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        adminUserDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserResourceApi - functional programming interface
 * @export
 */
export const UserResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UserResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {AdminUserDTO} adminUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUser(
      adminUserDTO: AdminUserDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(
        adminUserDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUser(
      login: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(
        login,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllUsers(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<AdminUserDTO>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      login: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        login,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {AdminUserDTO} adminUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUser(
      adminUserDTO: AdminUserDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(
        adminUserDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserResourceApi - factory interface
 * @export
 */
export const UserResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserResourceApiFp(configuration);
  return {
    /**
     *
     * @param {AdminUserDTO} adminUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(adminUserDTO: AdminUserDTO, options?: any): AxiosPromise<User> {
      return localVarFp
        .createUser(adminUserDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(login: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteUser(login, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsers(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<Array<AdminUserDTO>> {
      return localVarFp
        .getAllUsers(page, size, sort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(login: string, options?: any): AxiosPromise<AdminUserDTO> {
      return localVarFp
        .getUser(login, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AdminUserDTO} adminUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(
      adminUserDTO: AdminUserDTO,
      options?: any
    ): AxiosPromise<AdminUserDTO> {
      return localVarFp
        .updateUser(adminUserDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserResourceApi - object-oriented interface
 * @export
 * @class UserResourceApi
 * @extends {BaseAPI}
 */
export class UserResourceApi extends BaseAPI {
  /**
   *
   * @param {AdminUserDTO} adminUserDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserResourceApi
   */
  public createUser(adminUserDTO: AdminUserDTO, options?: AxiosRequestConfig) {
    return UserResourceApiFp(this.configuration)
      .createUser(adminUserDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} login
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserResourceApi
   */
  public deleteUser(login: string, options?: AxiosRequestConfig) {
    return UserResourceApiFp(this.configuration)
      .deleteUser(login, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserResourceApi
   */
  public getAllUsers(
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return UserResourceApiFp(this.configuration)
      .getAllUsers(page, size, sort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} login
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserResourceApi
   */
  public getUser(login: string, options?: AxiosRequestConfig) {
    return UserResourceApiFp(this.configuration)
      .getUser(login, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AdminUserDTO} adminUserDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserResourceApi
   */
  public updateUser(adminUserDTO: AdminUserDTO, options?: AxiosRequestConfig) {
    return UserResourceApiFp(this.configuration)
      .updateUser(adminUserDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UvResourceApi - axios parameter creator
 * @export
 */
export const UvResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [loginContains]
     * @param {string} [loginDoesNotContain]
     * @param {string} [loginEquals]
     * @param {string} [loginNotEquals]
     * @param {boolean} [loginSpecified]
     * @param {Array<string>} [loginIn]
     * @param {Array<string>} [loginNotIn]
     * @param {string} [mobileNumberContains]
     * @param {string} [mobileNumberDoesNotContain]
     * @param {string} [mobileNumberEquals]
     * @param {string} [mobileNumberNotEquals]
     * @param {boolean} [mobileNumberSpecified]
     * @param {Array<string>} [mobileNumberIn]
     * @param {Array<string>} [mobileNumberNotIn]
     * @param {string} [firstNameContains]
     * @param {string} [firstNameDoesNotContain]
     * @param {string} [firstNameEquals]
     * @param {string} [firstNameNotEquals]
     * @param {boolean} [firstNameSpecified]
     * @param {Array<string>} [firstNameIn]
     * @param {Array<string>} [firstNameNotIn]
     * @param {string} [lastNameContains]
     * @param {string} [lastNameDoesNotContain]
     * @param {string} [lastNameEquals]
     * @param {string} [lastNameNotEquals]
     * @param {boolean} [lastNameSpecified]
     * @param {Array<string>} [lastNameIn]
     * @param {Array<string>} [lastNameNotIn]
     * @param {boolean} [distinct]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countUvs: async (
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loginContains?: string,
      loginDoesNotContain?: string,
      loginEquals?: string,
      loginNotEquals?: string,
      loginSpecified?: boolean,
      loginIn?: Array<string>,
      loginNotIn?: Array<string>,
      mobileNumberContains?: string,
      mobileNumberDoesNotContain?: string,
      mobileNumberEquals?: string,
      mobileNumberNotEquals?: string,
      mobileNumberSpecified?: boolean,
      mobileNumberIn?: Array<string>,
      mobileNumberNotIn?: Array<string>,
      firstNameContains?: string,
      firstNameDoesNotContain?: string,
      firstNameEquals?: string,
      firstNameNotEquals?: string,
      firstNameSpecified?: boolean,
      firstNameIn?: Array<string>,
      firstNameNotIn?: Array<string>,
      lastNameContains?: string,
      lastNameDoesNotContain?: string,
      lastNameEquals?: string,
      lastNameNotEquals?: string,
      lastNameSpecified?: boolean,
      lastNameIn?: Array<string>,
      lastNameNotIn?: Array<string>,
      distinct?: boolean,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/uvs/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (customerIdGreaterThan !== undefined) {
        localVarQueryParameter["customerId.greaterThan"] =
          customerIdGreaterThan;
      }

      if (customerIdLessThan !== undefined) {
        localVarQueryParameter["customerId.lessThan"] = customerIdLessThan;
      }

      if (customerIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["customerId.greaterThanOrEqual"] =
          customerIdGreaterThanOrEqual;
      }

      if (customerIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["customerId.lessThanOrEqual"] =
          customerIdLessThanOrEqual;
      }

      if (customerIdEquals !== undefined) {
        localVarQueryParameter["customerId.equals"] = customerIdEquals;
      }

      if (customerIdNotEquals !== undefined) {
        localVarQueryParameter["customerId.notEquals"] = customerIdNotEquals;
      }

      if (customerIdSpecified !== undefined) {
        localVarQueryParameter["customerId.specified"] = customerIdSpecified;
      }

      if (customerIdIn) {
        localVarQueryParameter["customerId.in"] = customerIdIn;
      }

      if (customerIdNotIn) {
        localVarQueryParameter["customerId.notIn"] = customerIdNotIn;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter["id.greaterThan"] = idGreaterThan;
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter["id.lessThan"] = idLessThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["id.greaterThanOrEqual"] = idGreaterThanOrEqual;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter["id.lessThanOrEqual"] = idLessThanOrEqual;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter["id.equals"] = idEquals;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter["id.notEquals"] = idNotEquals;
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter["id.specified"] = idSpecified;
      }

      if (idIn) {
        localVarQueryParameter["id.in"] = idIn;
      }

      if (idNotIn) {
        localVarQueryParameter["id.notIn"] = idNotIn;
      }

      if (loginContains !== undefined) {
        localVarQueryParameter["login.contains"] = loginContains;
      }

      if (loginDoesNotContain !== undefined) {
        localVarQueryParameter["login.doesNotContain"] = loginDoesNotContain;
      }

      if (loginEquals !== undefined) {
        localVarQueryParameter["login.equals"] = loginEquals;
      }

      if (loginNotEquals !== undefined) {
        localVarQueryParameter["login.notEquals"] = loginNotEquals;
      }

      if (loginSpecified !== undefined) {
        localVarQueryParameter["login.specified"] = loginSpecified;
      }

      if (loginIn) {
        localVarQueryParameter["login.in"] = loginIn;
      }

      if (loginNotIn) {
        localVarQueryParameter["login.notIn"] = loginNotIn;
      }

      if (mobileNumberContains !== undefined) {
        localVarQueryParameter["mobileNumber.contains"] = mobileNumberContains;
      }

      if (mobileNumberDoesNotContain !== undefined) {
        localVarQueryParameter["mobileNumber.doesNotContain"] =
          mobileNumberDoesNotContain;
      }

      if (mobileNumberEquals !== undefined) {
        localVarQueryParameter["mobileNumber.equals"] = mobileNumberEquals;
      }

      if (mobileNumberNotEquals !== undefined) {
        localVarQueryParameter["mobileNumber.notEquals"] =
          mobileNumberNotEquals;
      }

      if (mobileNumberSpecified !== undefined) {
        localVarQueryParameter["mobileNumber.specified"] =
          mobileNumberSpecified;
      }

      if (mobileNumberIn) {
        localVarQueryParameter["mobileNumber.in"] = mobileNumberIn;
      }

      if (mobileNumberNotIn) {
        localVarQueryParameter["mobileNumber.notIn"] = mobileNumberNotIn;
      }

      if (firstNameContains !== undefined) {
        localVarQueryParameter["firstName.contains"] = firstNameContains;
      }

      if (firstNameDoesNotContain !== undefined) {
        localVarQueryParameter["firstName.doesNotContain"] =
          firstNameDoesNotContain;
      }

      if (firstNameEquals !== undefined) {
        localVarQueryParameter["firstName.equals"] = firstNameEquals;
      }

      if (firstNameNotEquals !== undefined) {
        localVarQueryParameter["firstName.notEquals"] = firstNameNotEquals;
      }

      if (firstNameSpecified !== undefined) {
        localVarQueryParameter["firstName.specified"] = firstNameSpecified;
      }

      if (firstNameIn) {
        localVarQueryParameter["firstName.in"] = firstNameIn;
      }

      if (firstNameNotIn) {
        localVarQueryParameter["firstName.notIn"] = firstNameNotIn;
      }

      if (lastNameContains !== undefined) {
        localVarQueryParameter["lastName.contains"] = lastNameContains;
      }

      if (lastNameDoesNotContain !== undefined) {
        localVarQueryParameter["lastName.doesNotContain"] =
          lastNameDoesNotContain;
      }

      if (lastNameEquals !== undefined) {
        localVarQueryParameter["lastName.equals"] = lastNameEquals;
      }

      if (lastNameNotEquals !== undefined) {
        localVarQueryParameter["lastName.notEquals"] = lastNameNotEquals;
      }

      if (lastNameSpecified !== undefined) {
        localVarQueryParameter["lastName.specified"] = lastNameSpecified;
      }

      if (lastNameIn) {
        localVarQueryParameter["lastName.in"] = lastNameIn;
      }

      if (lastNameNotIn) {
        localVarQueryParameter["lastName.notIn"] = lastNameNotIn;
      }

      if (distinct !== undefined) {
        localVarQueryParameter["distinct"] = distinct;
      }

      if (nameContains !== undefined) {
        localVarQueryParameter["name.contains"] = nameContains;
      }

      if (nameDoesNotContain !== undefined) {
        localVarQueryParameter["name.doesNotContain"] = nameDoesNotContain;
      }

      if (nameEquals !== undefined) {
        localVarQueryParameter["name.equals"] = nameEquals;
      }

      if (nameNotEquals !== undefined) {
        localVarQueryParameter["name.notEquals"] = nameNotEquals;
      }

      if (nameSpecified !== undefined) {
        localVarQueryParameter["name.specified"] = nameSpecified;
      }

      if (nameIn) {
        localVarQueryParameter["name.in"] = nameIn;
      }

      if (nameNotIn) {
        localVarQueryParameter["name.notIn"] = nameNotIn;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [loginContains]
     * @param {string} [loginDoesNotContain]
     * @param {string} [loginEquals]
     * @param {string} [loginNotEquals]
     * @param {boolean} [loginSpecified]
     * @param {Array<string>} [loginIn]
     * @param {Array<string>} [loginNotIn]
     * @param {string} [mobileNumberContains]
     * @param {string} [mobileNumberDoesNotContain]
     * @param {string} [mobileNumberEquals]
     * @param {string} [mobileNumberNotEquals]
     * @param {boolean} [mobileNumberSpecified]
     * @param {Array<string>} [mobileNumberIn]
     * @param {Array<string>} [mobileNumberNotIn]
     * @param {string} [firstNameContains]
     * @param {string} [firstNameDoesNotContain]
     * @param {string} [firstNameEquals]
     * @param {string} [firstNameNotEquals]
     * @param {boolean} [firstNameSpecified]
     * @param {Array<string>} [firstNameIn]
     * @param {Array<string>} [firstNameNotIn]
     * @param {string} [lastNameContains]
     * @param {string} [lastNameDoesNotContain]
     * @param {string} [lastNameEquals]
     * @param {string} [lastNameNotEquals]
     * @param {boolean} [lastNameSpecified]
     * @param {Array<string>} [lastNameIn]
     * @param {Array<string>} [lastNameNotIn]
     * @param {boolean} [distinct]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUvs: async (
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loginContains?: string,
      loginDoesNotContain?: string,
      loginEquals?: string,
      loginNotEquals?: string,
      loginSpecified?: boolean,
      loginIn?: Array<string>,
      loginNotIn?: Array<string>,
      mobileNumberContains?: string,
      mobileNumberDoesNotContain?: string,
      mobileNumberEquals?: string,
      mobileNumberNotEquals?: string,
      mobileNumberSpecified?: boolean,
      mobileNumberIn?: Array<string>,
      mobileNumberNotIn?: Array<string>,
      firstNameContains?: string,
      firstNameDoesNotContain?: string,
      firstNameEquals?: string,
      firstNameNotEquals?: string,
      firstNameSpecified?: boolean,
      firstNameIn?: Array<string>,
      firstNameNotIn?: Array<string>,
      lastNameContains?: string,
      lastNameDoesNotContain?: string,
      lastNameEquals?: string,
      lastNameNotEquals?: string,
      lastNameSpecified?: boolean,
      lastNameIn?: Array<string>,
      lastNameNotIn?: Array<string>,
      distinct?: boolean,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/uvs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (customerIdGreaterThan !== undefined) {
        localVarQueryParameter["customerId.greaterThan"] =
          customerIdGreaterThan;
      }

      if (customerIdLessThan !== undefined) {
        localVarQueryParameter["customerId.lessThan"] = customerIdLessThan;
      }

      if (customerIdGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["customerId.greaterThanOrEqual"] =
          customerIdGreaterThanOrEqual;
      }

      if (customerIdLessThanOrEqual !== undefined) {
        localVarQueryParameter["customerId.lessThanOrEqual"] =
          customerIdLessThanOrEqual;
      }

      if (customerIdEquals !== undefined) {
        localVarQueryParameter["customerId.equals"] = customerIdEquals;
      }

      if (customerIdNotEquals !== undefined) {
        localVarQueryParameter["customerId.notEquals"] = customerIdNotEquals;
      }

      if (customerIdSpecified !== undefined) {
        localVarQueryParameter["customerId.specified"] = customerIdSpecified;
      }

      if (customerIdIn) {
        localVarQueryParameter["customerId.in"] = customerIdIn;
      }

      if (customerIdNotIn) {
        localVarQueryParameter["customerId.notIn"] = customerIdNotIn;
      }

      if (idGreaterThan !== undefined) {
        localVarQueryParameter["id.greaterThan"] = idGreaterThan;
      }

      if (idLessThan !== undefined) {
        localVarQueryParameter["id.lessThan"] = idLessThan;
      }

      if (idGreaterThanOrEqual !== undefined) {
        localVarQueryParameter["id.greaterThanOrEqual"] = idGreaterThanOrEqual;
      }

      if (idLessThanOrEqual !== undefined) {
        localVarQueryParameter["id.lessThanOrEqual"] = idLessThanOrEqual;
      }

      if (idEquals !== undefined) {
        localVarQueryParameter["id.equals"] = idEquals;
      }

      if (idNotEquals !== undefined) {
        localVarQueryParameter["id.notEquals"] = idNotEquals;
      }

      if (idSpecified !== undefined) {
        localVarQueryParameter["id.specified"] = idSpecified;
      }

      if (idIn) {
        localVarQueryParameter["id.in"] = idIn;
      }

      if (idNotIn) {
        localVarQueryParameter["id.notIn"] = idNotIn;
      }

      if (loginContains !== undefined) {
        localVarQueryParameter["login.contains"] = loginContains;
      }

      if (loginDoesNotContain !== undefined) {
        localVarQueryParameter["login.doesNotContain"] = loginDoesNotContain;
      }

      if (loginEquals !== undefined) {
        localVarQueryParameter["login.equals"] = loginEquals;
      }

      if (loginNotEquals !== undefined) {
        localVarQueryParameter["login.notEquals"] = loginNotEquals;
      }

      if (loginSpecified !== undefined) {
        localVarQueryParameter["login.specified"] = loginSpecified;
      }

      if (loginIn) {
        localVarQueryParameter["login.in"] = loginIn;
      }

      if (loginNotIn) {
        localVarQueryParameter["login.notIn"] = loginNotIn;
      }

      if (mobileNumberContains !== undefined) {
        localVarQueryParameter["mobileNumber.contains"] = mobileNumberContains;
      }

      if (mobileNumberDoesNotContain !== undefined) {
        localVarQueryParameter["mobileNumber.doesNotContain"] =
          mobileNumberDoesNotContain;
      }

      if (mobileNumberEquals !== undefined) {
        localVarQueryParameter["mobileNumber.equals"] = mobileNumberEquals;
      }

      if (mobileNumberNotEquals !== undefined) {
        localVarQueryParameter["mobileNumber.notEquals"] =
          mobileNumberNotEquals;
      }

      if (mobileNumberSpecified !== undefined) {
        localVarQueryParameter["mobileNumber.specified"] =
          mobileNumberSpecified;
      }

      if (mobileNumberIn) {
        localVarQueryParameter["mobileNumber.in"] = mobileNumberIn;
      }

      if (mobileNumberNotIn) {
        localVarQueryParameter["mobileNumber.notIn"] = mobileNumberNotIn;
      }

      if (firstNameContains !== undefined) {
        localVarQueryParameter["firstName.contains"] = firstNameContains;
      }

      if (firstNameDoesNotContain !== undefined) {
        localVarQueryParameter["firstName.doesNotContain"] =
          firstNameDoesNotContain;
      }

      if (firstNameEquals !== undefined) {
        localVarQueryParameter["firstName.equals"] = firstNameEquals;
      }

      if (firstNameNotEquals !== undefined) {
        localVarQueryParameter["firstName.notEquals"] = firstNameNotEquals;
      }

      if (firstNameSpecified !== undefined) {
        localVarQueryParameter["firstName.specified"] = firstNameSpecified;
      }

      if (firstNameIn) {
        localVarQueryParameter["firstName.in"] = firstNameIn;
      }

      if (firstNameNotIn) {
        localVarQueryParameter["firstName.notIn"] = firstNameNotIn;
      }

      if (lastNameContains !== undefined) {
        localVarQueryParameter["lastName.contains"] = lastNameContains;
      }

      if (lastNameDoesNotContain !== undefined) {
        localVarQueryParameter["lastName.doesNotContain"] =
          lastNameDoesNotContain;
      }

      if (lastNameEquals !== undefined) {
        localVarQueryParameter["lastName.equals"] = lastNameEquals;
      }

      if (lastNameNotEquals !== undefined) {
        localVarQueryParameter["lastName.notEquals"] = lastNameNotEquals;
      }

      if (lastNameSpecified !== undefined) {
        localVarQueryParameter["lastName.specified"] = lastNameSpecified;
      }

      if (lastNameIn) {
        localVarQueryParameter["lastName.in"] = lastNameIn;
      }

      if (lastNameNotIn) {
        localVarQueryParameter["lastName.notIn"] = lastNameNotIn;
      }

      if (distinct !== undefined) {
        localVarQueryParameter["distinct"] = distinct;
      }

      if (nameContains !== undefined) {
        localVarQueryParameter["name.contains"] = nameContains;
      }

      if (nameDoesNotContain !== undefined) {
        localVarQueryParameter["name.doesNotContain"] = nameDoesNotContain;
      }

      if (nameEquals !== undefined) {
        localVarQueryParameter["name.equals"] = nameEquals;
      }

      if (nameNotEquals !== undefined) {
        localVarQueryParameter["name.notEquals"] = nameNotEquals;
      }

      if (nameSpecified !== undefined) {
        localVarQueryParameter["name.specified"] = nameSpecified;
      }

      if (nameIn) {
        localVarQueryParameter["name.in"] = nameIn;
      }

      if (nameNotIn) {
        localVarQueryParameter["name.notIn"] = nameNotIn;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUv: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUv", "id", id);
      const localVarPath = `/api/uvs/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Uv} uv
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateUv: async (
      id: number,
      uv: Uv,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateUv", "id", id);
      // verify required parameter 'uv' is not null or undefined
      assertParamExists("partialUpdateUv", "uv", uv);
      const localVarPath = `/api/uvs/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        uv,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UvResourceApi - functional programming interface
 * @export
 */
export const UvResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UvResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [loginContains]
     * @param {string} [loginDoesNotContain]
     * @param {string} [loginEquals]
     * @param {string} [loginNotEquals]
     * @param {boolean} [loginSpecified]
     * @param {Array<string>} [loginIn]
     * @param {Array<string>} [loginNotIn]
     * @param {string} [mobileNumberContains]
     * @param {string} [mobileNumberDoesNotContain]
     * @param {string} [mobileNumberEquals]
     * @param {string} [mobileNumberNotEquals]
     * @param {boolean} [mobileNumberSpecified]
     * @param {Array<string>} [mobileNumberIn]
     * @param {Array<string>} [mobileNumberNotIn]
     * @param {string} [firstNameContains]
     * @param {string} [firstNameDoesNotContain]
     * @param {string} [firstNameEquals]
     * @param {string} [firstNameNotEquals]
     * @param {boolean} [firstNameSpecified]
     * @param {Array<string>} [firstNameIn]
     * @param {Array<string>} [firstNameNotIn]
     * @param {string} [lastNameContains]
     * @param {string} [lastNameDoesNotContain]
     * @param {string} [lastNameEquals]
     * @param {string} [lastNameNotEquals]
     * @param {boolean} [lastNameSpecified]
     * @param {Array<string>} [lastNameIn]
     * @param {Array<string>} [lastNameNotIn]
     * @param {boolean} [distinct]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countUvs(
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loginContains?: string,
      loginDoesNotContain?: string,
      loginEquals?: string,
      loginNotEquals?: string,
      loginSpecified?: boolean,
      loginIn?: Array<string>,
      loginNotIn?: Array<string>,
      mobileNumberContains?: string,
      mobileNumberDoesNotContain?: string,
      mobileNumberEquals?: string,
      mobileNumberNotEquals?: string,
      mobileNumberSpecified?: boolean,
      mobileNumberIn?: Array<string>,
      mobileNumberNotIn?: Array<string>,
      firstNameContains?: string,
      firstNameDoesNotContain?: string,
      firstNameEquals?: string,
      firstNameNotEquals?: string,
      firstNameSpecified?: boolean,
      firstNameIn?: Array<string>,
      firstNameNotIn?: Array<string>,
      lastNameContains?: string,
      lastNameDoesNotContain?: string,
      lastNameEquals?: string,
      lastNameNotEquals?: string,
      lastNameSpecified?: boolean,
      lastNameIn?: Array<string>,
      lastNameNotIn?: Array<string>,
      distinct?: boolean,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.countUvs(
        customerIdGreaterThan,
        customerIdLessThan,
        customerIdGreaterThanOrEqual,
        customerIdLessThanOrEqual,
        customerIdEquals,
        customerIdNotEquals,
        customerIdSpecified,
        customerIdIn,
        customerIdNotIn,
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        loginContains,
        loginDoesNotContain,
        loginEquals,
        loginNotEquals,
        loginSpecified,
        loginIn,
        loginNotIn,
        mobileNumberContains,
        mobileNumberDoesNotContain,
        mobileNumberEquals,
        mobileNumberNotEquals,
        mobileNumberSpecified,
        mobileNumberIn,
        mobileNumberNotIn,
        firstNameContains,
        firstNameDoesNotContain,
        firstNameEquals,
        firstNameNotEquals,
        firstNameSpecified,
        firstNameIn,
        firstNameNotIn,
        lastNameContains,
        lastNameDoesNotContain,
        lastNameEquals,
        lastNameNotEquals,
        lastNameSpecified,
        lastNameIn,
        lastNameNotIn,
        distinct,
        nameContains,
        nameDoesNotContain,
        nameEquals,
        nameNotEquals,
        nameSpecified,
        nameIn,
        nameNotIn,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [loginContains]
     * @param {string} [loginDoesNotContain]
     * @param {string} [loginEquals]
     * @param {string} [loginNotEquals]
     * @param {boolean} [loginSpecified]
     * @param {Array<string>} [loginIn]
     * @param {Array<string>} [loginNotIn]
     * @param {string} [mobileNumberContains]
     * @param {string} [mobileNumberDoesNotContain]
     * @param {string} [mobileNumberEquals]
     * @param {string} [mobileNumberNotEquals]
     * @param {boolean} [mobileNumberSpecified]
     * @param {Array<string>} [mobileNumberIn]
     * @param {Array<string>} [mobileNumberNotIn]
     * @param {string} [firstNameContains]
     * @param {string} [firstNameDoesNotContain]
     * @param {string} [firstNameEquals]
     * @param {string} [firstNameNotEquals]
     * @param {boolean} [firstNameSpecified]
     * @param {Array<string>} [firstNameIn]
     * @param {Array<string>} [firstNameNotIn]
     * @param {string} [lastNameContains]
     * @param {string} [lastNameDoesNotContain]
     * @param {string} [lastNameEquals]
     * @param {string} [lastNameNotEquals]
     * @param {boolean} [lastNameSpecified]
     * @param {Array<string>} [lastNameIn]
     * @param {Array<string>} [lastNameNotIn]
     * @param {boolean} [distinct]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllUvs(
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loginContains?: string,
      loginDoesNotContain?: string,
      loginEquals?: string,
      loginNotEquals?: string,
      loginSpecified?: boolean,
      loginIn?: Array<string>,
      loginNotIn?: Array<string>,
      mobileNumberContains?: string,
      mobileNumberDoesNotContain?: string,
      mobileNumberEquals?: string,
      mobileNumberNotEquals?: string,
      mobileNumberSpecified?: boolean,
      mobileNumberIn?: Array<string>,
      mobileNumberNotIn?: Array<string>,
      firstNameContains?: string,
      firstNameDoesNotContain?: string,
      firstNameEquals?: string,
      firstNameNotEquals?: string,
      firstNameSpecified?: boolean,
      firstNameIn?: Array<string>,
      firstNameNotIn?: Array<string>,
      lastNameContains?: string,
      lastNameDoesNotContain?: string,
      lastNameEquals?: string,
      lastNameNotEquals?: string,
      lastNameSpecified?: boolean,
      lastNameIn?: Array<string>,
      lastNameNotIn?: Array<string>,
      distinct?: boolean,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Uv>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUvs(
        customerIdGreaterThan,
        customerIdLessThan,
        customerIdGreaterThanOrEqual,
        customerIdLessThanOrEqual,
        customerIdEquals,
        customerIdNotEquals,
        customerIdSpecified,
        customerIdIn,
        customerIdNotIn,
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        loginContains,
        loginDoesNotContain,
        loginEquals,
        loginNotEquals,
        loginSpecified,
        loginIn,
        loginNotIn,
        mobileNumberContains,
        mobileNumberDoesNotContain,
        mobileNumberEquals,
        mobileNumberNotEquals,
        mobileNumberSpecified,
        mobileNumberIn,
        mobileNumberNotIn,
        firstNameContains,
        firstNameDoesNotContain,
        firstNameEquals,
        firstNameNotEquals,
        firstNameSpecified,
        firstNameIn,
        firstNameNotIn,
        lastNameContains,
        lastNameDoesNotContain,
        lastNameEquals,
        lastNameNotEquals,
        lastNameSpecified,
        lastNameIn,
        lastNameNotIn,
        distinct,
        nameContains,
        nameDoesNotContain,
        nameEquals,
        nameNotEquals,
        nameSpecified,
        nameIn,
        nameNotIn,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUv(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uv>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUv(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Uv} uv
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateUv(
      id: number,
      uv: Uv,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uv>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateUv(
        id,
        uv,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UvResourceApi - factory interface
 * @export
 */
export const UvResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UvResourceApiFp(configuration);
  return {
    /**
     *
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [loginContains]
     * @param {string} [loginDoesNotContain]
     * @param {string} [loginEquals]
     * @param {string} [loginNotEquals]
     * @param {boolean} [loginSpecified]
     * @param {Array<string>} [loginIn]
     * @param {Array<string>} [loginNotIn]
     * @param {string} [mobileNumberContains]
     * @param {string} [mobileNumberDoesNotContain]
     * @param {string} [mobileNumberEquals]
     * @param {string} [mobileNumberNotEquals]
     * @param {boolean} [mobileNumberSpecified]
     * @param {Array<string>} [mobileNumberIn]
     * @param {Array<string>} [mobileNumberNotIn]
     * @param {string} [firstNameContains]
     * @param {string} [firstNameDoesNotContain]
     * @param {string} [firstNameEquals]
     * @param {string} [firstNameNotEquals]
     * @param {boolean} [firstNameSpecified]
     * @param {Array<string>} [firstNameIn]
     * @param {Array<string>} [firstNameNotIn]
     * @param {string} [lastNameContains]
     * @param {string} [lastNameDoesNotContain]
     * @param {string} [lastNameEquals]
     * @param {string} [lastNameNotEquals]
     * @param {boolean} [lastNameSpecified]
     * @param {Array<string>} [lastNameIn]
     * @param {Array<string>} [lastNameNotIn]
     * @param {boolean} [distinct]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countUvs(
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loginContains?: string,
      loginDoesNotContain?: string,
      loginEquals?: string,
      loginNotEquals?: string,
      loginSpecified?: boolean,
      loginIn?: Array<string>,
      loginNotIn?: Array<string>,
      mobileNumberContains?: string,
      mobileNumberDoesNotContain?: string,
      mobileNumberEquals?: string,
      mobileNumberNotEquals?: string,
      mobileNumberSpecified?: boolean,
      mobileNumberIn?: Array<string>,
      mobileNumberNotIn?: Array<string>,
      firstNameContains?: string,
      firstNameDoesNotContain?: string,
      firstNameEquals?: string,
      firstNameNotEquals?: string,
      firstNameSpecified?: boolean,
      firstNameIn?: Array<string>,
      firstNameNotIn?: Array<string>,
      lastNameContains?: string,
      lastNameDoesNotContain?: string,
      lastNameEquals?: string,
      lastNameNotEquals?: string,
      lastNameSpecified?: boolean,
      lastNameIn?: Array<string>,
      lastNameNotIn?: Array<string>,
      distinct?: boolean,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      options?: any
    ): AxiosPromise<number> {
      return localVarFp
        .countUvs(
          customerIdGreaterThan,
          customerIdLessThan,
          customerIdGreaterThanOrEqual,
          customerIdLessThanOrEqual,
          customerIdEquals,
          customerIdNotEquals,
          customerIdSpecified,
          customerIdIn,
          customerIdNotIn,
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          loginContains,
          loginDoesNotContain,
          loginEquals,
          loginNotEquals,
          loginSpecified,
          loginIn,
          loginNotIn,
          mobileNumberContains,
          mobileNumberDoesNotContain,
          mobileNumberEquals,
          mobileNumberNotEquals,
          mobileNumberSpecified,
          mobileNumberIn,
          mobileNumberNotIn,
          firstNameContains,
          firstNameDoesNotContain,
          firstNameEquals,
          firstNameNotEquals,
          firstNameSpecified,
          firstNameIn,
          firstNameNotIn,
          lastNameContains,
          lastNameDoesNotContain,
          lastNameEquals,
          lastNameNotEquals,
          lastNameSpecified,
          lastNameIn,
          lastNameNotIn,
          distinct,
          nameContains,
          nameDoesNotContain,
          nameEquals,
          nameNotEquals,
          nameSpecified,
          nameIn,
          nameNotIn,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [customerIdGreaterThan]
     * @param {number} [customerIdLessThan]
     * @param {number} [customerIdGreaterThanOrEqual]
     * @param {number} [customerIdLessThanOrEqual]
     * @param {number} [customerIdEquals]
     * @param {number} [customerIdNotEquals]
     * @param {boolean} [customerIdSpecified]
     * @param {Array<number>} [customerIdIn]
     * @param {Array<number>} [customerIdNotIn]
     * @param {number} [idGreaterThan]
     * @param {number} [idLessThan]
     * @param {number} [idGreaterThanOrEqual]
     * @param {number} [idLessThanOrEqual]
     * @param {number} [idEquals]
     * @param {number} [idNotEquals]
     * @param {boolean} [idSpecified]
     * @param {Array<number>} [idIn]
     * @param {Array<number>} [idNotIn]
     * @param {string} [loginContains]
     * @param {string} [loginDoesNotContain]
     * @param {string} [loginEquals]
     * @param {string} [loginNotEquals]
     * @param {boolean} [loginSpecified]
     * @param {Array<string>} [loginIn]
     * @param {Array<string>} [loginNotIn]
     * @param {string} [mobileNumberContains]
     * @param {string} [mobileNumberDoesNotContain]
     * @param {string} [mobileNumberEquals]
     * @param {string} [mobileNumberNotEquals]
     * @param {boolean} [mobileNumberSpecified]
     * @param {Array<string>} [mobileNumberIn]
     * @param {Array<string>} [mobileNumberNotIn]
     * @param {string} [firstNameContains]
     * @param {string} [firstNameDoesNotContain]
     * @param {string} [firstNameEquals]
     * @param {string} [firstNameNotEquals]
     * @param {boolean} [firstNameSpecified]
     * @param {Array<string>} [firstNameIn]
     * @param {Array<string>} [firstNameNotIn]
     * @param {string} [lastNameContains]
     * @param {string} [lastNameDoesNotContain]
     * @param {string} [lastNameEquals]
     * @param {string} [lastNameNotEquals]
     * @param {boolean} [lastNameSpecified]
     * @param {Array<string>} [lastNameIn]
     * @param {Array<string>} [lastNameNotIn]
     * @param {boolean} [distinct]
     * @param {string} [nameContains]
     * @param {string} [nameDoesNotContain]
     * @param {string} [nameEquals]
     * @param {string} [nameNotEquals]
     * @param {boolean} [nameSpecified]
     * @param {Array<string>} [nameIn]
     * @param {Array<string>} [nameNotIn]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUvs(
      customerIdGreaterThan?: number,
      customerIdLessThan?: number,
      customerIdGreaterThanOrEqual?: number,
      customerIdLessThanOrEqual?: number,
      customerIdEquals?: number,
      customerIdNotEquals?: number,
      customerIdSpecified?: boolean,
      customerIdIn?: Array<number>,
      customerIdNotIn?: Array<number>,
      idGreaterThan?: number,
      idLessThan?: number,
      idGreaterThanOrEqual?: number,
      idLessThanOrEqual?: number,
      idEquals?: number,
      idNotEquals?: number,
      idSpecified?: boolean,
      idIn?: Array<number>,
      idNotIn?: Array<number>,
      loginContains?: string,
      loginDoesNotContain?: string,
      loginEquals?: string,
      loginNotEquals?: string,
      loginSpecified?: boolean,
      loginIn?: Array<string>,
      loginNotIn?: Array<string>,
      mobileNumberContains?: string,
      mobileNumberDoesNotContain?: string,
      mobileNumberEquals?: string,
      mobileNumberNotEquals?: string,
      mobileNumberSpecified?: boolean,
      mobileNumberIn?: Array<string>,
      mobileNumberNotIn?: Array<string>,
      firstNameContains?: string,
      firstNameDoesNotContain?: string,
      firstNameEquals?: string,
      firstNameNotEquals?: string,
      firstNameSpecified?: boolean,
      firstNameIn?: Array<string>,
      firstNameNotIn?: Array<string>,
      lastNameContains?: string,
      lastNameDoesNotContain?: string,
      lastNameEquals?: string,
      lastNameNotEquals?: string,
      lastNameSpecified?: boolean,
      lastNameIn?: Array<string>,
      lastNameNotIn?: Array<string>,
      distinct?: boolean,
      nameContains?: string,
      nameDoesNotContain?: string,
      nameEquals?: string,
      nameNotEquals?: string,
      nameSpecified?: boolean,
      nameIn?: Array<string>,
      nameNotIn?: Array<string>,
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<Array<Uv>> {
      return localVarFp
        .getAllUvs(
          customerIdGreaterThan,
          customerIdLessThan,
          customerIdGreaterThanOrEqual,
          customerIdLessThanOrEqual,
          customerIdEquals,
          customerIdNotEquals,
          customerIdSpecified,
          customerIdIn,
          customerIdNotIn,
          idGreaterThan,
          idLessThan,
          idGreaterThanOrEqual,
          idLessThanOrEqual,
          idEquals,
          idNotEquals,
          idSpecified,
          idIn,
          idNotIn,
          loginContains,
          loginDoesNotContain,
          loginEquals,
          loginNotEquals,
          loginSpecified,
          loginIn,
          loginNotIn,
          mobileNumberContains,
          mobileNumberDoesNotContain,
          mobileNumberEquals,
          mobileNumberNotEquals,
          mobileNumberSpecified,
          mobileNumberIn,
          mobileNumberNotIn,
          firstNameContains,
          firstNameDoesNotContain,
          firstNameEquals,
          firstNameNotEquals,
          firstNameSpecified,
          firstNameIn,
          firstNameNotIn,
          lastNameContains,
          lastNameDoesNotContain,
          lastNameEquals,
          lastNameNotEquals,
          lastNameSpecified,
          lastNameIn,
          lastNameNotIn,
          distinct,
          nameContains,
          nameDoesNotContain,
          nameEquals,
          nameNotEquals,
          nameSpecified,
          nameIn,
          nameNotIn,
          page,
          size,
          sort,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUv(id: number, options?: any): AxiosPromise<Uv> {
      return localVarFp
        .getUv(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Uv} uv
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateUv(id: number, uv: Uv, options?: any): AxiosPromise<Uv> {
      return localVarFp
        .partialUpdateUv(id, uv, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UvResourceApi - object-oriented interface
 * @export
 * @class UvResourceApi
 * @extends {BaseAPI}
 */
export class UvResourceApi extends BaseAPI {
  /**
   *
   * @param {number} [customerIdGreaterThan]
   * @param {number} [customerIdLessThan]
   * @param {number} [customerIdGreaterThanOrEqual]
   * @param {number} [customerIdLessThanOrEqual]
   * @param {number} [customerIdEquals]
   * @param {number} [customerIdNotEquals]
   * @param {boolean} [customerIdSpecified]
   * @param {Array<number>} [customerIdIn]
   * @param {Array<number>} [customerIdNotIn]
   * @param {number} [idGreaterThan]
   * @param {number} [idLessThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idEquals]
   * @param {number} [idNotEquals]
   * @param {boolean} [idSpecified]
   * @param {Array<number>} [idIn]
   * @param {Array<number>} [idNotIn]
   * @param {string} [loginContains]
   * @param {string} [loginDoesNotContain]
   * @param {string} [loginEquals]
   * @param {string} [loginNotEquals]
   * @param {boolean} [loginSpecified]
   * @param {Array<string>} [loginIn]
   * @param {Array<string>} [loginNotIn]
   * @param {string} [mobileNumberContains]
   * @param {string} [mobileNumberDoesNotContain]
   * @param {string} [mobileNumberEquals]
   * @param {string} [mobileNumberNotEquals]
   * @param {boolean} [mobileNumberSpecified]
   * @param {Array<string>} [mobileNumberIn]
   * @param {Array<string>} [mobileNumberNotIn]
   * @param {string} [firstNameContains]
   * @param {string} [firstNameDoesNotContain]
   * @param {string} [firstNameEquals]
   * @param {string} [firstNameNotEquals]
   * @param {boolean} [firstNameSpecified]
   * @param {Array<string>} [firstNameIn]
   * @param {Array<string>} [firstNameNotIn]
   * @param {string} [lastNameContains]
   * @param {string} [lastNameDoesNotContain]
   * @param {string} [lastNameEquals]
   * @param {string} [lastNameNotEquals]
   * @param {boolean} [lastNameSpecified]
   * @param {Array<string>} [lastNameIn]
   * @param {Array<string>} [lastNameNotIn]
   * @param {boolean} [distinct]
   * @param {string} [nameContains]
   * @param {string} [nameDoesNotContain]
   * @param {string} [nameEquals]
   * @param {string} [nameNotEquals]
   * @param {boolean} [nameSpecified]
   * @param {Array<string>} [nameIn]
   * @param {Array<string>} [nameNotIn]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UvResourceApi
   */
  public countUvs(
    customerIdGreaterThan?: number,
    customerIdLessThan?: number,
    customerIdGreaterThanOrEqual?: number,
    customerIdLessThanOrEqual?: number,
    customerIdEquals?: number,
    customerIdNotEquals?: number,
    customerIdSpecified?: boolean,
    customerIdIn?: Array<number>,
    customerIdNotIn?: Array<number>,
    idGreaterThan?: number,
    idLessThan?: number,
    idGreaterThanOrEqual?: number,
    idLessThanOrEqual?: number,
    idEquals?: number,
    idNotEquals?: number,
    idSpecified?: boolean,
    idIn?: Array<number>,
    idNotIn?: Array<number>,
    loginContains?: string,
    loginDoesNotContain?: string,
    loginEquals?: string,
    loginNotEquals?: string,
    loginSpecified?: boolean,
    loginIn?: Array<string>,
    loginNotIn?: Array<string>,
    mobileNumberContains?: string,
    mobileNumberDoesNotContain?: string,
    mobileNumberEquals?: string,
    mobileNumberNotEquals?: string,
    mobileNumberSpecified?: boolean,
    mobileNumberIn?: Array<string>,
    mobileNumberNotIn?: Array<string>,
    firstNameContains?: string,
    firstNameDoesNotContain?: string,
    firstNameEquals?: string,
    firstNameNotEquals?: string,
    firstNameSpecified?: boolean,
    firstNameIn?: Array<string>,
    firstNameNotIn?: Array<string>,
    lastNameContains?: string,
    lastNameDoesNotContain?: string,
    lastNameEquals?: string,
    lastNameNotEquals?: string,
    lastNameSpecified?: boolean,
    lastNameIn?: Array<string>,
    lastNameNotIn?: Array<string>,
    distinct?: boolean,
    nameContains?: string,
    nameDoesNotContain?: string,
    nameEquals?: string,
    nameNotEquals?: string,
    nameSpecified?: boolean,
    nameIn?: Array<string>,
    nameNotIn?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return UvResourceApiFp(this.configuration)
      .countUvs(
        customerIdGreaterThan,
        customerIdLessThan,
        customerIdGreaterThanOrEqual,
        customerIdLessThanOrEqual,
        customerIdEquals,
        customerIdNotEquals,
        customerIdSpecified,
        customerIdIn,
        customerIdNotIn,
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        loginContains,
        loginDoesNotContain,
        loginEquals,
        loginNotEquals,
        loginSpecified,
        loginIn,
        loginNotIn,
        mobileNumberContains,
        mobileNumberDoesNotContain,
        mobileNumberEquals,
        mobileNumberNotEquals,
        mobileNumberSpecified,
        mobileNumberIn,
        mobileNumberNotIn,
        firstNameContains,
        firstNameDoesNotContain,
        firstNameEquals,
        firstNameNotEquals,
        firstNameSpecified,
        firstNameIn,
        firstNameNotIn,
        lastNameContains,
        lastNameDoesNotContain,
        lastNameEquals,
        lastNameNotEquals,
        lastNameSpecified,
        lastNameIn,
        lastNameNotIn,
        distinct,
        nameContains,
        nameDoesNotContain,
        nameEquals,
        nameNotEquals,
        nameSpecified,
        nameIn,
        nameNotIn,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [customerIdGreaterThan]
   * @param {number} [customerIdLessThan]
   * @param {number} [customerIdGreaterThanOrEqual]
   * @param {number} [customerIdLessThanOrEqual]
   * @param {number} [customerIdEquals]
   * @param {number} [customerIdNotEquals]
   * @param {boolean} [customerIdSpecified]
   * @param {Array<number>} [customerIdIn]
   * @param {Array<number>} [customerIdNotIn]
   * @param {number} [idGreaterThan]
   * @param {number} [idLessThan]
   * @param {number} [idGreaterThanOrEqual]
   * @param {number} [idLessThanOrEqual]
   * @param {number} [idEquals]
   * @param {number} [idNotEquals]
   * @param {boolean} [idSpecified]
   * @param {Array<number>} [idIn]
   * @param {Array<number>} [idNotIn]
   * @param {string} [loginContains]
   * @param {string} [loginDoesNotContain]
   * @param {string} [loginEquals]
   * @param {string} [loginNotEquals]
   * @param {boolean} [loginSpecified]
   * @param {Array<string>} [loginIn]
   * @param {Array<string>} [loginNotIn]
   * @param {string} [mobileNumberContains]
   * @param {string} [mobileNumberDoesNotContain]
   * @param {string} [mobileNumberEquals]
   * @param {string} [mobileNumberNotEquals]
   * @param {boolean} [mobileNumberSpecified]
   * @param {Array<string>} [mobileNumberIn]
   * @param {Array<string>} [mobileNumberNotIn]
   * @param {string} [firstNameContains]
   * @param {string} [firstNameDoesNotContain]
   * @param {string} [firstNameEquals]
   * @param {string} [firstNameNotEquals]
   * @param {boolean} [firstNameSpecified]
   * @param {Array<string>} [firstNameIn]
   * @param {Array<string>} [firstNameNotIn]
   * @param {string} [lastNameContains]
   * @param {string} [lastNameDoesNotContain]
   * @param {string} [lastNameEquals]
   * @param {string} [lastNameNotEquals]
   * @param {boolean} [lastNameSpecified]
   * @param {Array<string>} [lastNameIn]
   * @param {Array<string>} [lastNameNotIn]
   * @param {boolean} [distinct]
   * @param {string} [nameContains]
   * @param {string} [nameDoesNotContain]
   * @param {string} [nameEquals]
   * @param {string} [nameNotEquals]
   * @param {boolean} [nameSpecified]
   * @param {Array<string>} [nameIn]
   * @param {Array<string>} [nameNotIn]
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UvResourceApi
   */
  public getAllUvs(
    customerIdGreaterThan?: number,
    customerIdLessThan?: number,
    customerIdGreaterThanOrEqual?: number,
    customerIdLessThanOrEqual?: number,
    customerIdEquals?: number,
    customerIdNotEquals?: number,
    customerIdSpecified?: boolean,
    customerIdIn?: Array<number>,
    customerIdNotIn?: Array<number>,
    idGreaterThan?: number,
    idLessThan?: number,
    idGreaterThanOrEqual?: number,
    idLessThanOrEqual?: number,
    idEquals?: number,
    idNotEquals?: number,
    idSpecified?: boolean,
    idIn?: Array<number>,
    idNotIn?: Array<number>,
    loginContains?: string,
    loginDoesNotContain?: string,
    loginEquals?: string,
    loginNotEquals?: string,
    loginSpecified?: boolean,
    loginIn?: Array<string>,
    loginNotIn?: Array<string>,
    mobileNumberContains?: string,
    mobileNumberDoesNotContain?: string,
    mobileNumberEquals?: string,
    mobileNumberNotEquals?: string,
    mobileNumberSpecified?: boolean,
    mobileNumberIn?: Array<string>,
    mobileNumberNotIn?: Array<string>,
    firstNameContains?: string,
    firstNameDoesNotContain?: string,
    firstNameEquals?: string,
    firstNameNotEquals?: string,
    firstNameSpecified?: boolean,
    firstNameIn?: Array<string>,
    firstNameNotIn?: Array<string>,
    lastNameContains?: string,
    lastNameDoesNotContain?: string,
    lastNameEquals?: string,
    lastNameNotEquals?: string,
    lastNameSpecified?: boolean,
    lastNameIn?: Array<string>,
    lastNameNotIn?: Array<string>,
    distinct?: boolean,
    nameContains?: string,
    nameDoesNotContain?: string,
    nameEquals?: string,
    nameNotEquals?: string,
    nameSpecified?: boolean,
    nameIn?: Array<string>,
    nameNotIn?: Array<string>,
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return UvResourceApiFp(this.configuration)
      .getAllUvs(
        customerIdGreaterThan,
        customerIdLessThan,
        customerIdGreaterThanOrEqual,
        customerIdLessThanOrEqual,
        customerIdEquals,
        customerIdNotEquals,
        customerIdSpecified,
        customerIdIn,
        customerIdNotIn,
        idGreaterThan,
        idLessThan,
        idGreaterThanOrEqual,
        idLessThanOrEqual,
        idEquals,
        idNotEquals,
        idSpecified,
        idIn,
        idNotIn,
        loginContains,
        loginDoesNotContain,
        loginEquals,
        loginNotEquals,
        loginSpecified,
        loginIn,
        loginNotIn,
        mobileNumberContains,
        mobileNumberDoesNotContain,
        mobileNumberEquals,
        mobileNumberNotEquals,
        mobileNumberSpecified,
        mobileNumberIn,
        mobileNumberNotIn,
        firstNameContains,
        firstNameDoesNotContain,
        firstNameEquals,
        firstNameNotEquals,
        firstNameSpecified,
        firstNameIn,
        firstNameNotIn,
        lastNameContains,
        lastNameDoesNotContain,
        lastNameEquals,
        lastNameNotEquals,
        lastNameSpecified,
        lastNameIn,
        lastNameNotIn,
        distinct,
        nameContains,
        nameDoesNotContain,
        nameEquals,
        nameNotEquals,
        nameSpecified,
        nameIn,
        nameNotIn,
        page,
        size,
        sort,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UvResourceApi
   */
  public getUv(id: number, options?: AxiosRequestConfig) {
    return UvResourceApiFp(this.configuration)
      .getUv(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Uv} uv
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UvResourceApi
   */
  public partialUpdateUv(id: number, uv: Uv, options?: AxiosRequestConfig) {
    return UvResourceApiFp(this.configuration)
      .partialUpdateUv(id, uv, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * WarehouseResourceApi - axios parameter creator
 * @export
 */
export const WarehouseResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {Warehouse} warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWarehouse: async (
      warehouse: Warehouse,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'warehouse' is not null or undefined
      assertParamExists("createWarehouse", "warehouse", warehouse);
      const localVarPath = `/api/warehouses`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        warehouse,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWarehouse: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteWarehouse", "id", id);
      const localVarPath = `/api/warehouses/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllWarehouses: async (
      page?: number,
      size?: number,
      sort?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/warehouses`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWarehouse: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getWarehouse", "id", id);
      const localVarPath = `/api/warehouses/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Warehouse} warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateWarehouse: async (
      id: number,
      warehouse: Warehouse,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("partialUpdateWarehouse", "id", id);
      // verify required parameter 'warehouse' is not null or undefined
      assertParamExists("partialUpdateWarehouse", "warehouse", warehouse);
      const localVarPath = `/api/warehouses/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        warehouse,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Warehouse} warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWarehouse: async (
      id: number,
      warehouse: Warehouse,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateWarehouse", "id", id);
      // verify required parameter 'warehouse' is not null or undefined
      assertParamExists("updateWarehouse", "warehouse", warehouse);
      const localVarPath = `/api/warehouses/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        warehouse,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WarehouseResourceApi - functional programming interface
 * @export
 */
export const WarehouseResourceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    WarehouseResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {Warehouse} warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createWarehouse(
      warehouse: Warehouse,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Warehouse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createWarehouse(
        warehouse,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteWarehouse(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWarehouse(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllWarehouses(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Warehouse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllWarehouses(
          page,
          size,
          sort,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWarehouse(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Warehouse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWarehouse(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Warehouse} warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partialUpdateWarehouse(
      id: number,
      warehouse: Warehouse,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Warehouse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.partialUpdateWarehouse(
          id,
          warehouse,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {Warehouse} warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateWarehouse(
      id: number,
      warehouse: Warehouse,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Warehouse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateWarehouse(
        id,
        warehouse,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * WarehouseResourceApi - factory interface
 * @export
 */
export const WarehouseResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = WarehouseResourceApiFp(configuration);
  return {
    /**
     *
     * @param {Warehouse} warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWarehouse(
      warehouse: Warehouse,
      options?: any
    ): AxiosPromise<Warehouse> {
      return localVarFp
        .createWarehouse(warehouse, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWarehouse(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteWarehouse(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllWarehouses(
      page?: number,
      size?: number,
      sort?: Array<string>,
      options?: any
    ): AxiosPromise<Array<Warehouse>> {
      return localVarFp
        .getAllWarehouses(page, size, sort, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWarehouse(id: number, options?: any): AxiosPromise<Warehouse> {
      return localVarFp
        .getWarehouse(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Warehouse} warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partialUpdateWarehouse(
      id: number,
      warehouse: Warehouse,
      options?: any
    ): AxiosPromise<Warehouse> {
      return localVarFp
        .partialUpdateWarehouse(id, warehouse, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Warehouse} warehouse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWarehouse(
      id: number,
      warehouse: Warehouse,
      options?: any
    ): AxiosPromise<Warehouse> {
      return localVarFp
        .updateWarehouse(id, warehouse, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WarehouseResourceApi - object-oriented interface
 * @export
 * @class WarehouseResourceApi
 * @extends {BaseAPI}
 */
export class WarehouseResourceApi extends BaseAPI {
  /**
   *
   * @param {Warehouse} warehouse
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WarehouseResourceApi
   */
  public createWarehouse(warehouse: Warehouse, options?: AxiosRequestConfig) {
    return WarehouseResourceApiFp(this.configuration)
      .createWarehouse(warehouse, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WarehouseResourceApi
   */
  public deleteWarehouse(id: number, options?: AxiosRequestConfig) {
    return WarehouseResourceApiFp(this.configuration)
      .deleteWarehouse(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [page] Zero-based page index (0..N)
   * @param {number} [size] The size of the page to be returned
   * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WarehouseResourceApi
   */
  public getAllWarehouses(
    page?: number,
    size?: number,
    sort?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return WarehouseResourceApiFp(this.configuration)
      .getAllWarehouses(page, size, sort, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WarehouseResourceApi
   */
  public getWarehouse(id: number, options?: AxiosRequestConfig) {
    return WarehouseResourceApiFp(this.configuration)
      .getWarehouse(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Warehouse} warehouse
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WarehouseResourceApi
   */
  public partialUpdateWarehouse(
    id: number,
    warehouse: Warehouse,
    options?: AxiosRequestConfig
  ) {
    return WarehouseResourceApiFp(this.configuration)
      .partialUpdateWarehouse(id, warehouse, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Warehouse} warehouse
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WarehouseResourceApi
   */
  public updateWarehouse(
    id: number,
    warehouse: Warehouse,
    options?: AxiosRequestConfig
  ) {
    return WarehouseResourceApiFp(this.configuration)
      .updateWarehouse(id, warehouse, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
